
modbus_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08007010  08007010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cdc  08007cdc  00009294  2**0
                  CONTENTS
  4 .ARM          00000008  08007cdc  08007cdc  00008cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce4  08007ce4  00009294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce4  08007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  08007cec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000294  08007f80  00009294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  08007f80  00009ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad6  00000000  00000000  000092bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372a  00000000  00000000  0001ad93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b81  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001937f  00000000  00000000  0001ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a7a  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875fb  00000000  00000000  0004fd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d732d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000d7370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000db244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000294 	.word	0x20000294
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ff8 	.word	0x08006ff8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000298 	.word	0x20000298
 8000148:	08006ff8 	.word	0x08006ff8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_at_response_error_check>:
char tx_buff[AT_TX_BUFF_SIZE] = "";
uint16_t RxLen;



at_state_t _at_response_error_check(char* rx_buff){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(find_substr(rx_buff, "ERROR")){
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <_at_response_error_check+0x24>)
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f000 f80c 	bl	8000184 <find_substr>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d001      	beq.n	8000176 <_at_response_error_check+0x1a>
		return AT_STATE_ERROR;
 8000172:	2300      	movs	r3, #0
 8000174:	e000      	b.n	8000178 <_at_response_error_check+0x1c>
	}
	return AT_STATE_OK;
 8000176:	2301      	movs	r3, #1
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08007010 	.word	0x08007010

08000184 <find_substr>:


bool find_substr(char* str, char* substr){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	char* pch = strstr(str, substr);
 800018e:	6839      	ldr	r1, [r7, #0]
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f006 fa92 	bl	80066ba <strstr>
 8000196:	60f8      	str	r0, [r7, #12]
		if(pch != NULL){
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d001      	beq.n	80001a2 <find_substr+0x1e>
			return true;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <find_substr+0x20>
		}
		return false;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <flush_buff>:


void flush_buff(char* buffer){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	memset(buffer,0,strlen(buffer));
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffc9 	bl	800014c <strlen>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	2100      	movs	r1, #0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f006 fa63 	bl	800668c <memset>
	strcpy(buffer, "");
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <at_read>:



at_state_t at_read(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af02      	add	r7, sp, #8
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 80001e2:	68b8      	ldr	r0, [r7, #8]
 80001e4:	f7ff ffe2 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80001e8:	4b19      	ldr	r3, [pc, #100]	@ (8000250 <at_read+0x7c>)
 80001ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <at_read+0x80>)
 80001ec:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	4817      	ldr	r0, [pc, #92]	@ (8000250 <at_read+0x7c>)
 80001f2:	f006 fa53 	bl	800669c <strcat>
	strcat(tx_buff, "?\r\n");
 80001f6:	4816      	ldr	r0, [pc, #88]	@ (8000250 <at_read+0x7c>)
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b13      	ldr	r3, [pc, #76]	@ (8000250 <at_read+0x7c>)
 8000202:	4413      	add	r3, r2
 8000204:	4a14      	ldr	r2, [pc, #80]	@ (8000258 <at_read+0x84>)
 8000206:	6810      	ldr	r0, [r2, #0]
 8000208:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 800020a:	4811      	ldr	r0, [pc, #68]	@ (8000250 <at_read+0x7c>)
 800020c:	f7ff ff9e 	bl	800014c <strlen>
 8000210:	4603      	mov	r3, r0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	3301      	adds	r3, #1
 8000216:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	b29b      	uxth	r3, r3
 800021c:	461a      	mov	r2, r3
 800021e:	490c      	ldr	r1, [pc, #48]	@ (8000250 <at_read+0x7c>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f005 fb00 	bl	8005826 <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 8000226:	887b      	ldrh	r3, [r7, #2]
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <at_read+0x88>)
 800022c:	2232      	movs	r2, #50	@ 0x32
 800022e:	68b9      	ldr	r1, [r7, #8]
 8000230:	68f8      	ldr	r0, [r7, #12]
 8000232:	f005 fb2d 	bl	8005890 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 8000236:	68b8      	ldr	r0, [r7, #8]
 8000238:	f7ff ff90 	bl	800015c <_at_response_error_check>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <at_read+0x72>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000242:	2301      	movs	r3, #1
 8000244:	e000      	b.n	8000248 <at_read+0x74>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3718      	adds	r7, #24
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200002b0 	.word	0x200002b0
 8000254:	002b5441 	.word	0x002b5441
 8000258:	08007018 	.word	0x08007018
 800025c:	200002e2 	.word	0x200002e2

08000260 <at_write>:



at_state_t at_write(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000260:	b580      	push	{r7, lr}
 8000262:	b08a      	sub	sp, #40	@ 0x28
 8000264:	af02      	add	r7, sp, #8
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800026e:	68b8      	ldr	r0, [r7, #8]
 8000270:	f7ff ff9c 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000274:	4b2f      	ldr	r3, [pc, #188]	@ (8000334 <at_write+0xd4>)
 8000276:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <at_write+0xd8>)
 8000278:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	482d      	ldr	r0, [pc, #180]	@ (8000334 <at_write+0xd4>)
 800027e:	f006 fa0d 	bl	800669c <strcat>
	strcat(tx_buff, "=");
 8000282:	482c      	ldr	r0, [pc, #176]	@ (8000334 <at_write+0xd4>)
 8000284:	f7ff ff62 	bl	800014c <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	461a      	mov	r2, r3
 800028c:	4b29      	ldr	r3, [pc, #164]	@ (8000334 <at_write+0xd4>)
 800028e:	4413      	add	r3, r2
 8000290:	492a      	ldr	r1, [pc, #168]	@ (800033c <at_write+0xdc>)
 8000292:	461a      	mov	r2, r3
 8000294:	460b      	mov	r3, r1
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 800029a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800029e:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
 80002a4:	e00a      	b.n	80002bc <at_write+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	1d1a      	adds	r2, r3, #4
 80002aa:	617a      	str	r2, [r7, #20]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4619      	mov	r1, r3
 80002b0:	4820      	ldr	r0, [pc, #128]	@ (8000334 <at_write+0xd4>)
 80002b2:	f006 f9f3 	bl	800669c <strcat>
	for(int i=0;i<argc;i++){
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	3301      	adds	r3, #1
 80002ba:	61fb      	str	r3, [r7, #28]
 80002bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80002c0:	69fa      	ldr	r2, [r7, #28]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	dbef      	blt.n	80002a6 <at_write+0x46>
	}
	strcat(tx_buff, "\r\n");
 80002c6:	481b      	ldr	r0, [pc, #108]	@ (8000334 <at_write+0xd4>)
 80002c8:	f7ff ff40 	bl	800014c <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <at_write+0xd4>)
 80002d2:	4413      	add	r3, r2
 80002d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000340 <at_write+0xe0>)
 80002d6:	8811      	ldrh	r1, [r2, #0]
 80002d8:	7892      	ldrb	r2, [r2, #2]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 80002de:	4815      	ldr	r0, [pc, #84]	@ (8000334 <at_write+0xd4>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	3301      	adds	r3, #1
 80002ea:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80002ec:	7efb      	ldrb	r3, [r7, #27]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4910      	ldr	r1, [pc, #64]	@ (8000334 <at_write+0xd4>)
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f005 fa96 	bl	8005826 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80002fa:	887b      	ldrh	r3, [r7, #2]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <at_write+0xe4>)
 8000300:	2232      	movs	r2, #50	@ 0x32
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f005 fac3 	bl	8005890 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff26 	bl	800015c <_at_response_error_check>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d008      	beq.n	8000328 <at_write+0xc8>
		if(find_substr(rx_buff, AT_OK)){
 8000316:	490c      	ldr	r1, [pc, #48]	@ (8000348 <at_write+0xe8>)
 8000318:	68b8      	ldr	r0, [r7, #8]
 800031a:	f7ff ff33 	bl	8000184 <find_substr>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <at_write+0xc8>
			return AT_STATE_OK;
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <at_write+0xca>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000328:	2300      	movs	r3, #0
}
 800032a:	4618      	mov	r0, r3
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200002b0 	.word	0x200002b0
 8000338:	002b5441 	.word	0x002b5441
 800033c:	0800701c 	.word	0x0800701c
 8000340:	08007020 	.word	0x08007020
 8000344:	200002e2 	.word	0x200002e2
 8000348:	08007024 	.word	0x08007024

0800034c <at_execute>:



at_state_t at_execute(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af02      	add	r7, sp, #8
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800035a:	68b8      	ldr	r0, [r7, #8]
 800035c:	f7ff ff26 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <at_execute+0x24>
		strcpy(tx_buff, "AT+");
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <at_execute+0xa8>)
 800036a:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <at_execute+0xac>)
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	e007      	b.n	8000380 <at_execute+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 8000370:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <at_execute+0xa8>)
 8000372:	4a22      	ldr	r2, [pc, #136]	@ (80003fc <at_execute+0xb0>)
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	4611      	mov	r1, r2
 8000378:	8019      	strh	r1, [r3, #0]
 800037a:	3302      	adds	r3, #2
 800037c:	0c12      	lsrs	r2, r2, #16
 800037e:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	481c      	ldr	r0, [pc, #112]	@ (80003f4 <at_execute+0xa8>)
 8000384:	f006 f98a 	bl	800669c <strcat>
	strcat(tx_buff, "\r\n");
 8000388:	481a      	ldr	r0, [pc, #104]	@ (80003f4 <at_execute+0xa8>)
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	461a      	mov	r2, r3
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <at_execute+0xa8>)
 8000394:	4413      	add	r3, r2
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <at_execute+0xb4>)
 8000398:	8811      	ldrh	r1, [r2, #0]
 800039a:	7892      	ldrb	r2, [r2, #2]
 800039c:	8019      	strh	r1, [r3, #0]
 800039e:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80003a0:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <at_execute+0xa8>)
 80003a2:	f7ff fed3 	bl	800014c <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	3301      	adds	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	490f      	ldr	r1, [pc, #60]	@ (80003f4 <at_execute+0xa8>)
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f005 fa35 	bl	8005826 <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <at_execute+0xb8>)
 80003c2:	2232      	movs	r2, #50	@ 0x32
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	68f8      	ldr	r0, [r7, #12]
 80003c8:	f005 fa62 	bl	8005890 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 80003cc:	68b8      	ldr	r0, [r7, #8]
 80003ce:	f7ff fec5 	bl	800015c <_at_response_error_check>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <at_execute+0x9e>
		if(find_substr(rx_buff, AT_OK)){
 80003d8:	490b      	ldr	r1, [pc, #44]	@ (8000408 <at_execute+0xbc>)
 80003da:	68b8      	ldr	r0, [r7, #8]
 80003dc:	f7ff fed2 	bl	8000184 <find_substr>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <at_execute+0x9e>
			return AT_STATE_OK;
 80003e6:	2301      	movs	r3, #1
 80003e8:	e000      	b.n	80003ec <at_execute+0xa0>
		}
	}
	return AT_STATE_ERROR;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200002b0 	.word	0x200002b0
 80003f8:	002b5441 	.word	0x002b5441
 80003fc:	08007028 	.word	0x08007028
 8000400:	08007020 	.word	0x08007020
 8000404:	200002e2 	.word	0x200002e2
 8000408:	08007024 	.word	0x08007024

0800040c <at_read_blocking>:





at_state_t at_read_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800041a:	68b8      	ldr	r0, [r7, #8]
 800041c:	f7ff fec6 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <at_read_blocking+0x78>)
 8000422:	4a19      	ldr	r2, [pc, #100]	@ (8000488 <at_read_blocking+0x7c>)
 8000424:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <at_read_blocking+0x78>)
 800042a:	f006 f937 	bl	800669c <strcat>
	strcat(tx_buff, "?\r\n");
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <at_read_blocking+0x78>)
 8000430:	f7ff fe8c 	bl	800014c <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <at_read_blocking+0x78>)
 800043a:	4413      	add	r3, r2
 800043c:	4a13      	ldr	r2, [pc, #76]	@ (800048c <at_read_blocking+0x80>)
 800043e:	6810      	ldr	r0, [r2, #0]
 8000440:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 8000442:	4810      	ldr	r0, [pc, #64]	@ (8000484 <at_read_blocking+0x78>)
 8000444:	f7ff fe82 	bl	800014c <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b2db      	uxtb	r3, r3
 800044c:	3301      	adds	r3, #1
 800044e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000450:	7dfb      	ldrb	r3, [r7, #23]
 8000452:	b29b      	uxth	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	490b      	ldr	r1, [pc, #44]	@ (8000484 <at_read_blocking+0x78>)
 8000458:	68f8      	ldr	r0, [r7, #12]
 800045a:	f005 f9e4 	bl	8005826 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	2232      	movs	r2, #50	@ 0x32
 8000462:	68b9      	ldr	r1, [r7, #8]
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f005 f94c 	bl	8005702 <HAL_UART_Receive>
//	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
	if(_at_response_error_check(rx_buff)){
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f7ff fe76 	bl	800015c <_at_response_error_check>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <at_read_blocking+0x6e>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <at_read_blocking+0x70>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 800047a:	2300      	movs	r3, #0

}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200002b0 	.word	0x200002b0
 8000488:	002b5441 	.word	0x002b5441
 800048c:	08007018 	.word	0x08007018

08000490 <at_write_blocking>:





at_state_t at_write_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800049e:	68b8      	ldr	r0, [r7, #8]
 80004a0:	f7ff fe84 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80004a4:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <at_write_blocking+0xe0>)
 80004a6:	4a33      	ldr	r2, [pc, #204]	@ (8000574 <at_write_blocking+0xe4>)
 80004a8:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4830      	ldr	r0, [pc, #192]	@ (8000570 <at_write_blocking+0xe0>)
 80004ae:	f006 f8f5 	bl	800669c <strcat>
	strcat(tx_buff, "=");
 80004b2:	482f      	ldr	r0, [pc, #188]	@ (8000570 <at_write_blocking+0xe0>)
 80004b4:	f7ff fe4a 	bl	800014c <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <at_write_blocking+0xe0>)
 80004be:	4413      	add	r3, r2
 80004c0:	492d      	ldr	r1, [pc, #180]	@ (8000578 <at_write_blocking+0xe8>)
 80004c2:	461a      	mov	r2, r3
 80004c4:	460b      	mov	r3, r1
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 80004ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ce:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	e00a      	b.n	80004ec <at_write_blocking+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	1d1a      	adds	r2, r3, #4
 80004da:	617a      	str	r2, [r7, #20]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <at_write_blocking+0xe0>)
 80004e2:	f006 f8db 	bl	800669c <strcat>
	for(int i=0;i<argc;i++){
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3301      	adds	r3, #1
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dbef      	blt.n	80004d6 <at_write_blocking+0x46>
	}
	strcat(tx_buff, "\r\n");
 80004f6:	481e      	ldr	r0, [pc, #120]	@ (8000570 <at_write_blocking+0xe0>)
 80004f8:	f7ff fe28 	bl	800014c <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <at_write_blocking+0xe0>)
 8000502:	4413      	add	r3, r2
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <at_write_blocking+0xec>)
 8000506:	8811      	ldrh	r1, [r2, #0]
 8000508:	7892      	ldrb	r2, [r2, #2]
 800050a:	8019      	strh	r1, [r3, #0]
 800050c:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 800050e:	4818      	ldr	r0, [pc, #96]	@ (8000570 <at_write_blocking+0xe0>)
 8000510:	f7ff fe1c 	bl	800014c <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b2db      	uxtb	r3, r3
 8000518:	3301      	adds	r3, #1
 800051a:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 800051c:	7efb      	ldrb	r3, [r7, #27]
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4913      	ldr	r1, [pc, #76]	@ (8000570 <at_write_blocking+0xe0>)
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f005 f97e 	bl	8005826 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	2232      	movs	r2, #50	@ 0x32
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f005 f8e6 	bl	8005702 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f7ff fe10 	bl	800015c <_at_response_error_check>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d011      	beq.n	8000566 <at_write_blocking+0xd6>
		if(find_substr(rx_buff, AT_OK)){
 8000542:	490f      	ldr	r1, [pc, #60]	@ (8000580 <at_write_blocking+0xf0>)
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f7ff fe1d 	bl	8000184 <find_substr>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <at_write_blocking+0xc4>
			return AT_STATE_OK;
 8000550:	2301      	movs	r3, #1
 8000552:	e009      	b.n	8000568 <at_write_blocking+0xd8>
		}
		if(find_substr(rx_buff, ">")){
 8000554:	490b      	ldr	r1, [pc, #44]	@ (8000584 <at_write_blocking+0xf4>)
 8000556:	68b8      	ldr	r0, [r7, #8]
 8000558:	f7ff fe14 	bl	8000184 <find_substr>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <at_write_blocking+0xd6>
			return AT_STATE_ENTER_INPUT;
 8000562:	2302      	movs	r3, #2
 8000564:	e000      	b.n	8000568 <at_write_blocking+0xd8>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000566:	2300      	movs	r3, #0

}
 8000568:	4618      	mov	r0, r3
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200002b0 	.word	0x200002b0
 8000574:	002b5441 	.word	0x002b5441
 8000578:	0800701c 	.word	0x0800701c
 800057c:	08007020 	.word	0x08007020
 8000580:	08007024 	.word	0x08007024
 8000584:	0800702c 	.word	0x0800702c

08000588 <at_execute_blocking>:





at_state_t at_execute_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f7ff fe08 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <at_execute_blocking+0x24>
		strcpy(tx_buff, "AT+");
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <at_execute_blocking+0xa4>)
 80005a6:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <at_execute_blocking+0xa8>)
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e007      	b.n	80005bc <at_execute_blocking+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <at_execute_blocking+0xa4>)
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <at_execute_blocking+0xac>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	0c12      	lsrs	r2, r2, #16
 80005ba:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	481b      	ldr	r0, [pc, #108]	@ (800062c <at_execute_blocking+0xa4>)
 80005c0:	f006 f86c 	bl	800669c <strcat>
	strcat(tx_buff, "\r\n");
 80005c4:	4819      	ldr	r0, [pc, #100]	@ (800062c <at_execute_blocking+0xa4>)
 80005c6:	f7ff fdc1 	bl	800014c <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <at_execute_blocking+0xa4>)
 80005d0:	4413      	add	r3, r2
 80005d2:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <at_execute_blocking+0xb0>)
 80005d4:	8811      	ldrh	r1, [r2, #0]
 80005d6:	7892      	ldrb	r2, [r2, #2]
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <at_execute_blocking+0xa4>)
 80005de:	f7ff fdb5 	bl	800014c <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <at_execute_blocking+0xa4>)
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f005 f917 	bl	8005826 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	2232      	movs	r2, #50	@ 0x32
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f005 f87f 	bl	8005702 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f7ff fda9 	bl	800015c <_at_response_error_check>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <at_execute_blocking+0x9a>
		if(find_substr(rx_buff, AT_OK)){
 8000610:	490a      	ldr	r1, [pc, #40]	@ (800063c <at_execute_blocking+0xb4>)
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f7ff fdb6 	bl	8000184 <find_substr>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <at_execute_blocking+0x9a>
			return AT_STATE_OK;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <at_execute_blocking+0x9c>
		}
	}
	return AT_STATE_ERROR;
 8000622:	2300      	movs	r3, #0

}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200002b0 	.word	0x200002b0
 8000630:	002b5441 	.word	0x002b5441
 8000634:	08007028 	.word	0x08007028
 8000638:	08007020 	.word	0x08007020
 800063c:	08007024 	.word	0x08007024

08000640 <CRC16>:


#include "crc16.h"

uint16_t CRC16(uint8_t *puchMsg, unsigned short usDataLen ) /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	uint8_t uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	@ 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	uint8_t uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	@ 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--){
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--){
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	807a      	strh	r2, [r7, #2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000100 	.word	0x20000100

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_GPIO_Init+0x70>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a19      	ldr	r2, [pc, #100]	@ (800071c <MX_GPIO_Init+0x70>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_GPIO_Init+0x70>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_GPIO_Init+0x70>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_GPIO_Init+0x70>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_GPIO_Init+0x70>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_GPIO_Init+0x70>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <MX_GPIO_Init+0x70>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_GPIO_Init+0x70>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_GPIO_Init+0x70>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a07      	ldr	r2, [pc, #28]	@ (800071c <MX_GPIO_Init+0x70>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b05      	ldr	r3, [pc, #20]	@ (800071c <MX_GPIO_Init+0x70>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000

08000720 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f002 fa17 	bl	8002b90 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fade 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200002e4 	.word	0x200002e4
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <HAL_I2C_MspInit+0x70>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d123      	bne.n	80007e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <HAL_I2C_MspInit+0x78>)
 80007c8:	f001 ff3a 	bl	8002640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	rtc_set_alarm_seconds_it(hrtc, REPEAT_DELAY);
 8000800:	210a      	movs	r1, #10
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 fde8 	bl	80013d8 <rtc_set_alarm_seconds_it>
	repeative_task();
 8000808:	f000 f99e 	bl	8000b48 <repeative_task>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800080c:	2102      	movs	r1, #2
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <HAL_RTC_AlarmAEventCallback+0x24>)
 8000810:	f002 f984 	bl	8002b1c <HAL_GPIO_TogglePin>

}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010800 	.word	0x40010800

08000820 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000830:	d109      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0x26>
		if(sim_reboot(&sim)){
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x30>)
 8000834:	f000 fea0 	bl	8001578 <sim_reboot>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_EXTI_Callback+0x26>
			oled_printl(&oled, "sim reboot");
 800083e:	4905      	ldr	r1, [pc, #20]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x34>)
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x38>)
 8000842:	f000 fcd3 	bl	80011ec <oled_printl>
		}
	}

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000338 	.word	0x20000338
 8000854:	08007030 	.word	0x08007030
 8000858:	2000034c 	.word	0x2000034c

0800085c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_UART_TxCpltCallback+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d103      	bne.n	800087a <HAL_UART_TxCpltCallback+0x1e>
		oled_printl(&oled, "modbus req sent");
 8000872:	4905      	ldr	r1, [pc, #20]	@ (8000888 <HAL_UART_TxCpltCallback+0x2c>)
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <HAL_UART_TxCpltCallback+0x30>)
 8000876:	f000 fcb9 	bl	80011ec <oled_printl>
	}

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000020c 	.word	0x2000020c
 8000888:	0800703c 	.word	0x0800703c
 800088c:	2000034c 	.word	0x2000034c

08000890 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){

	}
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <HAL_UARTEx_RxEventCallback>:





void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
	oled_printl(&oled, "rx event");
 80008b0:	4932      	ldr	r1, [pc, #200]	@ (800097c <HAL_UARTEx_RxEventCallback+0xd8>)
 80008b2:	4833      	ldr	r0, [pc, #204]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 80008b4:	f000 fc9a 	bl	80011ec <oled_printl>
	if(huart->Instance == PHUART_MODBUS->Instance){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <HAL_UARTEx_RxEventCallback+0xe0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d156      	bne.n	8000974 <HAL_UARTEx_RxEventCallback+0xd0>
		oled_printl(&oled, "modbus response");
 80008c6:	4930      	ldr	r1, [pc, #192]	@ (8000988 <HAL_UARTEx_RxEventCallback+0xe4>)
 80008c8:	482d      	ldr	r0, [pc, #180]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 80008ca:	f000 fc8f 	bl	80011ec <oled_printl>
		MODBUS_MASTER_res normal_res = {0};
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
		MODBUS_MASTER_exception exception = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	809a      	strh	r2, [r3, #4]

		if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_OK){
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	2139      	movs	r1, #57	@ 0x39
 80008ee:	4827      	ldr	r0, [pc, #156]	@ (800098c <HAL_UARTEx_RxEventCallback+0xe8>)
 80008f0:	f000 faa0 	bl	8000e34 <MODBUS_MASTER_response_handler>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d122      	bne.n	8000940 <HAL_UARTEx_RxEventCallback+0x9c>
			oled_printl(&oled, "MODBUS_RES_OK");
 80008fa:	4925      	ldr	r1, [pc, #148]	@ (8000990 <HAL_UARTEx_RxEventCallback+0xec>)
 80008fc:	4820      	ldr	r0, [pc, #128]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 80008fe:	f000 fc75 	bl	80011ec <oled_printl>
			uint8_t* register_data = normal_res.register_data;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	61fb      	str	r3, [r7, #28]

			sprintf(mqtt_payload_buff, "0x%X", (uint16_t)((register_data[0]<<8) | register_data[1]));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3301      	adds	r3, #1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	491d      	ldr	r1, [pc, #116]	@ (8000994 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000920:	481d      	ldr	r0, [pc, #116]	@ (8000998 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000922:	f005 fe93 	bl	800664c <siprintf>
			// now publish the data
			mqtt_publish_string(&mqtt_conn, "0", "0", "stm32/plc/register0", mqtt_payload_buff);
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_UARTEx_RxEventCallback+0xf8>)
 800092c:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <HAL_UARTEx_RxEventCallback+0xfc>)
 800092e:	491c      	ldr	r1, [pc, #112]	@ (80009a0 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000930:	481c      	ldr	r0, [pc, #112]	@ (80009a4 <HAL_UARTEx_RxEventCallback+0x100>)
 8000932:	f000 fbb1 	bl	8001098 <mqtt_publish_string>
			oled_printl(&oled, "published");
 8000936:	491c      	ldr	r1, [pc, #112]	@ (80009a8 <HAL_UARTEx_RxEventCallback+0x104>)
 8000938:	4811      	ldr	r0, [pc, #68]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 800093a:	f000 fc57 	bl	80011ec <oled_printl>


	}


}
 800093e:	e019      	b.n	8000974 <HAL_UARTEx_RxEventCallback+0xd0>
		else if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_EXCEPTION){
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	2139      	movs	r1, #57	@ 0x39
 800094a:	4810      	ldr	r0, [pc, #64]	@ (800098c <HAL_UARTEx_RxEventCallback+0xe8>)
 800094c:	f000 fa72 	bl	8000e34 <MODBUS_MASTER_response_handler>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10a      	bne.n	800096c <HAL_UARTEx_RxEventCallback+0xc8>
			oled_printl(&oled, "MODBUS_RES_EXCEPTION");
 8000956:	4915      	ldr	r1, [pc, #84]	@ (80009ac <HAL_UARTEx_RxEventCallback+0x108>)
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 800095a:	f000 fc47 	bl	80011ec <oled_printl>
			sprintf(oled_buff, "exception 0x%X", (uint16_t) exception.exception_code);
 800095e:	7abb      	ldrb	r3, [r7, #10]
 8000960:	461a      	mov	r2, r3
 8000962:	4913      	ldr	r1, [pc, #76]	@ (80009b0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000964:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <HAL_UARTEx_RxEventCallback+0x110>)
 8000966:	f005 fe71 	bl	800664c <siprintf>
}
 800096a:	e003      	b.n	8000974 <HAL_UARTEx_RxEventCallback+0xd0>
			oled_printl(&oled, "UNKNOWN RESPONSE!");
 800096c:	4912      	ldr	r1, [pc, #72]	@ (80009b8 <HAL_UARTEx_RxEventCallback+0x114>)
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000970:	f000 fc3c 	bl	80011ec <oled_printl>
}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	0800704c 	.word	0x0800704c
 8000980:	2000034c 	.word	0x2000034c
 8000984:	2000020c 	.word	0x2000020c
 8000988:	08007058 	.word	0x08007058
 800098c:	20000374 	.word	0x20000374
 8000990:	08007068 	.word	0x08007068
 8000994:	08007078 	.word	0x08007078
 8000998:	200003c8 	.word	0x200003c8
 800099c:	08007080 	.word	0x08007080
 80009a0:	08007094 	.word	0x08007094
 80009a4:	20000354 	.word	0x20000354
 80009a8:	08007098 	.word	0x08007098
 80009ac:	080070a4 	.word	0x080070a4
 80009b0:	080070bc 	.word	0x080070bc
 80009b4:	200003dc 	.word	0x200003dc
 80009b8:	080070cc 	.word	0x080070cc

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f001 fbc7 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f863 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f7ff fe6f 	bl	80006ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ce:	f7ff fea7 	bl	8000720 <MX_I2C1_Init>
  MX_RTC_Init();
 80009d2:	f000 fc73 	bl	80012bc <MX_RTC_Init>
  MX_USART1_UART_Init();
 80009d6:	f001 faaf 	bl	8001f38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009da:	f001 fad7 	bl	8001f8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  oled_init(&oled, &hi2c1);
 80009de:	491b      	ldr	r1, [pc, #108]	@ (8000a4c <main+0x90>)
 80009e0:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <main+0x94>)
 80009e2:	f000 fc45 	bl	8001270 <oled_init>
  sim_init(&sim, PHUART_SIM, "mtnirancell", "", "");
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <main+0x98>)
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <main+0x9c>)
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <main+0x9c>)
 80009f0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a5c <main+0xa0>)
 80009f2:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <main+0xa4>)
 80009f4:	f000 fd40 	bl	8001478 <sim_init>
  mqtt_init(&mqtt_conn, &sim, "stm32", "185.165.30.166", "1883", "", "", MQTT_KEEPTIME);
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <main+0xa8>)
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <main+0x9c>)
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <main+0x9c>)
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <main+0xac>)
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <main+0xb0>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <main+0xb4>)
 8000a0c:	4914      	ldr	r1, [pc, #80]	@ (8000a60 <main+0xa4>)
 8000a0e:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <main+0xb8>)
 8000a10:	f000 fa94 	bl	8000f3c <mqtt_init>
  MODBUS_MASTER_init(&master, PHUART_MODBUS, modbus_tx_buff, modbus_rx_buff);
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <main+0xbc>)
 8000a16:	6819      	ldr	r1, [r3, #0]
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <main+0xc0>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <main+0xc4>)
 8000a1c:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <main+0xc8>)
 8000a1e:	f000 f993 	bl	8000d48 <MODBUS_MASTER_init>


setup:
  if(setup()){
 8000a22:	f000 f89d 	bl	8000b60 <setup>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <main+0x7e>
	  repeative_task();
 8000a2c:	f000 f88c 	bl	8000b48 <repeative_task>
	  rtc_set_alarm_seconds_it(&hrtc, REPEAT_DELAY);
 8000a30:	210a      	movs	r1, #10
 8000a32:	4815      	ldr	r0, [pc, #84]	@ (8000a88 <main+0xcc>)
 8000a34:	f000 fcd0 	bl	80013d8 <rtc_set_alarm_seconds_it>
 8000a38:	e007      	b.n	8000a4a <main+0x8e>
  }
  else{
	  oled_printl(&oled, "sim reboot");
 8000a3a:	4914      	ldr	r1, [pc, #80]	@ (8000a8c <main+0xd0>)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <main+0x94>)
 8000a3e:	f000 fbd5 	bl	80011ec <oled_printl>
	  sim_reboot(&sim);
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <main+0xa4>)
 8000a44:	f000 fd98 	bl	8001578 <sim_reboot>
	  goto setup;
 8000a48:	e7eb      	b.n	8000a22 <main+0x66>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x8e>
 8000a4c:	200002e4 	.word	0x200002e4
 8000a50:	2000034c 	.word	0x2000034c
 8000a54:	20000208 	.word	0x20000208
 8000a58:	080070e0 	.word	0x080070e0
 8000a5c:	080070e4 	.word	0x080070e4
 8000a60:	20000338 	.word	0x20000338
 8000a64:	08007108 	.word	0x08007108
 8000a68:	0800710c 	.word	0x0800710c
 8000a6c:	080070f0 	.word	0x080070f0
 8000a70:	08007100 	.word	0x08007100
 8000a74:	20000354 	.word	0x20000354
 8000a78:	2000020c 	.word	0x2000020c
 8000a7c:	20000388 	.word	0x20000388
 8000a80:	20000380 	.word	0x20000380
 8000a84:	20000374 	.word	0x20000374
 8000a88:	20000450 	.word	0x20000450
 8000a8c:	08007030 	.word	0x08007030

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	@ 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a9a:	2228      	movs	r2, #40	@ 0x28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fdf4 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000adc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fd94 	bl	8003614 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000af2:	f000 f919 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f8ec 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b1e:	f000 f903 	bl	8000d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b22:	2301      	movs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000b26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fb12 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b3a:	f000 f8f5 	bl	8000d28 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3750      	adds	r7, #80	@ 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <repeative_task>:

/* USER CODE BEGIN 4 */


void repeative_task(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	MODBUS_MASTER_read_coils(&master, MODBUS_SLAVE_ADDR, 0, 5);
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2139      	movs	r1, #57	@ 0x39
 8000b52:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <repeative_task+0x14>)
 8000b54:	f000 f9d7 	bl	8000f06 <MODBUS_MASTER_read_coils>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000374 	.word	0x20000374

08000b60 <setup>:




bool setup(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	  oled_printl(&oled, "Please wait");
 8000b66:	495f      	ldr	r1, [pc, #380]	@ (8000ce4 <setup+0x184>)
 8000b68:	485f      	ldr	r0, [pc, #380]	@ (8000ce8 <setup+0x188>)
 8000b6a:	f000 fb3f 	bl	80011ec <oled_printl>
	  HAL_Delay(15000);
 8000b6e:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000b72:	f001 fb51 	bl	8002218 <HAL_Delay>
	  oled_printl(&oled, "sending AT..");
 8000b76:	495d      	ldr	r1, [pc, #372]	@ (8000cec <setup+0x18c>)
 8000b78:	485b      	ldr	r0, [pc, #364]	@ (8000ce8 <setup+0x188>)
 8000b7a:	f000 fb37 	bl	80011ec <oled_printl>
	  if(sim_test_at(&sim)){
 8000b7e:	485c      	ldr	r0, [pc, #368]	@ (8000cf0 <setup+0x190>)
 8000b80:	f000 fcd8 	bl	8001534 <sim_test_at>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <setup+0x3a>
		  oled_printl(&oled, "AT OK!");
 8000b8a:	495a      	ldr	r1, [pc, #360]	@ (8000cf4 <setup+0x194>)
 8000b8c:	4856      	ldr	r0, [pc, #344]	@ (8000ce8 <setup+0x188>)
 8000b8e:	f000 fb2d 	bl	80011ec <oled_printl>
	  }
	  while(sim.state < SIM_STATE_AT_OK){
 8000b92:	e002      	b.n	8000b9a <setup+0x3a>
		  sim_test_at(&sim);
 8000b94:	4856      	ldr	r0, [pc, #344]	@ (8000cf0 <setup+0x190>)
 8000b96:	f000 fccd 	bl	8001534 <sim_test_at>
	  while(sim.state < SIM_STATE_AT_OK){
 8000b9a:	4b55      	ldr	r3, [pc, #340]	@ (8000cf0 <setup+0x190>)
 8000b9c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dbf7      	blt.n	8000b94 <setup+0x34>
	  }
	  if(sim_report_error_enable(&sim)){
 8000ba4:	4852      	ldr	r0, [pc, #328]	@ (8000cf0 <setup+0x190>)
 8000ba6:	f000 fd19 	bl	80015dc <sim_report_error_enable>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <setup+0x58>
		  oled_printl(&oled, "+CMEE=2");
 8000bb0:	4951      	ldr	r1, [pc, #324]	@ (8000cf8 <setup+0x198>)
 8000bb2:	484d      	ldr	r0, [pc, #308]	@ (8000ce8 <setup+0x188>)
 8000bb4:	f000 fb1a 	bl	80011ec <oled_printl>
	  }
	  while(sim.state < SIM_STATE_REPORT_ERROR_ENABLED){}
 8000bb8:	bf00      	nop
 8000bba:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <setup+0x190>)
 8000bbc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	ddfa      	ble.n	8000bba <setup+0x5a>
	  if(sim_is_ready(&sim)){
 8000bc4:	484a      	ldr	r0, [pc, #296]	@ (8000cf0 <setup+0x190>)
 8000bc6:	f000 fd2f 	bl	8001628 <sim_is_ready>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <setup+0x78>
		  oled_printl(&oled, "ready");
 8000bd0:	494a      	ldr	r1, [pc, #296]	@ (8000cfc <setup+0x19c>)
 8000bd2:	4845      	ldr	r0, [pc, #276]	@ (8000ce8 <setup+0x188>)
 8000bd4:	f000 fb0a 	bl	80011ec <oled_printl>
	  }
	  while(sim.state < SIM_STATE_PIN_READY){}
 8000bd8:	bf00      	nop
 8000bda:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <setup+0x190>)
 8000bdc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	ddfa      	ble.n	8000bda <setup+0x7a>
	  if(sim_registered(&sim)){
 8000be4:	4842      	ldr	r0, [pc, #264]	@ (8000cf0 <setup+0x190>)
 8000be6:	f000 fd6f 	bl	80016c8 <sim_registered>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <setup+0x98>
		  oled_printl(&oled, "registered");
 8000bf0:	4943      	ldr	r1, [pc, #268]	@ (8000d00 <setup+0x1a0>)
 8000bf2:	483d      	ldr	r0, [pc, #244]	@ (8000ce8 <setup+0x188>)
 8000bf4:	f000 fafa 	bl	80011ec <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CREG_OK){}
 8000bf8:	bf00      	nop
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <setup+0x190>)
 8000bfc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	ddfa      	ble.n	8000bfa <setup+0x9a>
	  if(sim_gprs_registered(&sim)){
 8000c04:	483a      	ldr	r0, [pc, #232]	@ (8000cf0 <setup+0x190>)
 8000c06:	f000 fd8d 	bl	8001724 <sim_gprs_registered>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <setup+0xb8>
		  oled_printl(&oled, "gprs registered");
 8000c10:	493c      	ldr	r1, [pc, #240]	@ (8000d04 <setup+0x1a4>)
 8000c12:	4835      	ldr	r0, [pc, #212]	@ (8000ce8 <setup+0x188>)
 8000c14:	f000 faea 	bl	80011ec <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CGREG_OK){}
 8000c18:	bf00      	nop
 8000c1a:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <setup+0x190>)
 8000c1c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	ddfa      	ble.n	8000c1a <setup+0xba>
	  // gprs disconnect
	  if(!sim_gprs_disconnect(&sim)){
 8000c24:	4832      	ldr	r0, [pc, #200]	@ (8000cf0 <setup+0x190>)
 8000c26:	f000 fde5 	bl	80017f4 <sim_gprs_disconnect>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <setup+0xde>
		  oled_printl(&oled, "gprs disconnected already!");
 8000c36:	4934      	ldr	r1, [pc, #208]	@ (8000d08 <setup+0x1a8>)
 8000c38:	482b      	ldr	r0, [pc, #172]	@ (8000ce8 <setup+0x188>)
 8000c3a:	f000 fad7 	bl	80011ec <oled_printl>
	  }
	  //mqtt disconnect
	  if(!mqtt_disconnect(&mqtt_conn)){
 8000c3e:	4833      	ldr	r0, [pc, #204]	@ (8000d0c <setup+0x1ac>)
 8000c40:	f000 fa0a 	bl	8001058 <mqtt_disconnect>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f083 0301 	eor.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <setup+0xf8>
	  	  oled_printl(&oled, "broker disconnect error!");
 8000c50:	492f      	ldr	r1, [pc, #188]	@ (8000d10 <setup+0x1b0>)
 8000c52:	4825      	ldr	r0, [pc, #148]	@ (8000ce8 <setup+0x188>)
 8000c54:	f000 faca 	bl	80011ec <oled_printl>
	   }

	  HAL_Delay(5000);
 8000c58:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c5c:	f001 fadc 	bl	8002218 <HAL_Delay>
	  if(sim_gprs_connect(&sim)){
 8000c60:	4823      	ldr	r0, [pc, #140]	@ (8000cf0 <setup+0x190>)
 8000c62:	f000 fd8d 	bl	8001780 <sim_gprs_connect>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d030      	beq.n	8000cce <setup+0x16e>
	//	  sim_event_listen_once(&sim);
		  uint8_t i = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
		  oled_printl(&oled, "activatin app network");
 8000c70:	4928      	ldr	r1, [pc, #160]	@ (8000d14 <setup+0x1b4>)
 8000c72:	481d      	ldr	r0, [pc, #116]	@ (8000ce8 <setup+0x188>)
 8000c74:	f000 faba 	bl	80011ec <oled_printl>
		  while(!(sim.app_network)){
 8000c78:	e012      	b.n	8000ca0 <setup+0x140>
			  i++;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
			  HAL_Delay(5000);
 8000c80:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c84:	f001 fac8 	bl	8002218 <HAL_Delay>
			  oled_printl(&oled, "retrying app net");
 8000c88:	4923      	ldr	r1, [pc, #140]	@ (8000d18 <setup+0x1b8>)
 8000c8a:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <setup+0x188>)
 8000c8c:	f000 faae 	bl	80011ec <oled_printl>
			  sim_gprs_connect(&sim);
 8000c90:	4817      	ldr	r0, [pc, #92]	@ (8000cf0 <setup+0x190>)
 8000c92:	f000 fd75 	bl	8001780 <sim_gprs_connect>

			  if(i>3){
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d901      	bls.n	8000ca0 <setup+0x140>
				  return false;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e01d      	b.n	8000cdc <setup+0x17c>
		  while(!(sim.app_network)){
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <setup+0x190>)
 8000ca2:	7c5b      	ldrb	r3, [r3, #17]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1e5      	bne.n	8000c7a <setup+0x11a>
			  }
		  }
	//	  HAL_UART_AbortReceive_IT(sim.huart);

		  oled_printl(&oled, "Connecting to broker");
 8000cae:	491b      	ldr	r1, [pc, #108]	@ (8000d1c <setup+0x1bc>)
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <setup+0x188>)
 8000cb2:	f000 fa9b 	bl	80011ec <oled_printl>
		  if(mqtt_connect(&mqtt_conn)){
 8000cb6:	4815      	ldr	r0, [pc, #84]	@ (8000d0c <setup+0x1ac>)
 8000cb8:	f000 f968 	bl	8000f8c <mqtt_connect>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <setup+0x17a>
			  oled_printl(&oled, "Connected to broker");
 8000cc2:	4917      	ldr	r1, [pc, #92]	@ (8000d20 <setup+0x1c0>)
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <setup+0x188>)
 8000cc6:	f000 fa91 	bl	80011ec <oled_printl>
			  return true;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e006      	b.n	8000cdc <setup+0x17c>
		  }
	  }
	  else{
	  	  oled_printl(&oled, "app network FAILED");
 8000cce:	4915      	ldr	r1, [pc, #84]	@ (8000d24 <setup+0x1c4>)
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <setup+0x188>)
 8000cd2:	f000 fa8b 	bl	80011ec <oled_printl>
	  	  return false;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <setup+0x17c>
	  }
	  return false;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08007114 	.word	0x08007114
 8000ce8:	2000034c 	.word	0x2000034c
 8000cec:	08007120 	.word	0x08007120
 8000cf0:	20000338 	.word	0x20000338
 8000cf4:	08007130 	.word	0x08007130
 8000cf8:	08007138 	.word	0x08007138
 8000cfc:	08007140 	.word	0x08007140
 8000d00:	08007148 	.word	0x08007148
 8000d04:	08007154 	.word	0x08007154
 8000d08:	08007164 	.word	0x08007164
 8000d0c:	20000354 	.word	0x20000354
 8000d10:	08007180 	.word	0x08007180
 8000d14:	0800719c 	.word	0x0800719c
 8000d18:	080071b4 	.word	0x080071b4
 8000d1c:	080071c8 	.word	0x080071c8
 8000d20:	080071e0 	.word	0x080071e0
 8000d24:	080071f4 	.word	0x080071f4

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <MODBUS_MASTER_init>:
void MODBUS_MASTER_init(
		MODBUS_MASTER_InitTypeDef *master,
		UART_HandleTypeDef *huart,
		uint8_t *pchTxBuffer,
		uint8_t *pchRxBuffer)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
	master->huart = huart;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	601a      	str	r2, [r3, #0]
	master->pchRxBuffer = pchRxBuffer;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	609a      	str	r2, [r3, #8]
	master->pchTxBuffer = pchTxBuffer;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	605a      	str	r2, [r3, #4]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <MODBUS_MASTER_request>:


void MODBUS_MASTER_request(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint8_t function_code, uint16_t register_addr, uint16_t number_of_points){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4603      	mov	r3, r0
 8000d82:	70fb      	strb	r3, [r7, #3]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70bb      	strb	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	803b      	strh	r3, [r7, #0]
	uint16_t rx_size = number_of_points * 2 + 5;
 8000d8c:	8b3b      	ldrh	r3, [r7, #24]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3305      	adds	r3, #5
 8000d94:	81fb      	strh	r3, [r7, #14]


	pMaster->pchTxBuffer[0] = slave_addr;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	78fa      	ldrb	r2, [r7, #3]
 8000d9c:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[1] = function_code;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	78ba      	ldrb	r2, [r7, #2]
 8000da6:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[2] = register_addr>>8;
 8000da8:	883b      	ldrh	r3, [r7, #0]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	3302      	adds	r3, #2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[3] = register_addr;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	883a      	ldrh	r2, [r7, #0]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[4] = number_of_points>>8;
 8000dc4:	8b3b      	ldrh	r3, [r7, #24]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[5] = number_of_points;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	3305      	adds	r3, #5
 8000dda:	8b3a      	ldrh	r2, [r7, #24]
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]
	uint16_t crc = CRC16(pMaster->pchTxBuffer, 6);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2106      	movs	r1, #6
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc2a 	bl	8000640 <CRC16>
 8000dec:	4603      	mov	r3, r0
 8000dee:	81bb      	strh	r3, [r7, #12]
	pMaster->pchTxBuffer[6] = crc&0xff;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	3306      	adds	r3, #6
 8000df6:	89ba      	ldrh	r2, [r7, #12]
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[7] = (crc>>8)&0xff;
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	3307      	adds	r3, #7
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]


	HAL_UART_Transmit_IT(pMaster->huart, pMaster->pchTxBuffer, TX_SIZE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2208      	movs	r2, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	f004 fd05 	bl	8005826 <HAL_UART_Transmit_IT>
	HAL_UARTEx_ReceiveToIdle_IT(pMaster->huart, pMaster->pchRxBuffer, rx_size);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	89fa      	ldrh	r2, [r7, #14]
 8000e26:	4619      	mov	r1, r3
 8000e28:	f004 fe06 	bl	8005a38 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MODBUS_MASTER_response_handler>:
		MODBUS_MASTER_InitTypeDef *pMaster,
		uint8_t slave_addr,
		MODBUS_MASTER_res *pNormalRes,
		MODBUS_MASTER_exception *pException
		)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	460b      	mov	r3, r1
 8000e42:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_size = strlen(pMaster->pchRxBuffer);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff f97f 	bl	800014c <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	75fb      	strb	r3, [r7, #23]
	if(pMaster->pchRxBuffer[0] == slave_addr){
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	7afa      	ldrb	r2, [r7, #11]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d14e      	bne.n	8000efc <MODBUS_MASTER_response_handler+0xc8>

		if(pMaster->pchRxBuffer[1] >= 0x80){
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	3301      	adds	r3, #1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da22      	bge.n	8000eb2 <MODBUS_MASTER_response_handler+0x7e>
			// Exception
			pNormalRes = NULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
			pException->slave_addr = pMaster->pchRxBuffer[0];
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	701a      	strb	r2, [r3, #0]
			pException->function_code = pMaster->pchRxBuffer[1];
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	785a      	ldrb	r2, [r3, #1]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	705a      	strb	r2, [r3, #1]
			pException->exception_code = pMaster->pchRxBuffer[2];
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	789a      	ldrb	r2, [r3, #2]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	709a      	strb	r2, [r3, #2]
			pException->crc = (pMaster->pchRxBuffer[3] >> 8) | (pMaster->pchRxBuffer[4]);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	3303      	adds	r3, #3
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	121b      	asrs	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	809a      	strh	r2, [r3, #4]

			return MODBUS_RES_EXCEPTION;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e025      	b.n	8000efe <MODBUS_MASTER_response_handler+0xca>
		}

		else{
			pException = NULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
			pNormalRes->slave_addr = pMaster->pchRxBuffer[0];
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	701a      	strb	r2, [r3, #0]
			pNormalRes->function_code = pMaster->pchRxBuffer[1];
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	785a      	ldrb	r2, [r3, #1]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	705a      	strb	r2, [r3, #1]
			pNormalRes->byte_count = pMaster->pchRxBuffer[2];
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	789a      	ldrb	r2, [r3, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	709a      	strb	r2, [r3, #2]
			pNormalRes->register_data = pMaster->pchRxBuffer+3;	// Last 2 bytes are CRC
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	1cda      	adds	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
			pNormalRes->crc = pMaster->pchRxBuffer + 3 + pNormalRes->byte_count;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	3303      	adds	r3, #3
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	811a      	strh	r2, [r3, #8]

			//clear crc from response
			strcpy(pNormalRes->crc, "");
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	891b      	ldrh	r3, [r3, #8]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]

			return MODBUS_RES_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e000      	b.n	8000efe <MODBUS_MASTER_response_handler+0xca>
		}
	}
	else{
		return MODBUS_RES_UNKNOWN;
 8000efc:	2302      	movs	r3, #2
	}
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <MODBUS_MASTER_read_coils>:



void MODBUS_MASTER_read_coils(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint16_t register_addr, uint16_t number_of_points){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	72fb      	strb	r3, [r7, #11]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	813b      	strh	r3, [r7, #8]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	80fb      	strh	r3, [r7, #6]
	MODBUS_MASTER_request(pMaster, slave_addr, 1, register_addr, number_of_points);
 8000f20:	893a      	ldrh	r2, [r7, #8]
 8000f22:	7af9      	ldrb	r1, [r7, #11]
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff ff20 	bl	8000d72 <MODBUS_MASTER_request>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <mqtt_init>:
	char* url,
	char* port,
	char* username,
	char* password,
	char* keep_time)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
	pMqttConn->sim = pSim;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	601a      	str	r2, [r3, #0]
	pMqttConn->client_id = client_id;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
	pMqttConn->url = url;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	609a      	str	r2, [r3, #8]
	pMqttConn->port = port;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	60da      	str	r2, [r3, #12]
	pMqttConn->username = username;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	611a      	str	r2, [r3, #16]
	pMqttConn->password = password;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a3a      	ldr	r2, [r7, #32]
 8000f6c:	615a      	str	r2, [r3, #20]
	pMqttConn->keep_time = keep_time;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f72:	619a      	str	r2, [r3, #24]
	pMqttConn->connected = false;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	771a      	strb	r2, [r3, #28]
	flush_buff(mqtt_rx_buff);
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <mqtt_init+0x4c>)
 8000f7c:	f7ff f916 	bl	80001ac <flush_buff>


}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200003ec 	.word	0x200003ec

08000f8c <mqtt_connect>:



bool mqtt_connect(mqtt_conn_t* pMqttConn){
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af06      	add	r7, sp, #24
 8000f92:	6078      	str	r0, [r7, #4]
	if(pMqttConn->sim->app_network){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	7c5b      	ldrb	r3, [r3, #17]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d045      	beq.n	800102a <mqtt_connect+0x9e>
		if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 5, "\"URL\",\"", pMqttConn->url, "\",\"", pMqttConn->port, "\"")){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <mqtt_connect+0xb0>)
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68d2      	ldr	r2, [r2, #12]
 8000fb0:	4c23      	ldr	r4, [pc, #140]	@ (8001040 <mqtt_connect+0xb4>)
 8000fb2:	9405      	str	r4, [sp, #20]
 8000fb4:	9204      	str	r2, [sp, #16]
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <mqtt_connect+0xb8>)
 8000fb8:	9203      	str	r2, [sp, #12]
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <mqtt_connect+0xbc>)
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	4920      	ldr	r1, [pc, #128]	@ (800104c <mqtt_connect+0xc0>)
 8000fcc:	f7ff f948 	bl	8000260 <at_write>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d02c      	beq.n	8001030 <mqtt_connect+0xa4>
			if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 2, "\"KEEPTIME\",", pMqttConn->keep_time)){
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <mqtt_connect+0xb0>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <mqtt_connect+0xc4>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	2302      	movs	r3, #2
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ff2:	4916      	ldr	r1, [pc, #88]	@ (800104c <mqtt_connect+0xc0>)
 8000ff4:	f7ff f934 	bl	8000260 <at_write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d018      	beq.n	8001030 <mqtt_connect+0xa4>

				HAL_Delay(2000);
 8000ffe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001002:	f001 f909 	bl	8002218 <HAL_Delay>
				if(at_execute_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smconn, 20000)>0){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <mqtt_connect+0xc8>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001014:	490d      	ldr	r1, [pc, #52]	@ (800104c <mqtt_connect+0xc0>)
 8001016:	f7ff fab7 	bl	8000588 <at_execute_blocking>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <mqtt_connect+0xa4>
					pMqttConn->connected = true;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	771a      	strb	r2, [r3, #28]
					return true;
 8001026:	2301      	movs	r3, #1
 8001028:	e003      	b.n	8001032 <mqtt_connect+0xa6>
				}
			}
		}
	}
	else{
		pMqttConn->connected = false;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	771a      	strb	r2, [r3, #28]
	}
	return false;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	20000210 	.word	0x20000210
 8001040:	08007230 	.word	0x08007230
 8001044:	08007234 	.word	0x08007234
 8001048:	08007238 	.word	0x08007238
 800104c:	200003ec 	.word	0x200003ec
 8001050:	08007240 	.word	0x08007240
 8001054:	20000214 	.word	0x20000214

08001058 <mqtt_disconnect>:




bool mqtt_disconnect(mqtt_conn_t* pMqttConn){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(at_execute(pMqttConn->sim->huart, mqtt_rx_buff, smdisc, 5000)){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <mqtt_disconnect+0x38>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800106e:	4909      	ldr	r1, [pc, #36]	@ (8001094 <mqtt_disconnect+0x3c>)
 8001070:	f7ff f96c 	bl	800034c <at_execute>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <mqtt_disconnect+0x2c>
		pMqttConn->connected = false;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
		return true;
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <mqtt_disconnect+0x2e>
	}
	return false;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000021c 	.word	0x2000021c
 8001094:	200003ec 	.word	0x200003ec

08001098 <mqtt_publish_string>:





bool mqtt_publish_string(mqtt_conn_t* pMqttConn, char* qos, char* retain, char* topic, char* payload){
 8001098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800109c:	b095      	sub	sp, #84	@ 0x54
 800109e:	af0a      	add	r7, sp, #40	@ 0x28
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
	if(pMqttConn->connected){
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	7f1b      	ldrb	r3, [r3, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8084 	beq.w	80011ba <mqtt_publish_string+0x122>
		uint8_t content_length = strlen(payload);
 80010b2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80010b4:	f7ff f84a 	bl	800014c <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		char content_len[5];
		sprintf(content_len, "%d", content_length);
 80010be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4940      	ldr	r1, [pc, #256]	@ (80011c8 <mqtt_publish_string+0x130>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fabf 	bl	800664c <siprintf>
		if(pMqttConn->connected){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7f1b      	ldrb	r3, [r3, #28]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d071      	beq.n	80011ba <mqtt_publish_string+0x122>
			if(at_write_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smpub, MQTT_AT_MIN_TIMEOUT, 8, "\"", topic, "\",\"",
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <mqtt_publish_string+0x134>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	9308      	str	r3, [sp, #32]
 80010e4:	4b3a      	ldr	r3, [pc, #232]	@ (80011d0 <mqtt_publish_string+0x138>)
 80010e6:	9307      	str	r3, [sp, #28]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	9306      	str	r3, [sp, #24]
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <mqtt_publish_string+0x13c>)
 80010ee:	9305      	str	r3, [sp, #20]
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	9304      	str	r3, [sp, #16]
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <mqtt_publish_string+0x140>)
 80010f8:	9303      	str	r3, [sp, #12]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <mqtt_publish_string+0x144>)
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	2308      	movs	r3, #8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800110a:	4935      	ldr	r1, [pc, #212]	@ (80011e0 <mqtt_publish_string+0x148>)
 800110c:	f7ff f9c0 	bl	8000490 <at_write_blocking>
 8001110:	4603      	mov	r3, r0
 8001112:	2b02      	cmp	r3, #2
 8001114:	d151      	bne.n	80011ba <mqtt_publish_string+0x122>
					content_len, "\",", qos, ",", retain) == AT_STATE_ENTER_INPUT){
 8001116:	466b      	mov	r3, sp
 8001118:	461e      	mov	r6, r3
				char msg[content_length+5];
 800111a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800111e:	1d59      	adds	r1, r3, #5
 8001120:	1e4b      	subs	r3, r1, #1
 8001122:	623b      	str	r3, [r7, #32]
 8001124:	460a      	mov	r2, r1
 8001126:	2300      	movs	r3, #0
 8001128:	4690      	mov	r8, r2
 800112a:	4699      	mov	r9, r3
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001138:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800113c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001140:	460a      	mov	r2, r1
 8001142:	2300      	movs	r3, #0
 8001144:	4614      	mov	r4, r2
 8001146:	461d      	mov	r5, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	00eb      	lsls	r3, r5, #3
 8001152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001156:	00e2      	lsls	r2, r4, #3
 8001158:	460b      	mov	r3, r1
 800115a:	3307      	adds	r3, #7
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	ebad 0d03 	sub.w	sp, sp, r3
 8001164:	ab0a      	add	r3, sp, #40	@ 0x28
 8001166:	3300      	adds	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
//				sprintf(msg, "%s\x1A\r\n", payload);
				sprintf(msg, "%s", payload);
 800116a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800116c:	491d      	ldr	r1, [pc, #116]	@ (80011e4 <mqtt_publish_string+0x14c>)
 800116e:	69f8      	ldr	r0, [r7, #28]
 8001170:	f005 fa6c 	bl	800664c <siprintf>
				HAL_UART_Transmit(pMqttConn->sim->huart, msg , strlen(msg), MQTT_AT_MIN_TIMEOUT);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681c      	ldr	r4, [r3, #0]
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f7fe ffe6 	bl	800014c <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001188:	69f9      	ldr	r1, [r7, #28]
 800118a:	4620      	mov	r0, r4
 800118c:	f004 fa36 	bl	80055fc <HAL_UART_Transmit>
				sprintf(msg, "%c", (char) 26);
 8001190:	221a      	movs	r2, #26
 8001192:	4915      	ldr	r1, [pc, #84]	@ (80011e8 <mqtt_publish_string+0x150>)
 8001194:	69f8      	ldr	r0, [r7, #28]
 8001196:	f005 fa59 	bl	800664c <siprintf>
				HAL_UART_Transmit_IT(pMqttConn->sim->huart, msg , strlen(msg));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f7fe ffd3 	bl	800014c <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	69f9      	ldr	r1, [r7, #28]
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 fb39 	bl	8005826 <HAL_UART_Transmit_IT>
				return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	46b5      	mov	sp, r6
 80011b8:	e000      	b.n	80011bc <mqtt_publish_string+0x124>
			}
		}
	}
	return false;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	372c      	adds	r7, #44	@ 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011c6:	bf00      	nop
 80011c8:	0800724c 	.word	0x0800724c
 80011cc:	20000218 	.word	0x20000218
 80011d0:	08007250 	.word	0x08007250
 80011d4:	08007254 	.word	0x08007254
 80011d8:	08007234 	.word	0x08007234
 80011dc:	08007230 	.word	0x08007230
 80011e0:	200003ec 	.word	0x200003ec
 80011e4:	08007258 	.word	0x08007258
 80011e8:	0800725c 	.word	0x0800725c

080011ec <oled_printl>:
	ssd1306_UpdateScreen(pOled->pHi2c);
}



void oled_printl(oled_t *pOled, const char* str){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(pOled->current_line < 6){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d81d      	bhi.n	800123a <oled_printl+0x4e>
		uint8_t y = pOled->current_line * 10;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	461a      	mov	r2, r3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(0, y);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	4619      	mov	r1, r3
 8001210:	2000      	movs	r0, #0
 8001212:	f000 fdaf 	bl	8001d74 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8001216:	4a15      	ldr	r2, [pc, #84]	@ (800126c <oled_printl+0x80>)
 8001218:	2301      	movs	r3, #1
 800121a:	ca06      	ldmia	r2, {r1, r2}
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f000 fd83 	bl	8001d28 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fc6c 	bl	8001b04 <ssd1306_UpdateScreen>
		pOled->current_line++;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	711a      	strb	r2, [r3, #4]
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString(str, Font_7x10, White);
		ssd1306_UpdateScreen(pOled->pHi2c);
		pOled->current_line = 1;
	}
}
 8001238:	e014      	b.n	8001264 <oled_printl+0x78>
		ssd1306_Fill(Black);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 fc40 	bl	8001ac0 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f000 fd96 	bl	8001d74 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <oled_printl+0x80>)
 800124a:	2301      	movs	r3, #1
 800124c:	ca06      	ldmia	r2, {r1, r2}
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f000 fd6a 	bl	8001d28 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc53 	bl	8001b04 <ssd1306_UpdateScreen>
		pOled->current_line = 1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	711a      	strb	r2, [r3, #4]
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000200 	.word	0x20000200

08001270 <oled_init>:


void oled_init(oled_t *pOled, I2C_HandleTypeDef *pHi2c){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	 ssd1306_Init(pHi2c);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f000 fb00 	bl	8001880 <ssd1306_Init>
	 ssd1306_Fill(Black);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 fc1d 	bl	8001ac0 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8001286:	2100      	movs	r1, #0
 8001288:	2000      	movs	r0, #0
 800128a:	f000 fd73 	bl	8001d74 <ssd1306_SetCursor>
	 ssd1306_WriteString("Loading...", Font_7x10, White);
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <oled_init+0x44>)
 8001290:	2301      	movs	r3, #1
 8001292:	ca06      	ldmia	r2, {r1, r2}
 8001294:	4808      	ldr	r0, [pc, #32]	@ (80012b8 <oled_init+0x48>)
 8001296:	f000 fd47 	bl	8001d28 <ssd1306_WriteString>
	 ssd1306_UpdateScreen(pOled->pHi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fc30 	bl	8001b04 <ssd1306_UpdateScreen>
	 pOled->pHi2c = pHi2c;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000200 	.word	0x20000200
 80012b8:	0800727c 	.word	0x0800727c

080012bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2100      	movs	r1, #0
 80012c8:	460a      	mov	r2, r1
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	460a      	mov	r2, r1
 80012ce:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_RTC_Init+0xac>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <MX_RTC_Init+0xb0>)
 80012e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_RTC_Init+0xac>)
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_RTC_Init+0xac>)
 80012ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f2:	481d      	ldr	r0, [pc, #116]	@ (8001368 <MX_RTC_Init+0xac>)
 80012f4:	f003 f906 	bl	8004504 <HAL_RTC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80012fe:	f7ff fd13 	bl	8000d28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001302:	2300      	movs	r3, #0
 8001304:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001306:	2300      	movs	r3, #0
 8001308:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800130a:	2300      	movs	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	4814      	ldr	r0, [pc, #80]	@ (8001368 <MX_RTC_Init+0xac>)
 8001318:	f003 f9b4 	bl	8004684 <HAL_RTC_SetTime>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001322:	f7ff fd01 	bl	8000d28 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001326:	2301      	movs	r3, #1
 8001328:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800132a:	2301      	movs	r3, #1
 800132c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800132e:	2301      	movs	r3, #1
 8001330:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001332:	2300      	movs	r3, #0
 8001334:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	@ (8001368 <MX_RTC_Init+0xac>)
 8001340:	f003 fb6c 	bl	8004a1c <HAL_RTC_SetDate>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800134a:	f7ff fced 	bl	8000d28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800134e:	2300      	movs	r3, #0
 8001350:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001352:	2300      	movs	r3, #0
 8001354:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001356:	2300      	movs	r3, #0
 8001358:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
//  }
//  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000450 	.word	0x20000450
 800136c:	40002800 	.word	0x40002800

08001370 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <HAL_RTC_MspInit+0x5c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d120      	bne.n	80013c4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001382:	f002 f93b 	bl	80035fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_RTC_MspInit+0x60>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_RTC_MspInit+0x60>)
 800138c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_RTC_MspInit+0x60>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_RTC_MspInit+0x64>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2003      	movs	r0, #3
 80013aa:	f001 f845 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f001 f86e 	bl	8002490 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2029      	movs	r0, #41	@ 0x29
 80013ba:	f001 f83d 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013be:	2029      	movs	r0, #41	@ 0x29
 80013c0:	f001 f866 	bl	8002490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40002800 	.word	0x40002800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	4242043c 	.word	0x4242043c

080013d8 <rtc_set_alarm_seconds_it>:

#include "rtc_delay.h"



void rtc_set_alarm_seconds_it(RTC_HandleTypeDef* hrtc, uint16_t seconds){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
	RTC_AlarmTypeDef sAlarm;

	    // Get the current time
	    RTC_TimeTypeDef sTime;
	    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f003 fa2f 	bl	8004850 <HAL_RTC_GetTime>

	    // Calculate alarm time (current time + period)
	    sAlarm.AlarmTime.Seconds = sTime.Seconds + seconds;
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	74bb      	strb	r3, [r7, #18]
	    sAlarm.AlarmTime.Minutes = sTime.Minutes;
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	747b      	strb	r3, [r7, #17]
	    sAlarm.AlarmTime.Hours = sTime.Hours;
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	743b      	strb	r3, [r7, #16]

	    // Normalize alarm time
	    if (sAlarm.AlarmTime.Seconds >= 60) {
 8001406:	7cbb      	ldrb	r3, [r7, #18]
 8001408:	2b3b      	cmp	r3, #59	@ 0x3b
 800140a:	d907      	bls.n	800141c <rtc_set_alarm_seconds_it+0x44>
	        sAlarm.AlarmTime.Seconds -= 60;
 800140c:	7cbb      	ldrb	r3, [r7, #18]
 800140e:	3b3c      	subs	r3, #60	@ 0x3c
 8001410:	b2db      	uxtb	r3, r3
 8001412:	74bb      	strb	r3, [r7, #18]
	        sAlarm.AlarmTime.Minutes++;
 8001414:	7c7b      	ldrb	r3, [r7, #17]
 8001416:	3301      	adds	r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	747b      	strb	r3, [r7, #17]
	    }
	    if (sAlarm.AlarmTime.Minutes >= 60) {
 800141c:	7c7b      	ldrb	r3, [r7, #17]
 800141e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001420:	d907      	bls.n	8001432 <rtc_set_alarm_seconds_it+0x5a>
	        sAlarm.AlarmTime.Minutes -= 60;
 8001422:	7c7b      	ldrb	r3, [r7, #17]
 8001424:	3b3c      	subs	r3, #60	@ 0x3c
 8001426:	b2db      	uxtb	r3, r3
 8001428:	747b      	strb	r3, [r7, #17]
	        sAlarm.AlarmTime.Hours++;
 800142a:	7c3b      	ldrb	r3, [r7, #16]
 800142c:	3301      	adds	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	743b      	strb	r3, [r7, #16]
	    }
	    if (sAlarm.AlarmTime.Hours >= 24) {
 8001432:	7c3b      	ldrb	r3, [r7, #16]
 8001434:	2b17      	cmp	r3, #23
 8001436:	d903      	bls.n	8001440 <rtc_set_alarm_seconds_it+0x68>
	        sAlarm.AlarmTime.Hours -= 24;
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	3b18      	subs	r3, #24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	743b      	strb	r3, [r7, #16]
	    }

	    sAlarm.Alarm = RTC_ALARM_A;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

	    if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f003 fc03 	bl	8004c58 <HAL_RTC_SetAlarm_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <rtc_set_alarm_seconds_it+0x84>
	        Error_Handler();
 8001458:	f7ff fc66 	bl	8000d28 <Error_Handler>
	    }

}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_sim_finish_operation>:
char sim_event_buff[SIM_EVENT_BUFF_SIZE];
uint16_t sim_event_rx_len;



bool _sim_finish_operation(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	flush_buff(sim_rx_buff);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <_sim_finish_operation+0x10>)
 800146a:	f7fe fe9f 	bl	80001ac <flush_buff>
	return true;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000464 	.word	0x20000464

08001478 <sim_init>:


void sim_init(sim_t* psim, UART_HandleTypeDef* huart, char* apn, char* username, char* password){
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	psim->huart = huart;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	601a      	str	r2, [r3, #0]
	psim->apn = apn;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]
	psim->username = username;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	609a      	str	r2, [r3, #8]
	psim->password = password;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	60da      	str	r2, [r3, #12]
	psim->app_network = false;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	745a      	strb	r2, [r3, #17]


}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <sim_event_poll_once>:
}




void sim_event_poll_once(sim_t* psim, uint32_t timeout){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
//	HAL_UARTEx_ReceiveToIdle(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, &sim_event_rx_len, timeout);
	HAL_UART_Receive(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, timeout);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2232      	movs	r2, #50	@ 0x32
 80014c2:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <sim_event_poll_once+0x20>)
 80014c4:	f004 f91d 	bl	8005702 <HAL_UART_Receive>

}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000498 	.word	0x20000498

080014d4 <sim_event_handler>:




void sim_event_handler(sim_t* psim, char* event_buff){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

	if(strlen(event_buff) > 0){
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01b      	beq.n	800151e <sim_event_handler+0x4a>
		if(find_substr(event_buff, "+APP")){
 80014e6:	4910      	ldr	r1, [pc, #64]	@ (8001528 <sim_event_handler+0x54>)
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f7fe fe4b 	bl	8000184 <find_substr>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d014      	beq.n	800151e <sim_event_handler+0x4a>
			if(find_substr(event_buff, "ACTIVE")){
 80014f4:	490d      	ldr	r1, [pc, #52]	@ (800152c <sim_event_handler+0x58>)
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f7fe fe44 	bl	8000184 <find_substr>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <sim_event_handler+0x36>
				psim->app_network = true;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	745a      	strb	r2, [r3, #17]
			else if(find_substr(event_buff, "DEACTIVE")){
				psim->app_network = false;
			}
		}
	}
}
 8001508:	e009      	b.n	800151e <sim_event_handler+0x4a>
			else if(find_substr(event_buff, "DEACTIVE")){
 800150a:	4909      	ldr	r1, [pc, #36]	@ (8001530 <sim_event_handler+0x5c>)
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f7fe fe39 	bl	8000184 <find_substr>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <sim_event_handler+0x4a>
				psim->app_network = false;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	745a      	strb	r2, [r3, #17]
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	080072ec 	.word	0x080072ec
 800152c:	080072f4 	.word	0x080072f4
 8001530:	080072fc 	.word	0x080072fc

08001534 <sim_test_at>:





bool sim_test_at(sim_t* psim){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	if(at_execute(psim->huart, sim_rx_buff, "", SIM_AT_MIN_TIMEOUT)){
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <sim_test_at+0x3c>)
 8001546:	490b      	ldr	r1, [pc, #44]	@ (8001574 <sim_test_at+0x40>)
 8001548:	f7fe ff00 	bl	800034c <at_execute>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <sim_test_at+0x2c>
			psim->state = SIM_STATE_AT_OK;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	741a      	strb	r2, [r3, #16]
			return _sim_finish_operation();
 8001558:	f7ff ff84 	bl	8001464 <_sim_finish_operation>
 800155c:	4603      	mov	r3, r0
 800155e:	e003      	b.n	8001568 <sim_test_at+0x34>
	}
	else{
		psim->state = SIM_STATE_OFF;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	22ff      	movs	r2, #255	@ 0xff
 8001564:	741a      	strb	r2, [r3, #16]
	}
	return false;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08007308 	.word	0x08007308
 8001574:	20000464 	.word	0x20000464

08001578 <sim_reboot>:



bool sim_reboot(sim_t* psim){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
	sim_init(psim, psim->huart, psim->apn, psim->username, psim->password);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff6f 	bl	8001478 <sim_init>
	if(at_write_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT, 2, "1,", "1")){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <sim_reboot+0x54>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <sim_reboot+0x58>)
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <sim_reboot+0x5c>)
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	2302      	movs	r3, #2
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015b2:	4909      	ldr	r1, [pc, #36]	@ (80015d8 <sim_reboot+0x60>)
 80015b4:	f7fe ff6c 	bl	8000490 <at_write_blocking>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <sim_reboot+0x4a>
		return true;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <sim_reboot+0x4c>
	}
	return false;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000220 	.word	0x20000220
 80015d0:	0800730c 	.word	0x0800730c
 80015d4:	08007310 	.word	0x08007310
 80015d8:	20000464 	.word	0x20000464

080015dc <sim_report_error_enable>:



bool sim_report_error_enable(sim_t* psim){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
	if(at_write(psim->huart, sim_rx_buff, cmee, 5000, 1, "2")){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <sim_report_error_enable+0x40>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <sim_report_error_enable+0x44>)
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015f8:	490a      	ldr	r1, [pc, #40]	@ (8001624 <sim_report_error_enable+0x48>)
 80015fa:	f7fe fe31 	bl	8000260 <at_write>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <sim_report_error_enable+0x36>
		psim->state = SIM_STATE_REPORT_ERROR_ENABLED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	741a      	strb	r2, [r3, #16]
		return _sim_finish_operation();
 800160a:	f7ff ff2b 	bl	8001464 <_sim_finish_operation>
 800160e:	4603      	mov	r3, r0
 8001610:	e000      	b.n	8001614 <sim_report_error_enable+0x38>
	}
	return false;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000228 	.word	0x20000228
 8001620:	08007314 	.word	0x08007314
 8001624:	20000464 	.word	0x20000464

08001628 <sim_is_ready>:




bool sim_is_ready(sim_t* psim){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if(psim->state >= SIM_STATE_AT_OK){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db36      	blt.n	80016a8 <sim_is_ready+0x80>
		if(at_read_blocking(psim->huart, sim_rx_buff, cpin, SIM_AT_MIN_TIMEOUT)){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <sim_is_ready+0x8c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001646:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <sim_is_ready+0x90>)
 8001648:	f7fe fee0 	bl	800040c <at_read_blocking>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <sim_is_ready+0x3e>
			if(find_substr(sim_rx_buff, "READY")){
 8001652:	491a      	ldr	r1, [pc, #104]	@ (80016bc <sim_is_ready+0x94>)
 8001654:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <sim_is_ready+0x90>)
 8001656:	f7fe fd95 	bl	8000184 <find_substr>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <sim_is_ready+0x3e>
				psim->state = SIM_STATE_PIN_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	741a      	strb	r2, [r3, #16]
			}
			else{

			}
		}
		if(psim->state == SIM_STATE_PIN_READY){
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d119      	bne.n	80016a4 <sim_is_ready+0x7c>
			if(at_read_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT)){
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <sim_is_ready+0x98>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800167c:	490e      	ldr	r1, [pc, #56]	@ (80016b8 <sim_is_ready+0x90>)
 800167e:	f7fe fec5 	bl	800040c <at_read_blocking>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00d      	beq.n	80016a4 <sim_is_ready+0x7c>
				if(find_substr(sim_rx_buff, "+CFUN: 1")){
 8001688:	490e      	ldr	r1, [pc, #56]	@ (80016c4 <sim_is_ready+0x9c>)
 800168a:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <sim_is_ready+0x90>)
 800168c:	f7fe fd7a 	bl	8000184 <find_substr>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <sim_is_ready+0x7c>
					psim->state = SIM_STATE_FULL_FUNC;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	741a      	strb	r2, [r3, #16]
					return _sim_finish_operation();
 800169c:	f7ff fee2 	bl	8001464 <_sim_finish_operation>
 80016a0:	4603      	mov	r3, r0
 80016a2:	e002      	b.n	80016aa <sim_is_ready+0x82>
				else{

				}
			}
		}
		return false;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <sim_is_ready+0x82>
	}
	return false;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000224 	.word	0x20000224
 80016b8:	20000464 	.word	0x20000464
 80016bc:	08007318 	.word	0x08007318
 80016c0:	20000220 	.word	0x20000220
 80016c4:	08007320 	.word	0x08007320

080016c8 <sim_registered>:


bool sim_registered(sim_t* psim){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_FULL_FUNC){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d119      	bne.n	800170e <sim_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, creg, 5000)){
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <sim_registered+0x50>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <sim_registered+0x54>)
 80016e8:	f7fe fd74 	bl	80001d4 <at_read>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00d      	beq.n	800170e <sim_registered+0x46>
			if(find_substr(sim_rx_buff, "+CREG: 0,1")){
 80016f2:	490b      	ldr	r1, [pc, #44]	@ (8001720 <sim_registered+0x58>)
 80016f4:	4809      	ldr	r0, [pc, #36]	@ (800171c <sim_registered+0x54>)
 80016f6:	f7fe fd45 	bl	8000184 <find_substr>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <sim_registered+0x46>
				psim->state = SIM_STATE_CREG_OK;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001706:	f7ff fead 	bl	8001464 <_sim_finish_operation>
 800170a:	4603      	mov	r3, r0
 800170c:	e000      	b.n	8001710 <sim_registered+0x48>
			else{

			}
		}
	}
	return false;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000022c 	.word	0x2000022c
 800171c:	20000464 	.word	0x20000464
 8001720:	0800732c 	.word	0x0800732c

08001724 <sim_gprs_registered>:



bool sim_gprs_registered(sim_t* psim){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CREG_OK){
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d119      	bne.n	800176a <sim_gprs_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, cgreg, 5000)){
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <sim_gprs_registered+0x50>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <sim_gprs_registered+0x54>)
 8001744:	f7fe fd46 	bl	80001d4 <at_read>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <sim_gprs_registered+0x46>
			if(find_substr(sim_rx_buff, "+CGREG: 0,1")){
 800174e:	490b      	ldr	r1, [pc, #44]	@ (800177c <sim_gprs_registered+0x58>)
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <sim_gprs_registered+0x54>)
 8001752:	f7fe fd17 	bl	8000184 <find_substr>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <sim_gprs_registered+0x46>
				psim->state = SIM_STATE_CGREG_OK;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2205      	movs	r2, #5
 8001760:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001762:	f7ff fe7f 	bl	8001464 <_sim_finish_operation>
 8001766:	4603      	mov	r3, r0
 8001768:	e000      	b.n	800176c <sim_gprs_registered+0x48>

			}
		}
	}

	return false;
 800176a:	2300      	movs	r3, #0

}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000230 	.word	0x20000230
 8001778:	20000464 	.word	0x20000464
 800177c:	08007338 	.word	0x08007338

08001780 <sim_gprs_connect>:



bool sim_gprs_connect(sim_t* psim){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d11d      	bne.n	80017ce <sim_gprs_connect+0x4e>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 100, 2, "1,",SIM_APN_MTN) > 0){
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <sim_gprs_connect+0x60>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <sim_gprs_connect+0x64>)
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <sim_gprs_connect+0x68>)
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2302      	movs	r3, #2
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2364      	movs	r3, #100	@ 0x64
 80017a8:	4910      	ldr	r1, [pc, #64]	@ (80017ec <sim_gprs_connect+0x6c>)
 80017aa:	f7fe fe71 	bl	8000490 <at_write_blocking>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd0c      	ble.n	80017ce <sim_gprs_connect+0x4e>
//			sim_event_handler(psim);
			sim_event_poll_once(psim, 10000);
 80017b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe79 	bl	80014b0 <sim_event_poll_once>
			sim_event_handler(psim, sim_event_buff);
 80017be:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <sim_gprs_connect+0x70>)
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fe87 	bl	80014d4 <sim_event_handler>
			return _sim_finish_operation();
 80017c6:	f7ff fe4d 	bl	8001464 <_sim_finish_operation>
 80017ca:	4603      	mov	r3, r0
 80017cc:	e003      	b.n	80017d6 <sim_gprs_connect+0x56>
		}

	}
	flush_buff(sim_rx_buff);
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <sim_gprs_connect+0x6c>)
 80017d0:	f7fe fcec 	bl	80001ac <flush_buff>
	return false;
 80017d4:	2300      	movs	r3, #0

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000234 	.word	0x20000234
 80017e4:	08007344 	.word	0x08007344
 80017e8:	08007310 	.word	0x08007310
 80017ec:	20000464 	.word	0x20000464
 80017f0:	20000498 	.word	0x20000498

080017f4 <sim_gprs_disconnect>:



bool sim_gprs_disconnect(sim_t* psim){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d116      	bne.n	8001834 <sim_gprs_disconnect+0x40>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 5000, 1, "0") > 0){
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <sim_gprs_disconnect+0x50>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <sim_gprs_disconnect+0x54>)
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	2301      	movs	r3, #1
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800181a:	490c      	ldr	r1, [pc, #48]	@ (800184c <sim_gprs_disconnect+0x58>)
 800181c:	f7fe fe38 	bl	8000490 <at_write_blocking>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	dd06      	ble.n	8001834 <sim_gprs_disconnect+0x40>
			psim->app_network = false;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	745a      	strb	r2, [r3, #17]
//			sim_event_handler(psim);
//			sim_event_poll_once(psim, 60000);
//			sim_event_handler(psim);
			return _sim_finish_operation();
 800182c:	f7ff fe1a 	bl	8001464 <_sim_finish_operation>
 8001830:	4603      	mov	r3, r0
 8001832:	e003      	b.n	800183c <sim_gprs_disconnect+0x48>
		}

	}
	flush_buff(sim_rx_buff);
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <sim_gprs_disconnect+0x58>)
 8001836:	f7fe fcb9 	bl	80001ac <flush_buff>
	return false;
 800183a:	2300      	movs	r3, #0

}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000234 	.word	0x20000234
 8001848:	08007354 	.word	0x08007354
 800184c:	20000464 	.word	0x20000464

08001850 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af04      	add	r7, sp, #16
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800185c:	230a      	movs	r3, #10
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	2301      	movs	r3, #1
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	2200      	movs	r2, #0
 800186c:	2178      	movs	r1, #120	@ 0x78
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f001 fb50 	bl	8002f14 <HAL_I2C_Mem_Write>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001888:	2064      	movs	r0, #100	@ 0x64
 800188a:	f000 fcc5 	bl	8002218 <HAL_Delay>
    int status = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001892:	21ae      	movs	r1, #174	@ 0xae
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffdb 	bl	8001850 <ssd1306_WriteCommand>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80018a4:	2120      	movs	r1, #32
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffd2 	bl	8001850 <ssd1306_WriteCommand>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018b6:	2110      	movs	r1, #16
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffc9 	bl	8001850 <ssd1306_WriteCommand>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80018c8:	21b0      	movs	r1, #176	@ 0xb0
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffc0 	bl	8001850 <ssd1306_WriteCommand>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80018da:	21c8      	movs	r1, #200	@ 0xc8
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffb7 	bl	8001850 <ssd1306_WriteCommand>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80018ec:	2100      	movs	r1, #0
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffae 	bl	8001850 <ssd1306_WriteCommand>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80018fe:	2110      	movs	r1, #16
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffa5 	bl	8001850 <ssd1306_WriteCommand>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001910:	2140      	movs	r1, #64	@ 0x40
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff9c 	bl	8001850 <ssd1306_WriteCommand>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001922:	2181      	movs	r1, #129	@ 0x81
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff93 	bl	8001850 <ssd1306_WriteCommand>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001934:	21ff      	movs	r1, #255	@ 0xff
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff8a 	bl	8001850 <ssd1306_WriteCommand>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001946:	21a1      	movs	r1, #161	@ 0xa1
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff81 	bl	8001850 <ssd1306_WriteCommand>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001958:	21a6      	movs	r1, #166	@ 0xa6
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff78 	bl	8001850 <ssd1306_WriteCommand>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800196a:	21a8      	movs	r1, #168	@ 0xa8
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff6f 	bl	8001850 <ssd1306_WriteCommand>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800197c:	213f      	movs	r1, #63	@ 0x3f
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff66 	bl	8001850 <ssd1306_WriteCommand>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800198e:	21a4      	movs	r1, #164	@ 0xa4
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff5d 	bl	8001850 <ssd1306_WriteCommand>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80019a0:	21d3      	movs	r1, #211	@ 0xd3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff54 	bl	8001850 <ssd1306_WriteCommand>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff4b 	bl	8001850 <ssd1306_WriteCommand>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80019c4:	21d5      	movs	r1, #213	@ 0xd5
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff42 	bl	8001850 <ssd1306_WriteCommand>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80019d6:	21f0      	movs	r1, #240	@ 0xf0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff39 	bl	8001850 <ssd1306_WriteCommand>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80019e8:	21d9      	movs	r1, #217	@ 0xd9
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff30 	bl	8001850 <ssd1306_WriteCommand>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80019fa:	2122      	movs	r1, #34	@ 0x22
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff27 	bl	8001850 <ssd1306_WriteCommand>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001a0c:	21da      	movs	r1, #218	@ 0xda
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff1e 	bl	8001850 <ssd1306_WriteCommand>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001a1e:	2112      	movs	r1, #18
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff15 	bl	8001850 <ssd1306_WriteCommand>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001a30:	21db      	movs	r1, #219	@ 0xdb
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff0c 	bl	8001850 <ssd1306_WriteCommand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001a42:	2120      	movs	r1, #32
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff03 	bl	8001850 <ssd1306_WriteCommand>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001a54:	218d      	movs	r1, #141	@ 0x8d
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fefa 	bl	8001850 <ssd1306_WriteCommand>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001a66:	2114      	movs	r1, #20
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fef1 	bl	8001850 <ssd1306_WriteCommand>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001a78:	21af      	movs	r1, #175	@ 0xaf
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fee8 	bl	8001850 <ssd1306_WriteCommand>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <ssd1306_Init+0x214>
        return 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e00f      	b.n	8001ab4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f813 	bl	8001ac0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f832 	bl	8001b04 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <ssd1306_Init+0x23c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <ssd1306_Init+0x23c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <ssd1306_Init+0x23c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	715a      	strb	r2, [r3, #5]

    return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200008cc 	.word	0x200008cc

08001ac0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e00d      	b.n	8001aec <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <ssd1306_Fill+0x1a>
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	e000      	b.n	8001adc <ssd1306_Fill+0x1c>
 8001ada:	21ff      	movs	r1, #255	@ 0xff
 8001adc:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <ssd1306_Fill+0x40>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	460a      	mov	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af2:	d3ed      	bcc.n	8001ad0 <ssd1306_Fill+0x10>
    }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	200004cc 	.word	0x200004cc

08001b04 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e020      	b.n	8001b54 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3b50      	subs	r3, #80	@ 0x50
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe98 	bl	8001850 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fe94 	bl	8001850 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001b28:	2110      	movs	r1, #16
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe90 	bl	8001850 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	01db      	lsls	r3, r3, #7
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <ssd1306_UpdateScreen+0x60>)
 8001b36:	4413      	add	r3, r2
 8001b38:	2264      	movs	r2, #100	@ 0x64
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	2178      	movs	r1, #120	@ 0x78
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 f9e3 	bl	8002f14 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	d9db      	bls.n	8001b12 <ssd1306_UpdateScreen+0xe>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200004cc 	.word	0x200004cc

08001b68 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	460b      	mov	r3, r1
 8001b74:	71bb      	strb	r3, [r7, #6]
 8001b76:	4613      	mov	r3, r2
 8001b78:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db48      	blt.n	8001c14 <ssd1306_DrawPixel+0xac>
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b86:	d845      	bhi.n	8001c14 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <ssd1306_DrawPixel+0xb8>)
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001b90:	797b      	ldrb	r3, [r7, #5]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d11a      	bne.n	8001bda <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	01db      	lsls	r3, r3, #7
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <ssd1306_DrawPixel+0xbc>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b259      	sxtb	r1, r3
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2c9      	uxtb	r1, r1
 8001bd4:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <ssd1306_DrawPixel+0xbc>)
 8001bd6:	54d1      	strb	r1, [r2, r3]
 8001bd8:	e01d      	b.n	8001c16 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	08db      	lsrs	r3, r3, #3
 8001be0:	b2d8      	uxtb	r0, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	4413      	add	r3, r2
 8001be8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <ssd1306_DrawPixel+0xbc>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	b259      	sxtb	r1, r3
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	4603      	mov	r3, r0
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <ssd1306_DrawPixel+0xbc>)
 8001c10:	54d1      	strb	r1, [r2, r3]
 8001c12:	e000      	b.n	8001c16 <ssd1306_DrawPixel+0xae>
        return;
 8001c14:	bf00      	nop
    }
}
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200008cc 	.word	0x200008cc
 8001c24:	200004cc 	.word	0x200004cc

08001c28 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4604      	mov	r4, r0
 8001c30:	1d38      	adds	r0, r7, #4
 8001c32:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c36:	461a      	mov	r2, r3
 8001c38:	4623      	mov	r3, r4
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c40:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	793b      	ldrb	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c4c:	dc06      	bgt.n	8001c5c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	461a      	mov	r2, r3
 8001c54:	797b      	ldrb	r3, [r7, #5]
 8001c56:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c5a:	dd01      	ble.n	8001c60 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e05c      	b.n	8001d1a <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e04c      	b.n	8001d00 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	3b20      	subs	r3, #32
 8001c6c:	7979      	ldrb	r1, [r7, #5]
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	440b      	add	r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e034      	b.n	8001cf0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2d8      	uxtb	r0, r3
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001ca6:	885b      	ldrh	r3, [r3, #2]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	7bba      	ldrb	r2, [r7, #14]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff ff57 	bl	8001b68 <ssd1306_DrawPixel>
 8001cba:	e016      	b.n	8001cea <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001ccc:	885b      	ldrh	r3, [r3, #2]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2d9      	uxtb	r1, r3
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f7ff ff3f 	bl	8001b68 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	793b      	ldrb	r3, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d3c5      	bcc.n	8001c86 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	461a      	mov	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d3ad      	bcc.n	8001c66 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	793a      	ldrb	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <ssd1306_WriteChar+0xfc>)
 8001d16:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200008cc 	.word	0x200008cc

08001d28 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	1d38      	adds	r0, r7, #4
 8001d32:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d36:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001d38:	e012      	b.n	8001d60 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	7818      	ldrb	r0, [r3, #0]
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	1d3a      	adds	r2, r7, #4
 8001d42:	ca06      	ldmia	r2, {r1, r2}
 8001d44:	f7ff ff70 	bl	8001c28 <ssd1306_WriteChar>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d002      	beq.n	8001d5a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	e008      	b.n	8001d6c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e8      	bne.n	8001d3a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <ssd1306_SetCursor+0x2c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <ssd1306_SetCursor+0x2c>)
 8001d92:	805a      	strh	r2, [r3, #2]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	200008cc 	.word	0x200008cc

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_MspInit+0x60>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_MspInit+0x60>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <MemManage_Handler+0x4>

08001e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e58:	f000 f9c2 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <RTC_IRQHandler+0x10>)
 8001e66:	f003 fad3 	bl	8005410 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000450 	.word	0x20000450

08001e74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <USART1_IRQHandler+0x10>)
 8001e7a:	f003 fe3b 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200008d8 	.word	0x200008d8

08001e88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <USART2_IRQHandler+0x10>)
 8001e8e:	f003 fe31 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000920 	.word	0x20000920

08001e9c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <RTC_Alarm_IRQHandler+0x10>)
 8001ea2:	f002 ffe9 	bl	8004e78 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000450 	.word	0x20000450

08001eb0 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001eb4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001eb8:	f000 fe52 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f004 fbfa 	bl	80066e8 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20005000 	.word	0x20005000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	200008d4 	.word	0x200008d4
 8001f28:	20000ab8 	.word	0x20000ab8

08001f2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <MX_USART1_UART_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f70:	f003 fa98 	bl	80054a4 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f7fe fed5 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200008d8 	.word	0x200008d8
 8001f88:	40013800 	.word	0x40013800

08001f8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f003 fa6e 	bl	80054a4 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7fe feab 	bl	8000d28 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000920 	.word	0x20000920
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <HAL_UART_MspInit+0x118>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d13a      	bne.n	8002076 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002000:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a3d      	ldr	r2, [pc, #244]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a37      	ldr	r2, [pc, #220]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	4619      	mov	r1, r3
 8002044:	482e      	ldr	r0, [pc, #184]	@ (8002100 <HAL_UART_MspInit+0x120>)
 8002046:	f000 fafb 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4828      	ldr	r0, [pc, #160]	@ (8002100 <HAL_UART_MspInit+0x120>)
 8002060:	f000 faee 	bl	8002640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2025      	movs	r0, #37	@ 0x25
 800206a:	f000 f9e5 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206e:	2025      	movs	r0, #37	@ 0x25
 8002070:	f000 fa0e 	bl	8002490 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002074:	e03c      	b.n	80020f0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <HAL_UART_MspInit+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d137      	bne.n	80020f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_UART_MspInit+0x11c>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b0:	2304      	movs	r3, #4
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	480f      	ldr	r0, [pc, #60]	@ (8002100 <HAL_UART_MspInit+0x120>)
 80020c4:	f000 fabc 	bl	8002640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c8:	2308      	movs	r3, #8
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	@ (8002100 <HAL_UART_MspInit+0x120>)
 80020dc:	f000 fab0 	bl	8002640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2026      	movs	r0, #38	@ 0x26
 80020e6:	f000 f9a7 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ea:	2026      	movs	r0, #38	@ 0x26
 80020ec:	f000 f9d0 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	@ 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010800 	.word	0x40010800
 8002104:	40004400 	.word	0x40004400

08002108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002108:	f7ff ff10 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480b      	ldr	r0, [pc, #44]	@ (800213c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800210e:	490c      	ldr	r1, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002110:	4a0c      	ldr	r2, [pc, #48]	@ (8002144 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002124:	4c09      	ldr	r4, [pc, #36]	@ (800214c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f004 fadf 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002136:	f7fe fc41 	bl	80009bc <main>
  bx lr
 800213a:	4770      	bx	lr
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8002144:	08007cec 	.word	0x08007cec
  ldr r2, =_sbss
 8002148:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 800214c:	20000ab4 	.word	0x20000ab4

08002150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_Init+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	@ (800217c <HAL_Init+0x28>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f947 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fe18 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f98e 	bl	80024c0 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f93c 	bl	8002438 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000238 	.word	0x20000238
 80021d8:	20000240 	.word	0x20000240
 80021dc:	2000023c 	.word	0x2000023c

080021e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_IncTick+0x1c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x20>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a03      	ldr	r2, [pc, #12]	@ (8002200 <HAL_IncTick+0x20>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000240 	.word	0x20000240
 8002200:	20000968 	.word	0x20000968

08002204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b02      	ldr	r3, [pc, #8]	@ (8002214 <HAL_GetTick+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000968 	.word	0x20000968

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fff0 	bl	8002204 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffe0 	bl	8002204 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000240 	.word	0x20000240

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4906      	ldr	r1, [pc, #24]	@ (80022f8 <__NVIC_EnableIRQ+0x34>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	@ (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f7ff ff90 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b07      	cmp	r3, #7
 8002404:	d00f      	beq.n	8002426 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d00c      	beq.n	8002426 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d009      	beq.n	8002426 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d006      	beq.n	8002426 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d003      	beq.n	8002426 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800241e:	2191      	movs	r1, #145	@ 0x91
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002422:	f7fe fc87 	bl	8000d34 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff1a 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	08007364 	.word	0x08007364

08002438 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d903      	bls.n	8002458 <HAL_NVIC_SetPriority+0x20>
 8002450:	21a9      	movs	r1, #169	@ 0xa9
 8002452:	480e      	ldr	r0, [pc, #56]	@ (800248c <HAL_NVIC_SetPriority+0x54>)
 8002454:	f7fe fc6e 	bl	8000d34 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d903      	bls.n	8002466 <HAL_NVIC_SetPriority+0x2e>
 800245e:	21aa      	movs	r1, #170	@ 0xaa
 8002460:	480a      	ldr	r0, [pc, #40]	@ (800248c <HAL_NVIC_SetPriority+0x54>)
 8002462:	f7fe fc67 	bl	8000d34 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002466:	f7ff ff1f 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800246a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7ff ff6d 	bl	8002350 <NVIC_EncodePriority>
 8002476:	4602      	mov	r2, r0
 8002478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff3c 	bl	80022fc <__NVIC_SetPriority>
}
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	08007364 	.word	0x08007364

08002490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	da03      	bge.n	80024aa <HAL_NVIC_EnableIRQ+0x1a>
 80024a2:	21bd      	movs	r1, #189	@ 0xbd
 80024a4:	4805      	ldr	r0, [pc, #20]	@ (80024bc <HAL_NVIC_EnableIRQ+0x2c>)
 80024a6:	f7fe fc45 	bl	8000d34 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff08 	bl	80022c4 <__NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	08007364 	.word	0x08007364

080024c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff73 	bl	80023b4 <SysTick_Config>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e020      	b.n	8002544 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d005      	beq.n	8002574 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e051      	b.n	8002618 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 020e 	bic.w	r2, r2, #14
 8002582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <HAL_DMA_Abort_IT+0xd4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d029      	beq.n	80025f2 <HAL_DMA_Abort_IT+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <HAL_DMA_Abort_IT+0xd8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_Abort_IT+0x9e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_DMA_Abort_IT+0xdc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x98>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_DMA_Abort_IT+0xe0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d012      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x92>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_DMA_Abort_IT+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00a      	beq.n	80025dc <HAL_DMA_Abort_IT+0x8c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002638 <HAL_DMA_Abort_IT+0xe8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_DMA_Abort_IT+0x86>
 80025d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025d4:	e00e      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025da:	e00b      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e6:	e005      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ec:	e002      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025ee:	2310      	movs	r3, #16
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025f2:	2301      	movs	r3, #1
 80025f4:	4a11      	ldr	r2, [pc, #68]	@ (800263c <HAL_DMA_Abort_IT+0xec>)
 80025f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
    } 
  }
  return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40020008 	.word	0x40020008
 8002628:	4002001c 	.word	0x4002001c
 800262c:	40020030 	.word	0x40020030
 8002630:	40020044 	.word	0x40020044
 8002634:	40020058 	.word	0x40020058
 8002638:	4002006c 	.word	0x4002006c
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a96      	ldr	r2, [pc, #600]	@ (80028b0 <HAL_GPIO_Init+0x270>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x42>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a95      	ldr	r2, [pc, #596]	@ (80028b4 <HAL_GPIO_Init+0x274>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <HAL_GPIO_Init+0x42>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a94      	ldr	r2, [pc, #592]	@ (80028b8 <HAL_GPIO_Init+0x278>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <HAL_GPIO_Init+0x42>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a93      	ldr	r2, [pc, #588]	@ (80028bc <HAL_GPIO_Init+0x27c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x42>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a92      	ldr	r2, [pc, #584]	@ (80028c0 <HAL_GPIO_Init+0x280>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x42>
 800267a:	21bd      	movs	r1, #189	@ 0xbd
 800267c:	4891      	ldr	r0, [pc, #580]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 800267e:	f7fe fb59 	bl	8000d34 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_GPIO_Init+0x56>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d303      	bcc.n	800269e <HAL_GPIO_Init+0x5e>
 8002696:	21be      	movs	r1, #190	@ 0xbe
 8002698:	488a      	ldr	r0, [pc, #552]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 800269a:	f7fe fb4b 	bl	8000d34 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 821d 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f000 8218 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	f000 8213 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	f000 820e 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	f000 8209 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a7c      	ldr	r2, [pc, #496]	@ (80028c8 <HAL_GPIO_Init+0x288>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f000 8203 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a7a      	ldr	r2, [pc, #488]	@ (80028cc <HAL_GPIO_Init+0x28c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f000 81fd 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a78      	ldr	r2, [pc, #480]	@ (80028d0 <HAL_GPIO_Init+0x290>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f000 81f7 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a76      	ldr	r2, [pc, #472]	@ (80028d4 <HAL_GPIO_Init+0x294>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f000 81f1 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a74      	ldr	r2, [pc, #464]	@ (80028d8 <HAL_GPIO_Init+0x298>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f000 81eb 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a72      	ldr	r2, [pc, #456]	@ (80028dc <HAL_GPIO_Init+0x29c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f000 81e5 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b03      	cmp	r3, #3
 800271e:	f000 81e0 	beq.w	8002ae2 <HAL_GPIO_Init+0x4a2>
 8002722:	21bf      	movs	r1, #191	@ 0xbf
 8002724:	4867      	ldr	r0, [pc, #412]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 8002726:	f7fe fb05 	bl	8000d34 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e1da      	b.n	8002ae2 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800272c:	2201      	movs	r2, #1
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 81c9 	bne.w	8002adc <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_GPIO_Init+0x270>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x13a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <HAL_GPIO_Init+0x274>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00f      	beq.n	800277a <HAL_GPIO_Init+0x13a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a56      	ldr	r2, [pc, #344]	@ (80028b8 <HAL_GPIO_Init+0x278>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <HAL_GPIO_Init+0x13a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a55      	ldr	r2, [pc, #340]	@ (80028bc <HAL_GPIO_Init+0x27c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x13a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a54      	ldr	r2, [pc, #336]	@ (80028c0 <HAL_GPIO_Init+0x280>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x13a>
 8002772:	21cd      	movs	r1, #205	@ 0xcd
 8002774:	4853      	ldr	r0, [pc, #332]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 8002776:	f7fe fadd 	bl	8000d34 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a57      	ldr	r2, [pc, #348]	@ (80028dc <HAL_GPIO_Init+0x29c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f000 80c2 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
 8002786:	4a55      	ldr	r2, [pc, #340]	@ (80028dc <HAL_GPIO_Init+0x29c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	f200 80e8 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 800278e:	4a50      	ldr	r2, [pc, #320]	@ (80028d0 <HAL_GPIO_Init+0x290>)
 8002790:	4293      	cmp	r3, r2
 8002792:	f000 80ba 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
 8002796:	4a4e      	ldr	r2, [pc, #312]	@ (80028d0 <HAL_GPIO_Init+0x290>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f200 80e0 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 800279e:	4a4e      	ldr	r2, [pc, #312]	@ (80028d8 <HAL_GPIO_Init+0x298>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	f000 80b2 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
 80027a6:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <HAL_GPIO_Init+0x298>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f200 80d8 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 80027ae:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_GPIO_Init+0x28c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f000 80aa 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
 80027b6:	4a45      	ldr	r2, [pc, #276]	@ (80028cc <HAL_GPIO_Init+0x28c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	f200 80d0 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 80027be:	4a45      	ldr	r2, [pc, #276]	@ (80028d4 <HAL_GPIO_Init+0x294>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f000 80a2 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
 80027c6:	4a43      	ldr	r2, [pc, #268]	@ (80028d4 <HAL_GPIO_Init+0x294>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f200 80c8 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d82c      	bhi.n	800282c <HAL_GPIO_Init+0x1ec>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	f200 80c3 	bhi.w	800295e <HAL_GPIO_Init+0x31e>
 80027d8:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <HAL_GPIO_Init+0x1a0>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	0800290b 	.word	0x0800290b
 80027e4:	08002835 	.word	0x08002835
 80027e8:	08002887 	.word	0x08002887
 80027ec:	08002959 	.word	0x08002959
 80027f0:	0800295f 	.word	0x0800295f
 80027f4:	0800295f 	.word	0x0800295f
 80027f8:	0800295f 	.word	0x0800295f
 80027fc:	0800295f 	.word	0x0800295f
 8002800:	0800295f 	.word	0x0800295f
 8002804:	0800295f 	.word	0x0800295f
 8002808:	0800295f 	.word	0x0800295f
 800280c:	0800295f 	.word	0x0800295f
 8002810:	0800295f 	.word	0x0800295f
 8002814:	0800295f 	.word	0x0800295f
 8002818:	0800295f 	.word	0x0800295f
 800281c:	0800295f 	.word	0x0800295f
 8002820:	0800295f 	.word	0x0800295f
 8002824:	0800285d 	.word	0x0800285d
 8002828:	080028e1 	.word	0x080028e1
 800282c:	4a26      	ldr	r2, [pc, #152]	@ (80028c8 <HAL_GPIO_Init+0x288>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d06b      	beq.n	800290a <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002832:	e094      	b.n	800295e <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d00b      	beq.n	8002854 <HAL_GPIO_Init+0x214>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x214>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x214>
 800284c:	21d5      	movs	r1, #213	@ 0xd5
 800284e:	481d      	ldr	r0, [pc, #116]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 8002850:	f7fe fa70 	bl	8000d34 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e081      	b.n	8002960 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d00b      	beq.n	800287c <HAL_GPIO_Init+0x23c>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <HAL_GPIO_Init+0x23c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x23c>
 8002874:	21dc      	movs	r1, #220	@ 0xdc
 8002876:	4813      	ldr	r0, [pc, #76]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 8002878:	f7fe fa5c 	bl	8000d34 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	3304      	adds	r3, #4
 8002882:	623b      	str	r3, [r7, #32]
          break;
 8002884:	e06c      	b.n	8002960 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d00b      	beq.n	80028a6 <HAL_GPIO_Init+0x266>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x266>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x266>
 800289e:	21e3      	movs	r1, #227	@ 0xe3
 80028a0:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <HAL_GPIO_Init+0x284>)
 80028a2:	f7fe fa47 	bl	8000d34 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	3308      	adds	r3, #8
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e057      	b.n	8002960 <HAL_GPIO_Init+0x320>
 80028b0:	40010800 	.word	0x40010800
 80028b4:	40010c00 	.word	0x40010c00
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	40011800 	.word	0x40011800
 80028c4:	080073a0 	.word	0x080073a0
 80028c8:	10110000 	.word	0x10110000
 80028cc:	10210000 	.word	0x10210000
 80028d0:	10310000 	.word	0x10310000
 80028d4:	10120000 	.word	0x10120000
 80028d8:	10220000 	.word	0x10220000
 80028dc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d00b      	beq.n	8002900 <HAL_GPIO_Init+0x2c0>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0x2c0>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2c0>
 80028f8:	21ea      	movs	r1, #234	@ 0xea
 80028fa:	4880      	ldr	r0, [pc, #512]	@ (8002afc <HAL_GPIO_Init+0x4bc>)
 80028fc:	f7fe fa1a 	bl	8000d34 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	330c      	adds	r3, #12
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e02a      	b.n	8002960 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_GPIO_Init+0x2ea>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x2ea>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2ea>
 8002922:	21f7      	movs	r1, #247	@ 0xf7
 8002924:	4875      	ldr	r0, [pc, #468]	@ (8002afc <HAL_GPIO_Init+0x4bc>)
 8002926:	f7fe fa05 	bl	8000d34 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002932:	2304      	movs	r3, #4
 8002934:	623b      	str	r3, [r7, #32]
          break;
 8002936:	e013      	b.n	8002960 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002940:	2308      	movs	r3, #8
 8002942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	611a      	str	r2, [r3, #16]
          break;
 800294a:	e009      	b.n	8002960 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800294c:	2308      	movs	r3, #8
 800294e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	615a      	str	r2, [r3, #20]
          break;
 8002956:	e003      	b.n	8002960 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x320>
          break;
 800295e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2bff      	cmp	r3, #255	@ 0xff
 8002964:	d801      	bhi.n	800296a <HAL_GPIO_Init+0x32a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	e001      	b.n	800296e <HAL_GPIO_Init+0x32e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	@ 0xff
 8002974:	d802      	bhi.n	800297c <HAL_GPIO_Init+0x33c>
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x342>
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	3b08      	subs	r3, #8
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	210f      	movs	r1, #15
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8096 	beq.w	8002adc <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b0:	4b53      	ldr	r3, [pc, #332]	@ (8002b00 <HAL_GPIO_Init+0x4c0>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a52      	ldr	r2, [pc, #328]	@ (8002b00 <HAL_GPIO_Init+0x4c0>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b50      	ldr	r3, [pc, #320]	@ (8002b00 <HAL_GPIO_Init+0x4c0>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b04 <HAL_GPIO_Init+0x4c4>)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a46      	ldr	r2, [pc, #280]	@ (8002b08 <HAL_GPIO_Init+0x4c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_GPIO_Init+0x3dc>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a45      	ldr	r2, [pc, #276]	@ (8002b0c <HAL_GPIO_Init+0x4cc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00d      	beq.n	8002a18 <HAL_GPIO_Init+0x3d8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a44      	ldr	r2, [pc, #272]	@ (8002b10 <HAL_GPIO_Init+0x4d0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <HAL_GPIO_Init+0x3d4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <HAL_GPIO_Init+0x4d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_GPIO_Init+0x3d0>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e006      	b.n	8002a1e <HAL_GPIO_Init+0x3de>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e004      	b.n	8002a1e <HAL_GPIO_Init+0x3de>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e002      	b.n	8002a1e <HAL_GPIO_Init+0x3de>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_GPIO_Init+0x3de>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	f002 0203 	and.w	r2, r2, #3
 8002a24:	0092      	lsls	r2, r2, #2
 8002a26:	4093      	lsls	r3, r2
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a2e:	4935      	ldr	r1, [pc, #212]	@ (8002b04 <HAL_GPIO_Init+0x4c4>)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a48:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4932      	ldr	r1, [pc, #200]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	492e      	ldr	r1, [pc, #184]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4928      	ldr	r1, [pc, #160]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a7e:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4924      	ldr	r1, [pc, #144]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	491e      	ldr	r1, [pc, #120]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	491a      	ldr	r1, [pc, #104]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac0:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4914      	ldr	r1, [pc, #80]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4910      	ldr	r1, [pc, #64]	@ (8002b18 <HAL_GPIO_Init+0x4d8>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	3301      	adds	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f ae1d 	bne.w	800272c <HAL_GPIO_Init+0xec>
  }
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	@ 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	080073a0 	.word	0x080073a0
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40010800 	.word	0x40010800
 8002b0c:	40010c00 	.word	0x40010c00
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40011400 	.word	0x40011400
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_GPIO_TogglePin+0x1c>
 8002b2e:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8002b32:	480a      	ldr	r0, [pc, #40]	@ (8002b5c <HAL_GPIO_TogglePin+0x40>)
 8002b34:	f7fe f8fe 	bl	8000d34 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43d9      	mvns	r1, r3
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	611a      	str	r2, [r3, #16]
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	080073a0 	.word	0x080073a0

08002b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fe4e 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1b4      	b.n	8002f0c <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a9b      	ldr	r2, [pc, #620]	@ (8002e14 <HAL_I2C_Init+0x284>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_I2C_Init+0x30>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a99      	ldr	r2, [pc, #612]	@ (8002e18 <HAL_I2C_Init+0x288>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_I2C_Init+0x30>
 8002bb6:	f240 11db 	movw	r1, #475	@ 0x1db
 8002bba:	4898      	ldr	r0, [pc, #608]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002bbc:	f7fe f8ba 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_I2C_Init+0x42>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a94      	ldr	r2, [pc, #592]	@ (8002e20 <HAL_I2C_Init+0x290>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d904      	bls.n	8002bdc <HAL_I2C_Init+0x4c>
 8002bd2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8002bd6:	4891      	ldr	r0, [pc, #580]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002bd8:	f7fe f8ac 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_I2C_Init+0x68>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bec:	d004      	beq.n	8002bf8 <HAL_I2C_Init+0x68>
 8002bee:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8002bf2:	488a      	ldr	r0, [pc, #552]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002bf4:	f7fe f89e 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c00:	d304      	bcc.n	8002c0c <HAL_I2C_Init+0x7c>
 8002c02:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8002c06:	4885      	ldr	r0, [pc, #532]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c08:	f7fe f894 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c14:	d009      	beq.n	8002c2a <HAL_I2C_Init+0x9a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c1e:	d004      	beq.n	8002c2a <HAL_I2C_Init+0x9a>
 8002c20:	f240 11df 	movw	r1, #479	@ 0x1df
 8002c24:	487d      	ldr	r0, [pc, #500]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c26:	f7fe f885 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_I2C_Init+0xb4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d004      	beq.n	8002c44 <HAL_I2C_Init+0xb4>
 8002c3a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002c3e:	4877      	ldr	r0, [pc, #476]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c40:	f7fe f878 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_I2C_Init+0xca>
 8002c50:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8002c54:	4871      	ldr	r0, [pc, #452]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c56:	f7fe f86d 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_I2C_Init+0xe4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d004      	beq.n	8002c74 <HAL_I2C_Init+0xe4>
 8002c6a:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002c6e:	486b      	ldr	r0, [pc, #428]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c70:	f7fe f860 	bl	8000d34 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_I2C_Init+0xfe>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2b80      	cmp	r3, #128	@ 0x80
 8002c82:	d004      	beq.n	8002c8e <HAL_I2C_Init+0xfe>
 8002c84:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002c88:	4864      	ldr	r0, [pc, #400]	@ (8002e1c <HAL_I2C_Init+0x28c>)
 8002c8a:	f7fe f853 	bl	8000d34 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fd6a 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f001 f9f4 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8002ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a4e      	ldr	r2, [pc, #312]	@ (8002e24 <HAL_I2C_Init+0x294>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d807      	bhi.n	8002d00 <HAL_I2C_Init+0x170>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e28 <HAL_I2C_Init+0x298>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bf94      	ite	ls
 8002cf8:	2301      	movls	r3, #1
 8002cfa:	2300      	movhi	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e006      	b.n	8002d0e <HAL_I2C_Init+0x17e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a4a      	ldr	r2, [pc, #296]	@ (8002e2c <HAL_I2C_Init+0x29c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bf94      	ite	ls
 8002d08:	2301      	movls	r3, #1
 8002d0a:	2300      	movhi	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0fa      	b.n	8002f0c <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a45      	ldr	r2, [pc, #276]	@ (8002e30 <HAL_I2C_Init+0x2a0>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a37      	ldr	r2, [pc, #220]	@ (8002e24 <HAL_I2C_Init+0x294>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d802      	bhi.n	8002d50 <HAL_I2C_Init+0x1c0>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	e009      	b.n	8002d64 <HAL_I2C_Init+0x1d4>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	4a36      	ldr	r2, [pc, #216]	@ (8002e34 <HAL_I2C_Init+0x2a4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	3301      	adds	r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4929      	ldr	r1, [pc, #164]	@ (8002e24 <HAL_I2C_Init+0x294>)
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d819      	bhi.n	8002db8 <HAL_I2C_Init+0x228>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e59      	subs	r1, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d92:	1c59      	adds	r1, r3, #1
 8002d94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d98:	400b      	ands	r3, r1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_I2C_Init+0x224>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e59      	subs	r1, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	e064      	b.n	8002e7e <HAL_I2C_Init+0x2ee>
 8002db4:	2304      	movs	r3, #4
 8002db6:	e062      	b.n	8002e7e <HAL_I2C_Init+0x2ee>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d111      	bne.n	8002de4 <HAL_I2C_Init+0x254>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e012      	b.n	8002e0a <HAL_I2C_Init+0x27a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d014      	beq.n	8002e38 <HAL_I2C_Init+0x2a8>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e035      	b.n	8002e7e <HAL_I2C_Init+0x2ee>
 8002e12:	bf00      	nop
 8002e14:	40005400 	.word	0x40005400
 8002e18:	40005800 	.word	0x40005800
 8002e1c:	080073dc 	.word	0x080073dc
 8002e20:	00061a80 	.word	0x00061a80
 8002e24:	000186a0 	.word	0x000186a0
 8002e28:	001e847f 	.word	0x001e847f
 8002e2c:	003d08ff 	.word	0x003d08ff
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	10624dd3 	.word	0x10624dd3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10e      	bne.n	8002e5e <HAL_I2C_Init+0x2ce>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5c:	e00f      	b.n	8002e7e <HAL_I2C_Init+0x2ee>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1e58      	subs	r0, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	0099      	lsls	r1, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	6809      	ldr	r1, [r1, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6911      	ldr	r1, [r2, #16]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68d2      	ldr	r2, [r2, #12]
 8002eb8:	4311      	orrs	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	460b      	mov	r3, r1
 8002f28:	813b      	strh	r3, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f2e:	f7ff f969 	bl	8002204 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d007      	beq.n	8002f4a <HAL_I2C_Mem_Write+0x36>
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d004      	beq.n	8002f4a <HAL_I2C_Mem_Write+0x36>
 8002f40:	f640 2106 	movw	r1, #2566	@ 0xa06
 8002f44:	4873      	ldr	r0, [pc, #460]	@ (8003114 <HAL_I2C_Mem_Write+0x200>)
 8002f46:	f7fd fef5 	bl	8000d34 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	f040 80d9 	bne.w	800310a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	496d      	ldr	r1, [pc, #436]	@ (8003118 <HAL_I2C_Mem_Write+0x204>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f972 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0cc      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x6c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0c5      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d007      	beq.n	8002fa6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2221      	movs	r2, #33	@ 0x21
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2240      	movs	r2, #64	@ 0x40
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800311c <HAL_I2C_Mem_Write+0x208>)
 8002fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe8:	88f8      	ldrh	r0, [r7, #6]
 8002fea:	893a      	ldrh	r2, [r7, #8]
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f891 	bl	8003120 <I2C_RequestMemoryWrite>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d052      	beq.n	80030aa <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e081      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa37 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e06b      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d11b      	bne.n	80030aa <HAL_I2C_Mem_Write+0x196>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d017      	beq.n	80030aa <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1aa      	bne.n	8003008 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa2a 	bl	8003510 <I2C_WaitOnBTFFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e016      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	080073dc 	.word	0x080073dc
 8003118:	00100002 	.word	0x00100002
 800311c:	ffff0000 	.word	0xffff0000

08003120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2200      	movs	r2, #0
 8003152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f878 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003170:	d103      	bne.n	800317a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e05f      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800318c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	492d      	ldr	r1, [pc, #180]	@ (8003248 <I2C_RequestMemoryWrite+0x128>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f8d3 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04c      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031bc:	6a39      	ldr	r1, [r7, #32]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f95e 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d107      	bne.n	80031e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e02b      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]
 80031f6:	e021      	b.n	800323c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f8:	893b      	ldrh	r3, [r7, #8]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f938 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e005      	b.n	800323e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003232:	893b      	ldrh	r3, [r7, #8]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	00010002 	.word	0x00010002

0800324c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325c:	e048      	b.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d044      	beq.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fe ffcd 	bl	8002204 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d139      	bne.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10d      	bne.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	e00c      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d116      	bne.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e023      	b.n	8003338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10d      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	e00c      	b.n	8003330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	429a      	cmp	r2, r3
 8003334:	d093      	beq.n	800325e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334e:	e071      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335e:	d123      	bne.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800336e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e067      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d041      	beq.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fe ff28 	bl	8002204 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d136      	bne.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10c      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e00b      	b.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e021      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10c      	bne.n	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e00b      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f af6d 	bne.w	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348c:	e034      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f886 	bl	80035a0 <I2C_IsAcknowledgeFailed>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e034      	b.n	8003508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d028      	beq.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fead 	bl	8002204 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d016      	beq.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e007      	b.n	8003508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d1c3      	bne.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800351c:	e034      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f83e 	bl	80035a0 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e034      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d028      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fe65 	bl	8002204 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d1c3      	bne.n	800351e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	d11b      	bne.n	80035f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	420e0020 	.word	0x420e0020

08003614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e35a      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01c      	beq.n	8003668 <HAL_RCC_OscConfig+0x54>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x54>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d110      	bne.n	8003668 <HAL_RCC_OscConfig+0x54>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <HAL_RCC_OscConfig+0x54>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_RCC_OscConfig+0x54>
 800365e:	f240 1165 	movw	r1, #357	@ 0x165
 8003662:	488f      	ldr	r0, [pc, #572]	@ (80038a0 <HAL_RCC_OscConfig+0x28c>)
 8003664:	f7fd fb66 	bl	8000d34 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 809a 	beq.w	80037aa <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <HAL_RCC_OscConfig+0x88>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d009      	beq.n	800369c <HAL_RCC_OscConfig+0x88>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003690:	d004      	beq.n	800369c <HAL_RCC_OscConfig+0x88>
 8003692:	f240 116b 	movw	r1, #363	@ 0x16b
 8003696:	4882      	ldr	r0, [pc, #520]	@ (80038a0 <HAL_RCC_OscConfig+0x28c>)
 8003698:	f7fd fb4c 	bl	8000d34 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800369c:	4b81      	ldr	r3, [pc, #516]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d00c      	beq.n	80036c2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a8:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d112      	bne.n	80036da <HAL_RCC_OscConfig+0xc6>
 80036b4:	4b7b      	ldr	r3, [pc, #492]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d10b      	bne.n	80036da <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4b78      	ldr	r3, [pc, #480]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d06c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x194>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d168      	bne.n	80037a8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e300      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0xde>
 80036e4:	4b6f      	ldr	r3, [pc, #444]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a6e      	ldr	r2, [pc, #440]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e02e      	b.n	8003750 <HAL_RCC_OscConfig+0x13c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x100>
 80036fa:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a69      	ldr	r2, [pc, #420]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b67      	ldr	r3, [pc, #412]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a66      	ldr	r2, [pc, #408]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0x13c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x124>
 800371e:	4b61      	ldr	r3, [pc, #388]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a60      	ldr	r2, [pc, #384]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b5e      	ldr	r3, [pc, #376]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5d      	ldr	r2, [pc, #372]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x13c>
 8003738:	4b5a      	ldr	r3, [pc, #360]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a59      	ldr	r2, [pc, #356]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b57      	ldr	r3, [pc, #348]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fd54 	bl	8002204 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fd50 	bl	8002204 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e2b4      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b4c      	ldr	r3, [pc, #304]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x14c>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fd40 	bl	8002204 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fd3c 	bl	8002204 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e2a0      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	4b42      	ldr	r3, [pc, #264]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x174>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8080 	beq.w	80038b8 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1be>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d004      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1be>
 80037c8:	f240 119f 	movw	r1, #415	@ 0x19f
 80037cc:	4834      	ldr	r0, [pc, #208]	@ (80038a0 <HAL_RCC_OscConfig+0x28c>)
 80037ce:	f7fd fab1 	bl	8000d34 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b1f      	cmp	r3, #31
 80037d8:	d904      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1d0>
 80037da:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80037de:	4830      	ldr	r0, [pc, #192]	@ (80038a0 <HAL_RCC_OscConfig+0x28c>)
 80037e0:	f7fd faa8 	bl	8000d34 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d11c      	bne.n	8003836 <HAL_RCC_OscConfig+0x222>
 80037fc:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d116      	bne.n	8003836 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x20c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e25d      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	491d      	ldr	r1, [pc, #116]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003834:	e040      	b.n	80038b8 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383e:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <HAL_RCC_OscConfig+0x294>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fcde 	bl	8002204 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe fcda 	bl	8002204 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e23e      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490a      	ldr	r1, [pc, #40]	@ (80038a4 <HAL_RCC_OscConfig+0x290>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
 800387e:	e01b      	b.n	80038b8 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_RCC_OscConfig+0x294>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fcbd 	bl	8002204 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388c:	e00e      	b.n	80038ac <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe fcb9 	bl	8002204 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d907      	bls.n	80038ac <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e21d      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
 80038a0:	08007414 	.word	0x08007414
 80038a4:	40021000 	.word	0x40021000
 80038a8:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ac:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ea      	bne.n	800388e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d040      	beq.n	8003946 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_OscConfig+0x2ca>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d004      	beq.n	80038de <HAL_RCC_OscConfig+0x2ca>
 80038d4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80038d8:	4873      	ldr	r0, [pc, #460]	@ (8003aa8 <HAL_RCC_OscConfig+0x494>)
 80038da:	f7fd fa2b 	bl	8000d34 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d019      	beq.n	800391a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	4b71      	ldr	r3, [pc, #452]	@ (8003aac <HAL_RCC_OscConfig+0x498>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fe fc8a 	bl	8002204 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fc86 	bl	8002204 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1ea      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4b67      	ldr	r3, [pc, #412]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003912:	2001      	movs	r0, #1
 8003914:	f000 fc02 	bl	800411c <RCC_Delay>
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b64      	ldr	r3, [pc, #400]	@ (8003aac <HAL_RCC_OscConfig+0x498>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003920:	f7fe fc70 	bl	8002204 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fc6c 	bl	8002204 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1d0      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393a:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80bf 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <HAL_RCC_OscConfig+0x366>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d008      	beq.n	800397a <HAL_RCC_OscConfig+0x366>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d004      	beq.n	800397a <HAL_RCC_OscConfig+0x366>
 8003970:	f240 210f 	movw	r1, #527	@ 0x20f
 8003974:	484c      	ldr	r0, [pc, #304]	@ (8003aa8 <HAL_RCC_OscConfig+0x494>)
 8003976:	f7fd f9dd 	bl	8000d34 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4a46      	ldr	r2, [pc, #280]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	61d3      	str	r3, [r2, #28]
 8003992:	4b44      	ldr	r3, [pc, #272]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b43      	ldr	r3, [pc, #268]	@ (8003ab0 <HAL_RCC_OscConfig+0x49c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b40      	ldr	r3, [pc, #256]	@ (8003ab0 <HAL_RCC_OscConfig+0x49c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_RCC_OscConfig+0x49c>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fc23 	bl	8002204 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe fc1f 	bl	8002204 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	@ 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e183      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_RCC_OscConfig+0x49c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3e2>
 80039e8:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	e02d      	b.n	8003a52 <HAL_RCC_OscConfig+0x43e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x404>
 80039fe:	4b29      	ldr	r3, [pc, #164]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
 8003a16:	e01c      	b.n	8003a52 <HAL_RCC_OscConfig+0x43e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x426>
 8003a20:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0x43e>
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6213      	str	r3, [r2, #32]
 8003a46:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fbd3 	bl	8002204 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe fbcf 	bl	8002204 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e131      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_OscConfig+0x490>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCC_OscConfig+0x44e>
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fe fbbd 	bl	8002204 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e012      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fbb9 	bl	8002204 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d909      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e11b      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08007414 	.word	0x08007414
 8003aac:	42420480 	.word	0x42420480
 8003ab0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e6      	bne.n	8003a8e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b87      	ldr	r3, [pc, #540]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4a86      	ldr	r2, [pc, #536]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
 8003aea:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8003aee:	487e      	ldr	r0, [pc, #504]	@ (8003ce8 <HAL_RCC_OscConfig+0x6d4>)
 8003af0:	f7fd f920 	bl	8000d34 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80ee 	beq.w	8003cda <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afe:	4b79      	ldr	r3, [pc, #484]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	f000 80ce 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f040 80b2 	bne.w	8003c7a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_OscConfig+0x51e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b26:	d004      	beq.n	8003b32 <HAL_RCC_OscConfig+0x51e>
 8003b28:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8003b2c:	486e      	ldr	r0, [pc, #440]	@ (8003ce8 <HAL_RCC_OscConfig+0x6d4>)
 8003b2e:	f7fd f901 	bl	8000d34 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04a      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b42:	d045      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b4c:	d040      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b56:	d03b      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b60:	d036      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b6a:	d031      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b74:	d02c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b7e:	d027      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b88:	d022      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b92:	d01d      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b9c:	d018      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8003bba:	d009      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8003bc4:	d004      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5bc>
 8003bc6:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8003bca:	4847      	ldr	r0, [pc, #284]	@ (8003ce8 <HAL_RCC_OscConfig+0x6d4>)
 8003bcc:	f7fd f8b2 	bl	8000d34 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b46      	ldr	r3, [pc, #280]	@ (8003cec <HAL_RCC_OscConfig+0x6d8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fb15 	bl	8002204 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe fb11 	bl	8002204 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e075      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_OscConfig+0x60e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c16:	d004      	beq.n	8003c22 <HAL_RCC_OscConfig+0x60e>
 8003c18:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8003c1c:	4832      	ldr	r0, [pc, #200]	@ (8003ce8 <HAL_RCC_OscConfig+0x6d4>)
 8003c1e:	f7fd f889 	bl	8000d34 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c22:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	492d      	ldr	r1, [pc, #180]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a19      	ldr	r1, [r3, #32]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	430b      	orrs	r3, r1
 8003c46:	4927      	ldr	r1, [pc, #156]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_RCC_OscConfig+0x6d8>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fad7 	bl	8002204 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe fad3 	bl	8002204 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e037      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x646>
 8003c78:	e02f      	b.n	8003cda <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_RCC_OscConfig+0x6d8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fac0 	bl	8002204 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fabc 	bl	8002204 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e020      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x674>
 8003ca6:	e018      	b.n	8003cda <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e013      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_OscConfig+0x6d0>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08007414 	.word	0x08007414
 8003cec:	42420060 	.word	0x42420060

08003cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e176      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d116      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x4e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d110      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x4e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x4e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x4e>
 8003d34:	f240 3136 	movw	r1, #822	@ 0x336
 8003d38:	4874      	ldr	r0, [pc, #464]	@ (8003f0c <HAL_RCC_ClockConfig+0x21c>)
 8003d3a:	f7fc fffb 	bl	8000d34 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x6a>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d007      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x6a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d004      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x6a>
 8003d50:	f240 3137 	movw	r1, #823	@ 0x337
 8003d54:	486d      	ldr	r0, [pc, #436]	@ (8003f0c <HAL_RCC_ClockConfig+0x21c>)
 8003d56:	f7fc ffed 	bl	8000d34 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d910      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d68:	4b69      	ldr	r3, [pc, #420]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 0207 	bic.w	r2, r3, #7
 8003d70:	4967      	ldr	r1, [pc, #412]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d78:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e133      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d049      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003da8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dac:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dba:	4b56      	ldr	r3, [pc, #344]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003dc0:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dc4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d024      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b80      	cmp	r3, #128	@ 0x80
 8003dd4:	d020      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b90      	cmp	r3, #144	@ 0x90
 8003ddc:	d01c      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003de4:	d018      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2bb0      	cmp	r3, #176	@ 0xb0
 8003dec:	d014      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2bd0      	cmp	r3, #208	@ 0xd0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2be0      	cmp	r3, #224	@ 0xe0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x128>
 8003e0e:	f240 315d 	movw	r1, #861	@ 0x35d
 8003e12:	483e      	ldr	r0, [pc, #248]	@ (8003f0c <HAL_RCC_ClockConfig+0x21c>)
 8003e14:	f7fc ff8e 	bl	8000d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e18:	4b3e      	ldr	r3, [pc, #248]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	493b      	ldr	r1, [pc, #236]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d051      	beq.n	8003eda <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x168>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d008      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x168>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x168>
 8003e4e:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8003e52:	482e      	ldr	r0, [pc, #184]	@ (8003f0c <HAL_RCC_ClockConfig+0x21c>)
 8003e54:	f7fc ff6e 	bl	8000d34 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e60:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d115      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0c0      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e78:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b4      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0ac      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e98:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 0203 	bic.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	491b      	ldr	r1, [pc, #108]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eaa:	f7fe f9ab 	bl	8002204 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb2:	f7fe f9a7 	bl	8002204 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e094      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec8:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <HAL_RCC_ClockConfig+0x224>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 020c 	and.w	r2, r3, #12
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d1eb      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d217      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 0207 	bic.w	r2, r3, #7
 8003ef0:	4907      	ldr	r1, [pc, #28]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_ClockConfig+0x220>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d008      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e073      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x302>
 8003f0a:	bf00      	nop
 8003f0c:	08007414 	.word	0x08007414
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d025      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x26e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	d013      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x26e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f3e:	d00e      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x26e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x26e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f52:	d004      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x26e>
 8003f54:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8003f58:	4828      	ldr	r0, [pc, #160]	@ (8003ffc <HAL_RCC_ClockConfig+0x30c>)
 8003f5a:	f7fc feeb 	bl	8000d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_RCC_ClockConfig+0x310>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4925      	ldr	r1, [pc, #148]	@ (8004000 <HAL_RCC_ClockConfig+0x310>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d026      	beq.n	8003fca <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d018      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x2c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8c:	d013      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x2c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f96:	d00e      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x2c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x2c6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x2c6>
 8003fac:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8003fb0:	4812      	ldr	r0, [pc, #72]	@ (8003ffc <HAL_RCC_ClockConfig+0x30c>)
 8003fb2:	f7fc febf 	bl	8000d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <HAL_RCC_ClockConfig+0x310>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_RCC_ClockConfig+0x310>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_ClockConfig+0x310>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	@ (8004004 <HAL_RCC_ClockConfig+0x314>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_RCC_ClockConfig+0x318>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x31c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f8c8 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08007414 	.word	0x08007414
 8004000:	40021000 	.word	0x40021000
 8004004:	08007c68 	.word	0x08007c68
 8004008:	20000238 	.word	0x20000238
 800400c:	2000023c 	.word	0x2000023c

08004010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402a:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x30>
 800403a:	2b08      	cmp	r3, #8
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x36>
 800403e:	e027      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004042:	613b      	str	r3, [r7, #16]
      break;
 8004044:	e027      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0c5b      	lsrs	r3, r3, #17
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004072:	fb03 f202 	mul.w	r2, r3, r2
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e004      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	613b      	str	r3, [r7, #16]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004092:	613b      	str	r3, [r7, #16]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	693b      	ldr	r3, [r7, #16]
}
 8004098:	4618      	mov	r0, r3
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	007a1200 	.word	0x007a1200
 80040ac:	08007c80 	.word	0x08007c80
 80040b0:	08007c90 	.word	0x08007c90
 80040b4:	003d0900 	.word	0x003d0900

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b02      	ldr	r3, [pc, #8]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	20000238 	.word	0x20000238

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d0:	f7ff fff2 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	08007c78 	.word	0x08007c78

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f8:	f7ff ffde 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	0adb      	lsrs	r3, r3, #11
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	08007c78 	.word	0x08007c78

0800411c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <RCC_Delay+0x34>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <RCC_Delay+0x38>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0a5b      	lsrs	r3, r3, #9
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004138:	bf00      	nop
  }
  while (Delay --);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1e5a      	subs	r2, r3, #1
 800413e:	60fa      	str	r2, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <RCC_Delay+0x1c>
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	20000238 	.word	0x20000238
 8004154:	10624dd3 	.word	0x10624dd3

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800418c:	216a      	movs	r1, #106	@ 0x6a
 800418e:	4873      	ldr	r0, [pc, #460]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004190:	f7fc fdd0 	bl	8000d34 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8095 	beq.w	80042cc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b6:	d00d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c0:	d008      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ca:	d003      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041cc:	2172      	movs	r1, #114	@ 0x72
 80041ce:	4863      	ldr	r0, [pc, #396]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80041d0:	f7fc fdb0 	bl	8000d34 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d4:	4b62      	ldr	r3, [pc, #392]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	61d3      	str	r3, [r2, #28]
 80041ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d118      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b56      	ldr	r3, [pc, #344]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a55      	ldr	r2, [pc, #340]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004214:	f7fd fff6 	bl	8002204 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fd fff2 	bl	8002204 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e092      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b4d      	ldr	r3, [pc, #308]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423a:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	d027      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004258:	4b41      	ldr	r3, [pc, #260]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004262:	4b41      	ldr	r3, [pc, #260]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b3f      	ldr	r3, [pc, #252]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426e:	4a3c      	ldr	r2, [pc, #240]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d014      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fd ffc1 	bl	8002204 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd ffbd 	bl	8002204 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e05b      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b30      	ldr	r3, [pc, #192]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	492a      	ldr	r1, [pc, #168]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a26      	ldr	r2, [pc, #152]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01f      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e8:	d00d      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042fc:	d003      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80042fe:	21b7      	movs	r1, #183	@ 0xb7
 8004300:	4816      	ldr	r0, [pc, #88]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004302:	f7fc fd17 	bl	8000d34 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004306:	4b16      	ldr	r3, [pc, #88]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4913      	ldr	r1, [pc, #76]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d016      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432c:	d008      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004336:	f240 1113 	movw	r1, #275	@ 0x113
 800433a:	4808      	ldr	r0, [pc, #32]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800433c:	f7fc fcfa 	bl	8000d34 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4904      	ldr	r1, [pc, #16]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	0800744c 	.word	0x0800744c
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	42420440 	.word	0x42420440

0800436c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80043a6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80043aa:	484f      	ldr	r0, [pc, #316]	@ (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80043ac:	f7fc fcc2 	bl	8000d34 <assert_failed>

  switch (PeriphClk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	f200 808a 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d045      	beq.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d075      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043ca:	e082      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      temp_reg = RCC->CFGR;
 80043cc:	4b47      	ldr	r3, [pc, #284]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043d2:	4b46      	ldr	r3, [pc, #280]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d07b      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a42      	ldr	r2, [pc, #264]	@ (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043f6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0c5b      	lsrs	r3, r3, #17
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	4a3c      	ldr	r2, [pc, #240]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8004402:	5cd3      	ldrb	r3, [r2, r3]
 8004404:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004410:	4a39      	ldr	r2, [pc, #228]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fbb2 f2f3 	udiv	r2, r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e004      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800442c:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004438:	d102      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	61bb      	str	r3, [r7, #24]
      break;
 800443e:	e04a      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = (pllclk * 2) / 3;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4a2e      	ldr	r2, [pc, #184]	@ (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
      break;
 800444e:	e042      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      temp_reg = RCC->BDCR;
 8004450:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004460:	d108      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        frequency = LSE_VALUE;
 800446c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e01f      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447e:	d109      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004480:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        frequency = LSI_VALUE;
 800448c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e00f      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449e:	d11c      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d016      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = HSE_VALUE / 128U;
 80044ac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044b0:	61bb      	str	r3, [r7, #24]
      break;
 80044b2:	e012      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044b6:	f7ff fe1d 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0b9b      	lsrs	r3, r3, #14
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	61bb      	str	r3, [r7, #24]
      break;
 80044d0:	e004      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 80044da:	bf00      	nop
    }
  }
  return (frequency);
 80044dc:	69bb      	ldr	r3, [r7, #24]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800744c 	.word	0x0800744c
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08007c94 	.word	0x08007c94
 80044f4:	08007ca4 	.word	0x08007ca4
 80044f8:	007a1200 	.word	0x007a1200
 80044fc:	003d0900 	.word	0x003d0900
 8004500:	aaaaaaab 	.word	0xaaaaaaab

08004504 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0aa      	b.n	8004670 <HAL_RTC_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_RTC_Init+0x174>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_RTC_Init+0x2a>
 8004524:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004528:	4854      	ldr	r0, [pc, #336]	@ (800467c <HAL_RTC_Init+0x178>)
 800452a:	f7fc fc03 	bl	8000d34 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <HAL_RTC_Init+0x58>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	d00e      	beq.n	800455c <HAL_RTC_Init+0x58>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004546:	d009      	beq.n	800455c <HAL_RTC_Init+0x58>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004550:	d004      	beq.n	800455c <HAL_RTC_Init+0x58>
 8004552:	f240 111f 	movw	r1, #287	@ 0x11f
 8004556:	4849      	ldr	r0, [pc, #292]	@ (800467c <HAL_RTC_Init+0x178>)
 8004558:	f7fc fbec 	bl	8000d34 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004564:	d309      	bcc.n	800457a <HAL_RTC_Init+0x76>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d004      	beq.n	800457a <HAL_RTC_Init+0x76>
 8004570:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004574:	4841      	ldr	r0, [pc, #260]	@ (800467c <HAL_RTC_Init+0x178>)
 8004576:	f7fc fbdd 	bl	8000d34 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7c5b      	ldrb	r3, [r3, #17]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fef0 	bl	8001370 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc98 	bl	8004ecc <HAL_RTC_WaitForSynchro>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e061      	b.n	8004670 <HAL_RTC_Init+0x16c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd51 	bl	8005054 <RTC_EnterInitMode>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e056      	b.n	8004670 <HAL_RTC_Init+0x16c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0207 	bic.w	r2, r2, #7
 80045d0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80045da:	4b29      	ldr	r3, [pc, #164]	@ (8004680 <HAL_RTC_Init+0x17c>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	4a28      	ldr	r2, [pc, #160]	@ (8004680 <HAL_RTC_Init+0x17c>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80045e6:	4b26      	ldr	r3, [pc, #152]	@ (8004680 <HAL_RTC_Init+0x17c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4923      	ldr	r1, [pc, #140]	@ (8004680 <HAL_RTC_Init+0x17c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d003      	beq.n	800460a <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e00e      	b.n	8004628 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800460a:	2001      	movs	r0, #1
 800460c:	f7ff feae 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 8004610:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2204      	movs	r2, #4
 800461c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e026      	b.n	8004670 <HAL_RTC_Init+0x16c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b01      	subs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	0c1a      	lsrs	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 020f 	and.w	r2, r2, #15
 8004634:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	b292      	uxth	r2, r2
 800463e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fd2f 	bl	80050a4 <RTC_ExitInitMode>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e00c      	b.n	8004670 <HAL_RTC_Init+0x16c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40002800 	.word	0x40002800
 800467c:	08007488 	.word	0x08007488
 8004680:	40006c00 	.word	0x40006c00

08004684 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_RTC_SetTime+0x20>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0cd      	b.n	8004844 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_RTC_SetTime+0x3a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d004      	beq.n	80046be <HAL_RTC_SetTime+0x3a>
 80046b4:	f240 21cb 	movw	r1, #715	@ 0x2cb
 80046b8:	4864      	ldr	r0, [pc, #400]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 80046ba:	f7fc fb3b 	bl	8000d34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	7c1b      	ldrb	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_RTC_SetTime+0x46>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0bc      	b.n	8004844 <HAL_RTC_SetTime+0x1c0>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2202      	movs	r2, #2
 80046d4:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d12e      	bne.n	800473a <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b17      	cmp	r3, #23
 80046e2:	d904      	bls.n	80046ee <HAL_RTC_SetTime+0x6a>
 80046e4:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80046e8:	4858      	ldr	r0, [pc, #352]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 80046ea:	f7fc fb23 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80046f4:	d904      	bls.n	8004700 <HAL_RTC_SetTime+0x7c>
 80046f6:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80046fa:	4854      	ldr	r0, [pc, #336]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 80046fc:	f7fc fb1a 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	789b      	ldrb	r3, [r3, #2]
 8004704:	2b3b      	cmp	r3, #59	@ 0x3b
 8004706:	d904      	bls.n	8004712 <HAL_RTC_SetTime+0x8e>
 8004708:	f240 21d6 	movw	r1, #726	@ 0x2d6
 800470c:	484f      	ldr	r0, [pc, #316]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 800470e:	f7fc fb11 	bl	8000d34 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800471c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	785b      	ldrb	r3, [r3, #1]
 8004724:	4619      	mov	r1, r3
 8004726:	460b      	mov	r3, r1
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a5b      	subs	r3, r3, r1
 800472c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800472e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004734:	4413      	add	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e045      	b.n	80047c6 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fcf5 	bl	800512e <RTC_Bcd2ToByte>
 8004744:	4603      	mov	r3, r0
 8004746:	2b17      	cmp	r3, #23
 8004748:	d904      	bls.n	8004754 <HAL_RTC_SetTime+0xd0>
 800474a:	f240 21de 	movw	r1, #734	@ 0x2de
 800474e:	483f      	ldr	r0, [pc, #252]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 8004750:	f7fc faf0 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fce8 	bl	800512e <RTC_Bcd2ToByte>
 800475e:	4603      	mov	r3, r0
 8004760:	2b3b      	cmp	r3, #59	@ 0x3b
 8004762:	d904      	bls.n	800476e <HAL_RTC_SetTime+0xea>
 8004764:	f240 21df 	movw	r1, #735	@ 0x2df
 8004768:	4838      	ldr	r0, [pc, #224]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 800476a:	f7fc fae3 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	789b      	ldrb	r3, [r3, #2]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fcdb 	bl	800512e <RTC_Bcd2ToByte>
 8004778:	4603      	mov	r3, r0
 800477a:	2b3b      	cmp	r3, #59	@ 0x3b
 800477c:	d904      	bls.n	8004788 <HAL_RTC_SetTime+0x104>
 800477e:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004782:	4832      	ldr	r0, [pc, #200]	@ (800484c <HAL_RTC_SetTime+0x1c8>)
 8004784:	f7fc fad6 	bl	8000d34 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fcce 	bl	800512e <RTC_Bcd2ToByte>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800479a:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fcc3 	bl	800512e <RTC_Bcd2ToByte>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047b4:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	789b      	ldrb	r3, [r3, #2]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fcb7 	bl	800512e <RTC_Bcd2ToByte>
 80047c0:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047c2:	4423      	add	r3, r4
 80047c4:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fbdc 	bl	8004f86 <RTC_WriteTimeCounter>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2204      	movs	r2, #4
 80047d8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e02f      	b.n	8004844 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0205 	bic.w	r2, r2, #5
 80047f2:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fbed 	bl	8004fd4 <RTC_ReadAlarmCounter>
 80047fa:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d018      	beq.n	8004836 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	429a      	cmp	r2, r3
 800480a:	d214      	bcs.n	8004836 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004812:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004816:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004818:	6939      	ldr	r1, [r7, #16]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fbf3 	bl	8005006 <RTC_WriteAlarmCounter>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2204      	movs	r2, #4
 800482a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e006      	b.n	8004844 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	08007488 	.word	0x08007488

08004850 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RTC_GetTime+0x28>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0c0      	b.n	80049fe <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_RTC_GetTime+0x42>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d004      	beq.n	8004892 <HAL_RTC_GetTime+0x42>
 8004888:	f240 312e 	movw	r1, #814	@ 0x32e
 800488c:	485e      	ldr	r0, [pc, #376]	@ (8004a08 <HAL_RTC_GetTime+0x1b8>)
 800488e:	f7fc fa51 	bl	8000d34 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0ac      	b.n	80049fe <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb3e 	bl	8004f26 <RTC_ReadTimeCounter>
 80048aa:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4a57      	ldr	r2, [pc, #348]	@ (8004a0c <HAL_RTC_GetTime+0x1bc>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	0adb      	lsrs	r3, r3, #11
 80048b6:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4b54      	ldr	r3, [pc, #336]	@ (8004a0c <HAL_RTC_GetTime+0x1bc>)
 80048bc:	fba3 1302 	umull	r1, r3, r3, r2
 80048c0:	0adb      	lsrs	r3, r3, #11
 80048c2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	4a50      	ldr	r2, [pc, #320]	@ (8004a10 <HAL_RTC_GetTime+0x1c0>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4a4b      	ldr	r2, [pc, #300]	@ (8004a0c <HAL_RTC_GetTime+0x1bc>)
 80048de:	fba2 1203 	umull	r1, r2, r2, r3
 80048e2:	0ad2      	lsrs	r2, r2, #11
 80048e4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80048e8:	fb01 f202 	mul.w	r2, r1, r2
 80048ec:	1a9a      	subs	r2, r3, r2
 80048ee:	4b48      	ldr	r3, [pc, #288]	@ (8004a10 <HAL_RTC_GetTime+0x1c0>)
 80048f0:	fba3 1302 	umull	r1, r3, r3, r2
 80048f4:	0959      	lsrs	r1, r3, #5
 80048f6:	460b      	mov	r3, r1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	1ad1      	subs	r1, r2, r3
 8004900:	b2ca      	uxtb	r2, r1
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b17      	cmp	r3, #23
 800490a:	d955      	bls.n	80049b8 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4a41      	ldr	r2, [pc, #260]	@ (8004a14 <HAL_RTC_GetTime+0x1c4>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a14 <HAL_RTC_GetTime+0x1c4>)
 800491c:	fba3 2301 	umull	r2, r3, r3, r1
 8004920:	091a      	lsrs	r2, r3, #4
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1aca      	subs	r2, r1, r3
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fb4e 	bl	8004fd4 <RTC_ReadAlarmCounter>
 8004938:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d008      	beq.n	8004954 <HAL_RTC_GetTime+0x104>
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	429a      	cmp	r2, r3
 8004948:	d904      	bls.n	8004954 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e002      	b.n	800495a <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a18 <HAL_RTC_GetTime+0x1c8>)
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fb0b 	bl	8004f86 <RTC_WriteTimeCounter>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e041      	b.n	80049fe <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d00c      	beq.n	800499c <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800498a:	69f9      	ldr	r1, [r7, #28]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fb3a 	bl	8005006 <RTC_WriteAlarmCounter>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e030      	b.n	80049fe <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fb31 	bl	8005006 <RTC_WriteAlarmCounter>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e027      	b.n	80049fe <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fbd9 	bl	8005168 <RTC_DateUpdate>
 80049b6:	e003      	b.n	80049c0 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01a      	beq.n	80049fc <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb92 	bl	80050f4 <RTC_ByteToBcd2>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fb89 	bl	80050f4 <RTC_ByteToBcd2>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	789b      	ldrb	r3, [r3, #2]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fb80 	bl	80050f4 <RTC_ByteToBcd2>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	08007488 	.word	0x08007488
 8004a0c:	91a2b3c5 	.word	0x91a2b3c5
 8004a10:	88888889 	.word	0x88888889
 8004a14:	aaaaaaab 	.word	0xaaaaaaab
 8004a18:	00015180 	.word	0x00015180

08004a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_RTC_SetDate+0x24>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0fc      	b.n	8004c3e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <HAL_RTC_SetDate+0x3e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d004      	beq.n	8004a5a <HAL_RTC_SetDate+0x3e>
 8004a50:	f240 319d 	movw	r1, #925	@ 0x39d
 8004a54:	487c      	ldr	r0, [pc, #496]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004a56:	f7fc f96d 	bl	8000d34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	7c1b      	ldrb	r3, [r3, #16]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_RTC_SetDate+0x4a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0eb      	b.n	8004c3e <HAL_RTC_SetDate+0x222>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d12f      	bne.n	8004ad8 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	78db      	ldrb	r3, [r3, #3]
 8004a7c:	2b63      	cmp	r3, #99	@ 0x63
 8004a7e:	d904      	bls.n	8004a8a <HAL_RTC_SetDate+0x6e>
 8004a80:	f240 31a6 	movw	r1, #934	@ 0x3a6
 8004a84:	4870      	ldr	r0, [pc, #448]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004a86:	f7fc f955 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_RTC_SetDate+0x7e>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d904      	bls.n	8004aa4 <HAL_RTC_SetDate+0x88>
 8004a9a:	f240 31a7 	movw	r1, #935	@ 0x3a7
 8004a9e:	486a      	ldr	r0, [pc, #424]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004aa0:	f7fc f948 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RTC_SetDate+0x98>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	789b      	ldrb	r3, [r3, #2]
 8004ab0:	2b1f      	cmp	r3, #31
 8004ab2:	d904      	bls.n	8004abe <HAL_RTC_SetDate+0xa2>
 8004ab4:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8004ab8:	4863      	ldr	r0, [pc, #396]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004aba:	f7fc f93b 	bl	8000d34 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	78da      	ldrb	r2, [r3, #3]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785a      	ldrb	r2, [r3, #1]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	789a      	ldrb	r2, [r3, #2]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	739a      	strb	r2, [r3, #14]
 8004ad6:	e051      	b.n	8004b7c <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fb26 	bl	800512e <RTC_Bcd2ToByte>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b63      	cmp	r3, #99	@ 0x63
 8004ae6:	d904      	bls.n	8004af2 <HAL_RTC_SetDate+0xd6>
 8004ae8:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8004aec:	4856      	ldr	r0, [pc, #344]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004aee:	f7fc f921 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fb19 	bl	800512e <RTC_Bcd2ToByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_RTC_SetDate+0xf6>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fb11 	bl	800512e <RTC_Bcd2ToByte>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d904      	bls.n	8004b1c <HAL_RTC_SetDate+0x100>
 8004b12:	f240 31b2 	movw	r1, #946	@ 0x3b2
 8004b16:	484c      	ldr	r0, [pc, #304]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004b18:	f7fc f90c 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	789b      	ldrb	r3, [r3, #2]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fb04 	bl	800512e <RTC_Bcd2ToByte>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_RTC_SetDate+0x120>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fafc 	bl	800512e <RTC_Bcd2ToByte>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b1f      	cmp	r3, #31
 8004b3a:	d904      	bls.n	8004b46 <HAL_RTC_SetDate+0x12a>
 8004b3c:	f240 31b3 	movw	r1, #947	@ 0x3b3
 8004b40:	4841      	ldr	r0, [pc, #260]	@ (8004c48 <HAL_RTC_SetDate+0x22c>)
 8004b42:	f7fc f8f7 	bl	8000d34 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	78db      	ldrb	r3, [r3, #3]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 faef 	bl	800512e <RTC_Bcd2ToByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fae6 	bl	800512e <RTC_Bcd2ToByte>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	789b      	ldrb	r3, [r3, #2]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fadd 	bl	800512e <RTC_Bcd2ToByte>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	7bdb      	ldrb	r3, [r3, #15]
 8004b80:	4618      	mov	r0, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	7b59      	ldrb	r1, [r3, #13]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	7b9b      	ldrb	r3, [r3, #14]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 fbc8 	bl	8005320 <RTC_WeekDayNum>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	7b1a      	ldrb	r2, [r3, #12]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f9c0 	bl	8004f26 <RTC_ReadTimeCounter>
 8004ba6:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4a28      	ldr	r2, [pc, #160]	@ (8004c4c <HAL_RTC_SetDate+0x230>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	0adb      	lsrs	r3, r3, #11
 8004bb2:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b18      	cmp	r3, #24
 8004bb8:	d93a      	bls.n	8004c30 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4a24      	ldr	r2, [pc, #144]	@ (8004c50 <HAL_RTC_SetDate+0x234>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_RTC_SetDate+0x238>)
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004bd0:	69f9      	ldr	r1, [r7, #28]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f9d7 	bl	8004f86 <RTC_WriteTimeCounter>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2204      	movs	r2, #4
 8004be2:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e027      	b.n	8004c3e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f9f0 	bl	8004fd4 <RTC_ReadAlarmCounter>
 8004bf4:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d018      	beq.n	8004c30 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d214      	bcs.n	8004c30 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004c0c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004c10:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f9f6 	bl	8005006 <RTC_WriteAlarmCounter>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2204      	movs	r2, #4
 8004c24:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e006      	b.n	8004c3e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	08007488 	.word	0x08007488
 8004c4c:	91a2b3c5 	.word	0x91a2b3c5
 8004c50:	aaaaaaab 	.word	0xaaaaaaab
 8004c54:	00015180 	.word	0x00015180

08004c58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b089      	sub	sp, #36	@ 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004c68:	f107 0314 	add.w	r3, r7, #20
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	460a      	mov	r2, r1
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	460a      	mov	r2, r1
 8004c74:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_RTC_SetAlarm_IT+0x2a>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0ef      	b.n	8004e66 <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_RTC_SetAlarm_IT+0x44>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d004      	beq.n	8004c9c <HAL_RTC_SetAlarm_IT+0x44>
 8004c92:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 8004c96:	4876      	ldr	r0, [pc, #472]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004c98:	f7fc f84c 	bl	8000d34 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <HAL_RTC_SetAlarm_IT+0x56>
 8004ca4:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 8004ca8:	4871      	ldr	r0, [pc, #452]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004caa:	f7fc f843 	bl	8000d34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	7c1b      	ldrb	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RTC_SetAlarm_IT+0x62>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e0d5      	b.n	8004e66 <HAL_RTC_SetAlarm_IT+0x20e>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fdbe 	bl	8004850 <HAL_RTC_GetTime>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0c3      	b.n	8004e66 <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cde:	7d3b      	ldrb	r3, [r7, #20]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004ce6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004cea:	7d7b      	ldrb	r3, [r7, #21]
 8004cec:	4619      	mov	r1, r3
 8004cee:	460b      	mov	r3, r1
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a5b      	subs	r3, r3, r1
 8004cf4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cf6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004cf8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cfa:	4413      	add	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d12e      	bne.n	8004d62 <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b17      	cmp	r3, #23
 8004d0a:	d904      	bls.n	8004d16 <HAL_RTC_SetAlarm_IT+0xbe>
 8004d0c:	f240 41c2 	movw	r1, #1218	@ 0x4c2
 8004d10:	4857      	ldr	r0, [pc, #348]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004d12:	f7fc f80f 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	2b3b      	cmp	r3, #59	@ 0x3b
 8004d1c:	d904      	bls.n	8004d28 <HAL_RTC_SetAlarm_IT+0xd0>
 8004d1e:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8004d22:	4853      	ldr	r0, [pc, #332]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004d24:	f7fc f806 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	789b      	ldrb	r3, [r3, #2]
 8004d2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8004d2e:	d904      	bls.n	8004d3a <HAL_RTC_SetAlarm_IT+0xe2>
 8004d30:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8004d34:	484e      	ldr	r0, [pc, #312]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004d36:	f7fb fffd 	bl	8000d34 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004d44:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	460b      	mov	r3, r1
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a5b      	subs	r3, r3, r1
 8004d54:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004d56:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e045      	b.n	8004dee <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f9e1 	bl	800512e <RTC_Bcd2ToByte>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b17      	cmp	r3, #23
 8004d70:	d904      	bls.n	8004d7c <HAL_RTC_SetAlarm_IT+0x124>
 8004d72:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8004d76:	483e      	ldr	r0, [pc, #248]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004d78:	f7fb ffdc 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f9d4 	bl	800512e <RTC_Bcd2ToByte>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b3b      	cmp	r3, #59	@ 0x3b
 8004d8a:	d904      	bls.n	8004d96 <HAL_RTC_SetAlarm_IT+0x13e>
 8004d8c:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8004d90:	4837      	ldr	r0, [pc, #220]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004d92:	f7fb ffcf 	bl	8000d34 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	789b      	ldrb	r3, [r3, #2]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f9c7 	bl	800512e <RTC_Bcd2ToByte>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b3b      	cmp	r3, #59	@ 0x3b
 8004da4:	d904      	bls.n	8004db0 <HAL_RTC_SetAlarm_IT+0x158>
 8004da6:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8004daa:	4831      	ldr	r0, [pc, #196]	@ (8004e70 <HAL_RTC_SetAlarm_IT+0x218>)
 8004dac:	f7fb ffc2 	bl	8000d34 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f9ba 	bl	800512e <RTC_Bcd2ToByte>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004dc2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f9af 	bl	800512e <RTC_Bcd2ToByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004ddc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	789b      	ldrb	r3, [r3, #2]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f9a3 	bl	800512e <RTC_Bcd2ToByte>
 8004de8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004dea:	4423      	add	r3, r4
 8004dec:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d205      	bcs.n	8004e02 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004dfc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004e00:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e02:	69f9      	ldr	r1, [r7, #28]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8fe 	bl	8005006 <RTC_WriteAlarmCounter>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2204      	movs	r2, #4
 8004e14:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e022      	b.n	8004e66 <HAL_RTC_SetAlarm_IT+0x20e>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0202 	bic.w	r2, r2, #2
 8004e2e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0202 	orr.w	r2, r2, #2
 8004e3e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_RTC_SetAlarm_IT+0x21c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0b      	ldr	r2, [pc, #44]	@ (8004e74 <HAL_RTC_SetAlarm_IT+0x21c>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RTC_SetAlarm_IT+0x21c>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a08      	ldr	r2, [pc, #32]	@ (8004e74 <HAL_RTC_SetAlarm_IT+0x21c>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e56:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd90      	pop	{r4, r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	08007488 	.word	0x08007488
 8004e74:	40010400 	.word	0x40010400

08004e78 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fb fcab 	bl	80007f8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0202 	bic.w	r2, r2, #2
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004eb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004eb8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	745a      	strb	r2, [r3, #17]
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e01d      	b.n	8004f1e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0208 	bic.w	r2, r2, #8
 8004ef0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004ef2:	f7fd f987 	bl	8002204 <HAL_GetTick>
 8004ef6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004ef8:	e009      	b.n	8004f0e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004efa:	f7fd f983 	bl	8002204 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f08:	d901      	bls.n	8004f0e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e007      	b.n	8004f1e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ee      	beq.n	8004efa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	827b      	strh	r3, [r7, #18]
 8004f32:	2300      	movs	r3, #0
 8004f34:	823b      	strh	r3, [r7, #16]
 8004f36:	2300      	movs	r3, #0
 8004f38:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004f56:	8a7a      	ldrh	r2, [r7, #18]
 8004f58:	8a3b      	ldrh	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d008      	beq.n	8004f70 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004f5e:	8a3b      	ldrh	r3, [r7, #16]
 8004f60:	041a      	lsls	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e004      	b.n	8004f7a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004f70:	8a7b      	ldrh	r3, [r7, #18]
 8004f72:	041a      	lsls	r2, r3, #16
 8004f74:	89fb      	ldrh	r3, [r7, #14]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004f7a:	697b      	ldr	r3, [r7, #20]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f85d 	bl	8005054 <RTC_EnterInitMode>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e011      	b.n	8004fca <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	0c12      	lsrs	r2, r2, #16
 8004fae:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f872 	bl	80050a4 <RTC_ExitInitMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	81fb      	strh	r3, [r7, #14]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	041a      	lsls	r2, r3, #16
 8004ff8:	89bb      	ldrh	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f81d 	bl	8005054 <RTC_EnterInitMode>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e011      	b.n	800504a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	0c12      	lsrs	r2, r2, #16
 800502e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b292      	uxth	r2, r2
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f832 	bl	80050a4 <RTC_ExitInitMode>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005060:	f7fd f8d0 	bl	8002204 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005066:	e009      	b.n	800507c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005068:	f7fd f8cc 	bl	8002204 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005076:	d901      	bls.n	800507c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e00f      	b.n	800509c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ee      	beq.n	8005068 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0210 	orr.w	r2, r2, #16
 8005098:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0210 	bic.w	r2, r2, #16
 80050be:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80050c0:	f7fd f8a0 	bl	8002204 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050c6:	e009      	b.n	80050dc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050c8:	f7fd f89c 	bl	8002204 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050d6:	d901      	bls.n	80050dc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e007      	b.n	80050ec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ee      	beq.n	80050c8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005102:	e005      	b.n	8005110 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	3b0a      	subs	r3, #10
 800510e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	2b09      	cmp	r3, #9
 8005114:	d8f6      	bhi.n	8005104 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	b2da      	uxtb	r2, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	4313      	orrs	r3, r2
 8005122:	b2db      	uxtb	r3, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	4413      	add	r3, r2
 800515c:	b2db      	uxtb	r3, r3
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7bdb      	ldrb	r3, [r3, #15]
 8005186:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7b5b      	ldrb	r3, [r3, #13]
 800518c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7b9b      	ldrb	r3, [r3, #14]
 8005192:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	e06f      	b.n	800527a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d011      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d00e      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d00b      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b07      	cmp	r3, #7
 80051b0:	d008      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d005      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b0a      	cmp	r3, #10
 80051bc:	d002      	beq.n	80051c4 <RTC_DateUpdate+0x5c>
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d117      	bne.n	80051f4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b1e      	cmp	r3, #30
 80051c8:	d803      	bhi.n	80051d2 <RTC_DateUpdate+0x6a>
      {
        day++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80051d0:	e050      	b.n	8005274 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d005      	beq.n	80051e4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	3301      	adds	r3, #1
 80051dc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80051e2:	e047      	b.n	8005274 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80051e4:	2301      	movs	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80051e8:	2301      	movs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
          year++;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3301      	adds	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80051f2:	e03f      	b.n	8005274 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d008      	beq.n	800520c <RTC_DateUpdate+0xa4>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d005      	beq.n	800520c <RTC_DateUpdate+0xa4>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b09      	cmp	r3, #9
 8005204:	d002      	beq.n	800520c <RTC_DateUpdate+0xa4>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b0b      	cmp	r3, #11
 800520a:	d10c      	bne.n	8005226 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b1d      	cmp	r3, #29
 8005210:	d803      	bhi.n	800521a <RTC_DateUpdate+0xb2>
      {
        day++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005218:	e02c      	b.n	8005274 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3301      	adds	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005224:	e026      	b.n	8005274 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d123      	bne.n	8005274 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b1b      	cmp	r3, #27
 8005230:	d803      	bhi.n	800523a <RTC_DateUpdate+0xd2>
      {
        day++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e01c      	b.n	8005274 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b1c      	cmp	r3, #28
 800523e:	d111      	bne.n	8005264 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	b29b      	uxth	r3, r3
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f839 	bl	80052bc <RTC_IsLeapYear>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e00d      	b.n	8005274 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	3301      	adds	r3, #1
 800525c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800525e:	2301      	movs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e007      	b.n	8005274 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b1d      	cmp	r3, #29
 8005268:	d104      	bne.n	8005274 <RTC_DateUpdate+0x10c>
      {
        month++;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005270:	2301      	movs	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3301      	adds	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d38b      	bcc.n	800519a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6978      	ldr	r0, [r7, #20]
 80052a6:	f000 f83b 	bl	8005320 <RTC_WeekDayNum>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	731a      	strb	r2, [r3, #12]
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e01d      	b.n	8005312 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	4a10      	ldr	r2, [pc, #64]	@ (800531c <RTC_IsLeapYear+0x60>)
 80052da:	fba2 1203 	umull	r1, r2, r2, r3
 80052de:	0952      	lsrs	r2, r2, #5
 80052e0:	2164      	movs	r1, #100	@ 0x64
 80052e2:	fb01 f202 	mul.w	r2, r1, r2
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00f      	b.n	8005312 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	4a09      	ldr	r2, [pc, #36]	@ (800531c <RTC_IsLeapYear+0x60>)
 80052f6:	fba2 1203 	umull	r1, r2, r2, r3
 80052fa:	09d2      	lsrs	r2, r2, #7
 80052fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005300:	fb01 f202 	mul.w	r2, r1, r2
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005310:	2300      	movs	r3, #0
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	51eb851f 	.word	0x51eb851f

08005320 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
 800532c:	4613      	mov	r3, r2
 800532e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800533e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d82d      	bhi.n	80053a2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <RTC_WeekDayNum+0xe4>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	085a      	lsrs	r2, r3, #1
 800535a:	78bb      	ldrb	r3, [r7, #2]
 800535c:	441a      	add	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	441a      	add	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3b01      	subs	r3, #1
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3b01      	subs	r3, #1
 800536e:	4926      	ldr	r1, [pc, #152]	@ (8005408 <RTC_WeekDayNum+0xe8>)
 8005370:	fba1 1303 	umull	r1, r3, r1, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	1ad2      	subs	r2, r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3b01      	subs	r3, #1
 800537c:	4922      	ldr	r1, [pc, #136]	@ (8005408 <RTC_WeekDayNum+0xe8>)
 800537e:	fba1 1303 	umull	r1, r3, r1, r3
 8005382:	09db      	lsrs	r3, r3, #7
 8005384:	4413      	add	r3, r2
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	4b20      	ldr	r3, [pc, #128]	@ (800540c <RTC_WeekDayNum+0xec>)
 800538a:	fba3 1302 	umull	r1, r3, r3, r2
 800538e:	1ad1      	subs	r1, r2, r3
 8005390:	0849      	lsrs	r1, r1, #1
 8005392:	440b      	add	r3, r1
 8005394:	0899      	lsrs	r1, r3, #2
 8005396:	460b      	mov	r3, r1
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e029      	b.n	80053f6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	4a15      	ldr	r2, [pc, #84]	@ (8005404 <RTC_WeekDayNum+0xe4>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	085a      	lsrs	r2, r3, #1
 80053b6:	78bb      	ldrb	r3, [r7, #2]
 80053b8:	441a      	add	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	441a      	add	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4910      	ldr	r1, [pc, #64]	@ (8005408 <RTC_WeekDayNum+0xe8>)
 80053c8:	fba1 1303 	umull	r1, r3, r1, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	490d      	ldr	r1, [pc, #52]	@ (8005408 <RTC_WeekDayNum+0xe8>)
 80053d4:	fba1 1303 	umull	r1, r3, r1, r3
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	4413      	add	r3, r2
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	4b0b      	ldr	r3, [pc, #44]	@ (800540c <RTC_WeekDayNum+0xec>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	1ad1      	subs	r1, r2, r3
 80053e6:	0849      	lsrs	r1, r1, #1
 80053e8:	440b      	add	r3, r1
 80053ea:	0899      	lsrs	r1, r3, #2
 80053ec:	460b      	mov	r3, r1
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	1a5b      	subs	r3, r3, r1
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	b2db      	uxtb	r3, r3
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	38e38e39 	.word	0x38e38e39
 8005408:	51eb851f 	.word	0x51eb851f
 800540c:	24924925 	.word	0x24924925

08005410 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d027      	beq.n	8005476 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f824 	bl	8005490 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0204 	mvn.w	r2, #4
 8005450:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2204      	movs	r2, #4
 8005456:	745a      	strb	r2, [r3, #17]
 8005458:	e005      	b.n	8005466 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f80f 	bl	800547e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e095      	b.n	80055e2 <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d02c      	beq.n	8005518 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a4a      	ldr	r2, [pc, #296]	@ (80055ec <HAL_UART_Init+0x148>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_UART_Init+0x42>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a48      	ldr	r2, [pc, #288]	@ (80055f0 <HAL_UART_Init+0x14c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_UART_Init+0x42>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a47      	ldr	r2, [pc, #284]	@ (80055f4 <HAL_UART_Init+0x150>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_UART_Init+0x42>
 80054dc:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80054e0:	4845      	ldr	r0, [pc, #276]	@ (80055f8 <HAL_UART_Init+0x154>)
 80054e2:	f7fb fc27 	bl	8000d34 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d028      	beq.n	8005540 <HAL_UART_Init+0x9c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f6:	d023      	beq.n	8005540 <HAL_UART_Init+0x9c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005500:	d01e      	beq.n	8005540 <HAL_UART_Init+0x9c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800550a:	d019      	beq.n	8005540 <HAL_UART_Init+0x9c>
 800550c:	f240 116f 	movw	r1, #367	@ 0x16f
 8005510:	4839      	ldr	r0, [pc, #228]	@ (80055f8 <HAL_UART_Init+0x154>)
 8005512:	f7fb fc0f 	bl	8000d34 <assert_failed>
 8005516:	e013      	b.n	8005540 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a33      	ldr	r2, [pc, #204]	@ (80055ec <HAL_UART_Init+0x148>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00e      	beq.n	8005540 <HAL_UART_Init+0x9c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a32      	ldr	r2, [pc, #200]	@ (80055f0 <HAL_UART_Init+0x14c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d009      	beq.n	8005540 <HAL_UART_Init+0x9c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a30      	ldr	r2, [pc, #192]	@ (80055f4 <HAL_UART_Init+0x150>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_UART_Init+0x9c>
 8005536:	f240 1173 	movw	r1, #371	@ 0x173
 800553a:	482f      	ldr	r0, [pc, #188]	@ (80055f8 <HAL_UART_Init+0x154>)
 800553c:	f7fb fbfa 	bl	8000d34 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_UART_Init+0xb8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005550:	d004      	beq.n	800555c <HAL_UART_Init+0xb8>
 8005552:	f240 1175 	movw	r1, #373	@ 0x175
 8005556:	4828      	ldr	r0, [pc, #160]	@ (80055f8 <HAL_UART_Init+0x154>)
 8005558:	f7fb fbec 	bl	8000d34 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fc fd35 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2224      	movs	r2, #36	@ 0x24
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800558c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 ff8e 	bl	80064b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40013800 	.word	0x40013800
 80055f0:	40004400 	.word	0x40004400
 80055f4:	40004800 	.word	0x40004800
 80055f8:	080074c0 	.word	0x080074c0

080055fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	@ 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b20      	cmp	r3, #32
 800561a:	d16d      	bne.n	80056f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Transmit+0x2c>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e066      	b.n	80056fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2221      	movs	r2, #33	@ 0x21
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563a:	f7fc fde3 	bl	8002204 <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005654:	d108      	bne.n	8005668 <HAL_UART_Transmit+0x6c>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e003      	b.n	8005670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005670:	e02a      	b.n	80056c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fcd4 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e036      	b.n	80056fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	3302      	adds	r3, #2
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	e007      	b.n	80056ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cf      	bne.n	8005672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	2140      	movs	r1, #64	@ 0x40
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fca4 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b08a      	sub	sp, #40	@ 0x28
 8005706:	af02      	add	r7, sp, #8
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	d17c      	bne.n	800581c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_Receive+0x2c>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e075      	b.n	800581e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2222      	movs	r2, #34	@ 0x22
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005746:	f7fc fd5d 	bl	8002204 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005760:	d108      	bne.n	8005774 <HAL_UART_Receive+0x72>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e003      	b.n	800577c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800577c:	e043      	b.n	8005806 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2120      	movs	r1, #32
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fc4e 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e042      	b.n	800581e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3302      	adds	r3, #2
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e01f      	b.n	80057f8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c0:	d007      	beq.n	80057d2 <HAL_UART_Receive+0xd0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_UART_Receive+0xde>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e008      	b.n	80057f2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3301      	adds	r3, #1
 80057f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1b6      	bne.n	800577e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	4613      	mov	r3, r2
 8005832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b20      	cmp	r3, #32
 800583e:	d121      	bne.n	8005884 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_UART_Transmit_IT+0x26>
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e01a      	b.n	8005886 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2221      	movs	r2, #33	@ 0x21
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800587e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	f040 80c0 	bne.w	8005a2e <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UARTEx_ReceiveToIdle+0x2a>
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0b8      	b.n	8005a30 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2222      	movs	r2, #34	@ 0x22
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d8:	f7fc fc94 	bl	8002204 <HAL_GetTick>
 80058dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f2:	d108      	bne.n	8005906 <HAL_UARTEx_ReceiveToIdle+0x76>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e003      	b.n	800590e <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005914:	e077      	b.n	8005a06 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b10      	cmp	r3, #16
 8005922:	d117      	bne.n	8005954 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2202      	movs	r2, #2
 8005946:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e06d      	b.n	8005a30 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d13c      	bne.n	80059dc <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	b29a      	uxth	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3302      	adds	r3, #2
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e01f      	b.n	80059c2 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598a:	d007      	beq.n	800599c <HAL_UARTEx_ReceiveToIdle+0x10c>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_UARTEx_ReceiveToIdle+0x11a>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e008      	b.n	80059bc <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d010      	beq.n	8005a06 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fc fc0e 	bl	8002204 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <HAL_UARTEx_ReceiveToIdle+0x16a>
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e014      	b.n	8005a30 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d182      	bne.n	8005916 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e000      	b.n	8005a30 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08c      	sub	sp, #48	@ 0x30
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d14a      	bne.n	8005ae8 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e043      	b.n	8005aea <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fb46 	bl	8006106 <UART_Start_Receive_IT>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005a80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d12c      	bne.n	8005ae2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d125      	bne.n	8005adc <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f043 0310 	orr.w	r3, r3, #16
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ac8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6a39      	ldr	r1, [r7, #32]
 8005acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005ada:	e002      	b.n	8005ae2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ae6:	e000      	b.n	8005aea <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3730      	adds	r7, #48	@ 0x30
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b0ba      	sub	sp, #232	@ 0xe8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_UART_IRQHandler+0x66>
 8005b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fbed 	bl	8006332 <UART_Receive_IT>
      return;
 8005b58:	e25b      	b.n	8006012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80de 	beq.w	8005d20 <HAL_UART_IRQHandler+0x22c>
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80d1 	beq.w	8005d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xae>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xd2>
 8005bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_UART_IRQHandler+0xf6>
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <HAL_UART_IRQHandler+0x126>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	f043 0208 	orr.w	r2, r3, #8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 81f2 	beq.w	8006008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_UART_IRQHandler+0x14e>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb78 	bl	8006332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <HAL_UART_IRQHandler+0x17a>
 8005c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04f      	beq.n	8005d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa82 	bl	8006178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d041      	beq.n	8005d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d9      	bne.n	8005c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d013      	beq.n	8005cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed4 <HAL_UART_IRQHandler+0x3e0>)
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fc fc34 	bl	8002550 <HAL_DMA_Abort_IT>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00e      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f98a 	bl	8006018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e00a      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f986 	bl	8006018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	e006      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f982 	bl	8006018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d1a:	e175      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	bf00      	nop
    return;
 8005d1e:	e173      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	f040 814f 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8148 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8141 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80b6 	beq.w	8005ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8145 	beq.w	800600c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f080 813e 	bcs.w	800600c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	f000 8088 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005dd0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1d9      	bne.n	8005da4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e14:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e1      	bne.n	8005df0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e3      	bne.n	8005e2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e84:	f023 0310 	bic.w	r3, r3, #16
 8005e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e98:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e3      	bne.n	8005e72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fc fb12 	bl	80024d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fa fcea 	bl	80008a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ed0:	e09c      	b.n	800600c <HAL_UART_IRQHandler+0x518>
 8005ed2:	bf00      	nop
 8005ed4:	0800623d 	.word	0x0800623d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 808e 	beq.w	8006010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8089 	beq.w	8006010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f22:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e3      	bne.n	8005efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	623b      	str	r3, [r7, #32]
   return(result);
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fa0:	61fa      	str	r2, [r7, #28]
 8005fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	617b      	str	r3, [r7, #20]
   return(result);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e3      	bne.n	8005f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fa fc6f 	bl	80008a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fc6:	e023      	b.n	8006010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x4f4>
 8005fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f93f 	bl	8006264 <UART_Transmit_IT>
    return;
 8005fe6:	e014      	b.n	8006012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <HAL_UART_IRQHandler+0x51e>
 8005ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f97e 	bl	8006302 <UART_EndTransmit_IT>
    return;
 8006006:	e004      	b.n	8006012 <HAL_UART_IRQHandler+0x51e>
    return;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_UART_IRQHandler+0x51e>
      return;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_UART_IRQHandler+0x51e>
      return;
 8006010:	bf00      	nop
  }
}
 8006012:	37e8      	adds	r7, #232	@ 0xe8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b090      	sub	sp, #64	@ 0x40
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	e050      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d04c      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0x30>
 800604a:	f7fc f8db 	bl	8002204 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006056:	429a      	cmp	r2, r3
 8006058:	d241      	bcs.n	80060de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800607a:	637a      	str	r2, [r7, #52]	@ 0x34
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006080:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	613b      	str	r3, [r7, #16]
   return(result);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ae:	623a      	str	r2, [r7, #32]
 80060b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	69f9      	ldr	r1, [r7, #28]
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e00f      	b.n	80060fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d09f      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3740      	adds	r7, #64	@ 0x40
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2222      	movs	r2, #34	@ 0x22
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800614a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0220 	orr.w	r2, r2, #32
 800616a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b095      	sub	sp, #84	@ 0x54
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80061a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3314      	adds	r3, #20
 80061ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d119      	bne.n	8006224 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	647b      	str	r3, [r7, #68]	@ 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006210:	61ba      	str	r2, [r7, #24]
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	613b      	str	r3, [r7, #16]
   return(result);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006232:	bf00      	nop
 8006234:	3754      	adds	r7, #84	@ 0x54
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fede 	bl	8006018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b21      	cmp	r3, #33	@ 0x21
 8006276:	d13e      	bne.n	80062f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006280:	d114      	bne.n	80062ac <UART_Transmit_IT+0x48>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d110      	bne.n	80062ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800629e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	1c9a      	adds	r2, r3, #2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	621a      	str	r2, [r3, #32]
 80062aa:	e008      	b.n	80062be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6211      	str	r1, [r2, #32]
 80062b6:	781a      	ldrb	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4619      	mov	r1, r3
 80062cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10f      	bne.n	80062f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
  }
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fa fa9a 	bl	800085c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b08c      	sub	sp, #48	@ 0x30
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b22      	cmp	r3, #34	@ 0x22
 8006344:	f040 80ae 	bne.w	80064a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006350:	d117      	bne.n	8006382 <UART_Receive_IT+0x50>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006370:	b29a      	uxth	r2, r3
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	1c9a      	adds	r2, r3, #2
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006380:	e026      	b.n	80063d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006394:	d007      	beq.n	80063a6 <UART_Receive_IT+0x74>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <UART_Receive_IT+0x82>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e008      	b.n	80063c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29b      	uxth	r3, r3
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4619      	mov	r1, r3
 80063de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d15d      	bne.n	80064a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0220 	bic.w	r2, r2, #32
 80063f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006426:	2b01      	cmp	r3, #1
 8006428:	d135      	bne.n	8006496 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	613b      	str	r3, [r7, #16]
   return(result);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006450:	623a      	str	r2, [r7, #32]
 8006452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	69f9      	ldr	r1, [r7, #28]
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	61bb      	str	r3, [r7, #24]
   return(result);
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b10      	cmp	r3, #16
 8006470:	d10a      	bne.n	8006488 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fa fa08 	bl	80008a4 <HAL_UARTEx_RxEventCallback>
 8006494:	e002      	b.n	800649c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa f9fa 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e002      	b.n	80064a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3730      	adds	r7, #48	@ 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a5f      	ldr	r2, [pc, #380]	@ (800663c <UART_SetConfig+0x18c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d904      	bls.n	80064cc <UART_SetConfig+0x1c>
 80064c2:	f640 6166 	movw	r1, #3686	@ 0xe66
 80064c6:	485e      	ldr	r0, [pc, #376]	@ (8006640 <UART_SetConfig+0x190>)
 80064c8:	f7fa fc34 	bl	8000d34 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <UART_SetConfig+0x38>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064dc:	d004      	beq.n	80064e8 <UART_SetConfig+0x38>
 80064de:	f640 6167 	movw	r1, #3687	@ 0xe67
 80064e2:	4857      	ldr	r0, [pc, #348]	@ (8006640 <UART_SetConfig+0x190>)
 80064e4:	f7fa fc26 	bl	8000d34 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <UART_SetConfig+0x5e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064f8:	d009      	beq.n	800650e <UART_SetConfig+0x5e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006502:	d004      	beq.n	800650e <UART_SetConfig+0x5e>
 8006504:	f640 6168 	movw	r1, #3688	@ 0xe68
 8006508:	484d      	ldr	r0, [pc, #308]	@ (8006640 <UART_SetConfig+0x190>)
 800650a:	f7fa fc13 	bl	8000d34 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <UART_SetConfig+0x74>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <UART_SetConfig+0x7e>
 8006524:	f640 6169 	movw	r1, #3689	@ 0xe69
 8006528:	4845      	ldr	r0, [pc, #276]	@ (8006640 <UART_SetConfig+0x190>)
 800652a:	f7fa fc03 	bl	8000d34 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006560:	f023 030c 	bic.w	r3, r3, #12
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	430b      	orrs	r3, r1
 800656c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2e      	ldr	r2, [pc, #184]	@ (8006644 <UART_SetConfig+0x194>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d103      	bne.n	8006596 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800658e:	f7fd fdb1 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	e002      	b.n	800659c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7fd fd99 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 800659a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009a      	lsls	r2, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	4a25      	ldr	r2, [pc, #148]	@ (8006648 <UART_SetConfig+0x198>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	0119      	lsls	r1, r3, #4
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009a      	lsls	r2, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80065d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <UART_SetConfig+0x198>)
 80065d4:	fba3 0302 	umull	r0, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2064      	movs	r0, #100	@ 0x64
 80065dc:	fb00 f303 	mul.w	r3, r0, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	3332      	adds	r3, #50	@ 0x32
 80065e6:	4a18      	ldr	r2, [pc, #96]	@ (8006648 <UART_SetConfig+0x198>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065f2:	4419      	add	r1, r3
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009a      	lsls	r2, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	fbb2 f2f3 	udiv	r2, r2, r3
 800660a:	4b0f      	ldr	r3, [pc, #60]	@ (8006648 <UART_SetConfig+0x198>)
 800660c:	fba3 0302 	umull	r0, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	2064      	movs	r0, #100	@ 0x64
 8006614:	fb00 f303 	mul.w	r3, r0, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	3332      	adds	r3, #50	@ 0x32
 800661e:	4a0a      	ldr	r2, [pc, #40]	@ (8006648 <UART_SetConfig+0x198>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	440a      	add	r2, r1
 8006630:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	0044aa20 	.word	0x0044aa20
 8006640:	080074c0 	.word	0x080074c0
 8006644:	40013800 	.word	0x40013800
 8006648:	51eb851f 	.word	0x51eb851f

0800664c <siprintf>:
 800664c:	b40e      	push	{r1, r2, r3}
 800664e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006652:	b500      	push	{lr}
 8006654:	b09c      	sub	sp, #112	@ 0x70
 8006656:	ab1d      	add	r3, sp, #116	@ 0x74
 8006658:	9002      	str	r0, [sp, #8]
 800665a:	9006      	str	r0, [sp, #24]
 800665c:	9107      	str	r1, [sp, #28]
 800665e:	9104      	str	r1, [sp, #16]
 8006660:	4808      	ldr	r0, [pc, #32]	@ (8006684 <siprintf+0x38>)
 8006662:	4909      	ldr	r1, [pc, #36]	@ (8006688 <siprintf+0x3c>)
 8006664:	f853 2b04 	ldr.w	r2, [r3], #4
 8006668:	9105      	str	r1, [sp, #20]
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	a902      	add	r1, sp, #8
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	f000 f9b8 	bl	80069e4 <_svfiprintf_r>
 8006674:	2200      	movs	r2, #0
 8006676:	9b02      	ldr	r3, [sp, #8]
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	b01c      	add	sp, #112	@ 0x70
 800667c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006680:	b003      	add	sp, #12
 8006682:	4770      	bx	lr
 8006684:	20000244 	.word	0x20000244
 8006688:	ffff0208 	.word	0xffff0208

0800668c <memset>:
 800668c:	4603      	mov	r3, r0
 800668e:	4402      	add	r2, r0
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	f803 1b01 	strb.w	r1, [r3], #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <strcat>:
 800669c:	4602      	mov	r2, r0
 800669e:	b510      	push	{r4, lr}
 80066a0:	7814      	ldrb	r4, [r2, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	3201      	adds	r2, #1
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	d1fa      	bne.n	80066a0 <strcat+0x4>
 80066aa:	3b01      	subs	r3, #1
 80066ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	d1f9      	bne.n	80066ac <strcat+0x10>
 80066b8:	bd10      	pop	{r4, pc}

080066ba <strstr>:
 80066ba:	780a      	ldrb	r2, [r1, #0]
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	b96a      	cbnz	r2, 80066dc <strstr+0x22>
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d109      	bne.n	80066da <strstr+0x20>
 80066c6:	460c      	mov	r4, r1
 80066c8:	4605      	mov	r5, r0
 80066ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f6      	beq.n	80066c0 <strstr+0x6>
 80066d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80066d6:	429e      	cmp	r6, r3
 80066d8:	d0f7      	beq.n	80066ca <strstr+0x10>
 80066da:	3001      	adds	r0, #1
 80066dc:	7803      	ldrb	r3, [r0, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1ef      	bne.n	80066c2 <strstr+0x8>
 80066e2:	4618      	mov	r0, r3
 80066e4:	e7ec      	b.n	80066c0 <strstr+0x6>
	...

080066e8 <__errno>:
 80066e8:	4b01      	ldr	r3, [pc, #4]	@ (80066f0 <__errno+0x8>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20000244 	.word	0x20000244

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	2600      	movs	r6, #0
 80066f8:	4d0c      	ldr	r5, [pc, #48]	@ (800672c <__libc_init_array+0x38>)
 80066fa:	4c0d      	ldr	r4, [pc, #52]	@ (8006730 <__libc_init_array+0x3c>)
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	f000 fc78 	bl	8006ff8 <_init>
 8006708:	2600      	movs	r6, #0
 800670a:	4d0a      	ldr	r5, [pc, #40]	@ (8006734 <__libc_init_array+0x40>)
 800670c:	4c0a      	ldr	r4, [pc, #40]	@ (8006738 <__libc_init_array+0x44>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08007ce4 	.word	0x08007ce4
 8006730:	08007ce4 	.word	0x08007ce4
 8006734:	08007ce4 	.word	0x08007ce4
 8006738:	08007ce8 	.word	0x08007ce8

0800673c <__retarget_lock_acquire_recursive>:
 800673c:	4770      	bx	lr

0800673e <__retarget_lock_release_recursive>:
 800673e:	4770      	bx	lr

08006740 <_free_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4605      	mov	r5, r0
 8006744:	2900      	cmp	r1, #0
 8006746:	d040      	beq.n	80067ca <_free_r+0x8a>
 8006748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674c:	1f0c      	subs	r4, r1, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfb8      	it	lt
 8006752:	18e4      	addlt	r4, r4, r3
 8006754:	f000 f8de 	bl	8006914 <__malloc_lock>
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <_free_r+0x8c>)
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	b933      	cbnz	r3, 800676c <_free_r+0x2c>
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	6014      	str	r4, [r2, #0]
 8006762:	4628      	mov	r0, r5
 8006764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006768:	f000 b8da 	b.w	8006920 <__malloc_unlock>
 800676c:	42a3      	cmp	r3, r4
 800676e:	d908      	bls.n	8006782 <_free_r+0x42>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	1821      	adds	r1, r4, r0
 8006774:	428b      	cmp	r3, r1
 8006776:	bf01      	itttt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	1809      	addeq	r1, r1, r0
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	e7ed      	b.n	800675e <_free_r+0x1e>
 8006782:	461a      	mov	r2, r3
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b10b      	cbz	r3, 800678c <_free_r+0x4c>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d9fa      	bls.n	8006782 <_free_r+0x42>
 800678c:	6811      	ldr	r1, [r2, #0]
 800678e:	1850      	adds	r0, r2, r1
 8006790:	42a0      	cmp	r0, r4
 8006792:	d10b      	bne.n	80067ac <_free_r+0x6c>
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	4401      	add	r1, r0
 8006798:	1850      	adds	r0, r2, r1
 800679a:	4283      	cmp	r3, r0
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	d1e0      	bne.n	8006762 <_free_r+0x22>
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4408      	add	r0, r1
 80067a6:	6010      	str	r0, [r2, #0]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	e7da      	b.n	8006762 <_free_r+0x22>
 80067ac:	d902      	bls.n	80067b4 <_free_r+0x74>
 80067ae:	230c      	movs	r3, #12
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	e7d6      	b.n	8006762 <_free_r+0x22>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	1821      	adds	r1, r4, r0
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf01      	itttt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	6054      	str	r4, [r2, #4]
 80067c8:	e7cb      	b.n	8006762 <_free_r+0x22>
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000ab0 	.word	0x20000ab0

080067d0 <sbrk_aligned>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006810 <sbrk_aligned+0x40>)
 80067d4:	460c      	mov	r4, r1
 80067d6:	6831      	ldr	r1, [r6, #0]
 80067d8:	4605      	mov	r5, r0
 80067da:	b911      	cbnz	r1, 80067e2 <sbrk_aligned+0x12>
 80067dc:	f000 fbaa 	bl	8006f34 <_sbrk_r>
 80067e0:	6030      	str	r0, [r6, #0]
 80067e2:	4621      	mov	r1, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 fba5 	bl	8006f34 <_sbrk_r>
 80067ea:	1c43      	adds	r3, r0, #1
 80067ec:	d103      	bne.n	80067f6 <sbrk_aligned+0x26>
 80067ee:	f04f 34ff 	mov.w	r4, #4294967295
 80067f2:	4620      	mov	r0, r4
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
 80067f6:	1cc4      	adds	r4, r0, #3
 80067f8:	f024 0403 	bic.w	r4, r4, #3
 80067fc:	42a0      	cmp	r0, r4
 80067fe:	d0f8      	beq.n	80067f2 <sbrk_aligned+0x22>
 8006800:	1a21      	subs	r1, r4, r0
 8006802:	4628      	mov	r0, r5
 8006804:	f000 fb96 	bl	8006f34 <_sbrk_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d1f2      	bne.n	80067f2 <sbrk_aligned+0x22>
 800680c:	e7ef      	b.n	80067ee <sbrk_aligned+0x1e>
 800680e:	bf00      	nop
 8006810:	20000aac 	.word	0x20000aac

08006814 <_malloc_r>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	1ccd      	adds	r5, r1, #3
 800681a:	f025 0503 	bic.w	r5, r5, #3
 800681e:	3508      	adds	r5, #8
 8006820:	2d0c      	cmp	r5, #12
 8006822:	bf38      	it	cc
 8006824:	250c      	movcc	r5, #12
 8006826:	2d00      	cmp	r5, #0
 8006828:	4606      	mov	r6, r0
 800682a:	db01      	blt.n	8006830 <_malloc_r+0x1c>
 800682c:	42a9      	cmp	r1, r5
 800682e:	d904      	bls.n	800683a <_malloc_r+0x26>
 8006830:	230c      	movs	r3, #12
 8006832:	6033      	str	r3, [r6, #0]
 8006834:	2000      	movs	r0, #0
 8006836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800683a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006910 <_malloc_r+0xfc>
 800683e:	f000 f869 	bl	8006914 <__malloc_lock>
 8006842:	f8d8 3000 	ldr.w	r3, [r8]
 8006846:	461c      	mov	r4, r3
 8006848:	bb44      	cbnz	r4, 800689c <_malloc_r+0x88>
 800684a:	4629      	mov	r1, r5
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff ffbf 	bl	80067d0 <sbrk_aligned>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	4604      	mov	r4, r0
 8006856:	d158      	bne.n	800690a <_malloc_r+0xf6>
 8006858:	f8d8 4000 	ldr.w	r4, [r8]
 800685c:	4627      	mov	r7, r4
 800685e:	2f00      	cmp	r7, #0
 8006860:	d143      	bne.n	80068ea <_malloc_r+0xd6>
 8006862:	2c00      	cmp	r4, #0
 8006864:	d04b      	beq.n	80068fe <_malloc_r+0xea>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	4639      	mov	r1, r7
 800686a:	4630      	mov	r0, r6
 800686c:	eb04 0903 	add.w	r9, r4, r3
 8006870:	f000 fb60 	bl	8006f34 <_sbrk_r>
 8006874:	4581      	cmp	r9, r0
 8006876:	d142      	bne.n	80068fe <_malloc_r+0xea>
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	4630      	mov	r0, r6
 800687c:	1a6d      	subs	r5, r5, r1
 800687e:	4629      	mov	r1, r5
 8006880:	f7ff ffa6 	bl	80067d0 <sbrk_aligned>
 8006884:	3001      	adds	r0, #1
 8006886:	d03a      	beq.n	80068fe <_malloc_r+0xea>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	442b      	add	r3, r5
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	f8d8 3000 	ldr.w	r3, [r8]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	bb62      	cbnz	r2, 80068f0 <_malloc_r+0xdc>
 8006896:	f8c8 7000 	str.w	r7, [r8]
 800689a:	e00f      	b.n	80068bc <_malloc_r+0xa8>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	1b52      	subs	r2, r2, r5
 80068a0:	d420      	bmi.n	80068e4 <_malloc_r+0xd0>
 80068a2:	2a0b      	cmp	r2, #11
 80068a4:	d917      	bls.n	80068d6 <_malloc_r+0xc2>
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	6025      	str	r5, [r4, #0]
 80068ac:	bf18      	it	ne
 80068ae:	6059      	strne	r1, [r3, #4]
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	bf08      	it	eq
 80068b4:	f8c8 1000 	streq.w	r1, [r8]
 80068b8:	5162      	str	r2, [r4, r5]
 80068ba:	604b      	str	r3, [r1, #4]
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f82f 	bl	8006920 <__malloc_unlock>
 80068c2:	f104 000b 	add.w	r0, r4, #11
 80068c6:	1d23      	adds	r3, r4, #4
 80068c8:	f020 0007 	bic.w	r0, r0, #7
 80068cc:	1ac2      	subs	r2, r0, r3
 80068ce:	bf1c      	itt	ne
 80068d0:	1a1b      	subne	r3, r3, r0
 80068d2:	50a3      	strne	r3, [r4, r2]
 80068d4:	e7af      	b.n	8006836 <_malloc_r+0x22>
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	42a3      	cmp	r3, r4
 80068da:	bf0c      	ite	eq
 80068dc:	f8c8 2000 	streq.w	r2, [r8]
 80068e0:	605a      	strne	r2, [r3, #4]
 80068e2:	e7eb      	b.n	80068bc <_malloc_r+0xa8>
 80068e4:	4623      	mov	r3, r4
 80068e6:	6864      	ldr	r4, [r4, #4]
 80068e8:	e7ae      	b.n	8006848 <_malloc_r+0x34>
 80068ea:	463c      	mov	r4, r7
 80068ec:	687f      	ldr	r7, [r7, #4]
 80068ee:	e7b6      	b.n	800685e <_malloc_r+0x4a>
 80068f0:	461a      	mov	r2, r3
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d1fb      	bne.n	80068f0 <_malloc_r+0xdc>
 80068f8:	2300      	movs	r3, #0
 80068fa:	6053      	str	r3, [r2, #4]
 80068fc:	e7de      	b.n	80068bc <_malloc_r+0xa8>
 80068fe:	230c      	movs	r3, #12
 8006900:	4630      	mov	r0, r6
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	f000 f80c 	bl	8006920 <__malloc_unlock>
 8006908:	e794      	b.n	8006834 <_malloc_r+0x20>
 800690a:	6005      	str	r5, [r0, #0]
 800690c:	e7d6      	b.n	80068bc <_malloc_r+0xa8>
 800690e:	bf00      	nop
 8006910:	20000ab0 	.word	0x20000ab0

08006914 <__malloc_lock>:
 8006914:	4801      	ldr	r0, [pc, #4]	@ (800691c <__malloc_lock+0x8>)
 8006916:	f7ff bf11 	b.w	800673c <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	20000aa8 	.word	0x20000aa8

08006920 <__malloc_unlock>:
 8006920:	4801      	ldr	r0, [pc, #4]	@ (8006928 <__malloc_unlock+0x8>)
 8006922:	f7ff bf0c 	b.w	800673e <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	20000aa8 	.word	0x20000aa8

0800692c <__ssputs_r>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	461f      	mov	r7, r3
 8006932:	688e      	ldr	r6, [r1, #8]
 8006934:	4682      	mov	sl, r0
 8006936:	42be      	cmp	r6, r7
 8006938:	460c      	mov	r4, r1
 800693a:	4690      	mov	r8, r2
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	d82d      	bhi.n	800699c <__ssputs_r+0x70>
 8006940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006948:	d026      	beq.n	8006998 <__ssputs_r+0x6c>
 800694a:	6965      	ldr	r5, [r4, #20]
 800694c:	6909      	ldr	r1, [r1, #16]
 800694e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006952:	eba3 0901 	sub.w	r9, r3, r1
 8006956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695a:	1c7b      	adds	r3, r7, #1
 800695c:	444b      	add	r3, r9
 800695e:	106d      	asrs	r5, r5, #1
 8006960:	429d      	cmp	r5, r3
 8006962:	bf38      	it	cc
 8006964:	461d      	movcc	r5, r3
 8006966:	0553      	lsls	r3, r2, #21
 8006968:	d527      	bpl.n	80069ba <__ssputs_r+0x8e>
 800696a:	4629      	mov	r1, r5
 800696c:	f7ff ff52 	bl	8006814 <_malloc_r>
 8006970:	4606      	mov	r6, r0
 8006972:	b360      	cbz	r0, 80069ce <__ssputs_r+0xa2>
 8006974:	464a      	mov	r2, r9
 8006976:	6921      	ldr	r1, [r4, #16]
 8006978:	f000 fafa 	bl	8006f70 <memcpy>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6126      	str	r6, [r4, #16]
 800698a:	444e      	add	r6, r9
 800698c:	6026      	str	r6, [r4, #0]
 800698e:	463e      	mov	r6, r7
 8006990:	6165      	str	r5, [r4, #20]
 8006992:	eba5 0509 	sub.w	r5, r5, r9
 8006996:	60a5      	str	r5, [r4, #8]
 8006998:	42be      	cmp	r6, r7
 800699a:	d900      	bls.n	800699e <__ssputs_r+0x72>
 800699c:	463e      	mov	r6, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	4641      	mov	r1, r8
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	f000 faac 	bl	8006f00 <memmove>
 80069a8:	2000      	movs	r0, #0
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	1b9b      	subs	r3, r3, r6
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4433      	add	r3, r6
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	462a      	mov	r2, r5
 80069bc:	f000 fae6 	bl	8006f8c <_realloc_r>
 80069c0:	4606      	mov	r6, r0
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d1e0      	bne.n	8006988 <__ssputs_r+0x5c>
 80069c6:	4650      	mov	r0, sl
 80069c8:	6921      	ldr	r1, [r4, #16]
 80069ca:	f7ff feb9 	bl	8006740 <_free_r>
 80069ce:	230c      	movs	r3, #12
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	e7e9      	b.n	80069b6 <__ssputs_r+0x8a>
	...

080069e4 <_svfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	4698      	mov	r8, r3
 80069ea:	898b      	ldrh	r3, [r1, #12]
 80069ec:	4607      	mov	r7, r0
 80069ee:	061b      	lsls	r3, r3, #24
 80069f0:	460d      	mov	r5, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	b09d      	sub	sp, #116	@ 0x74
 80069f6:	d510      	bpl.n	8006a1a <_svfiprintf_r+0x36>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b973      	cbnz	r3, 8006a1a <_svfiprintf_r+0x36>
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	f7ff ff09 	bl	8006814 <_malloc_r>
 8006a02:	6028      	str	r0, [r5, #0]
 8006a04:	6128      	str	r0, [r5, #16]
 8006a06:	b930      	cbnz	r0, 8006a16 <_svfiprintf_r+0x32>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b01d      	add	sp, #116	@ 0x74
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	2340      	movs	r3, #64	@ 0x40
 8006a18:	616b      	str	r3, [r5, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1e:	2320      	movs	r3, #32
 8006a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a24:	2330      	movs	r3, #48	@ 0x30
 8006a26:	f04f 0901 	mov.w	r9, #1
 8006a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006bc8 <_svfiprintf_r+0x1e4>
 8006a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a36:	4623      	mov	r3, r4
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3e:	b10a      	cbz	r2, 8006a44 <_svfiprintf_r+0x60>
 8006a40:	2a25      	cmp	r2, #37	@ 0x25
 8006a42:	d1f9      	bne.n	8006a38 <_svfiprintf_r+0x54>
 8006a44:	ebba 0b04 	subs.w	fp, sl, r4
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x7e>
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ff6b 	bl	800692c <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80a7 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a5e:	445a      	add	r2, fp
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 809f 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a84:	4654      	mov	r4, sl
 8006a86:	2205      	movs	r2, #5
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	484e      	ldr	r0, [pc, #312]	@ (8006bc8 <_svfiprintf_r+0x1e4>)
 8006a8e:	f000 fa61 	bl	8006f54 <memchr>
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	b9d8      	cbnz	r0, 8006ace <_svfiprintf_r+0xea>
 8006a96:	06d0      	lsls	r0, r2, #27
 8006a98:	bf44      	itt	mi
 8006a9a:	2320      	movmi	r3, #32
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aa0:	0711      	lsls	r1, r2, #28
 8006aa2:	bf44      	itt	mi
 8006aa4:	232b      	movmi	r3, #43	@ 0x2b
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab0:	d015      	beq.n	8006ade <_svfiprintf_r+0xfa>
 8006ab2:	4654      	mov	r4, sl
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f04f 0c0a 	mov.w	ip, #10
 8006aba:	9a07      	ldr	r2, [sp, #28]
 8006abc:	4621      	mov	r1, r4
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	3b30      	subs	r3, #48	@ 0x30
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d94b      	bls.n	8006b60 <_svfiprintf_r+0x17c>
 8006ac8:	b1b0      	cbz	r0, 8006af8 <_svfiprintf_r+0x114>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e014      	b.n	8006af8 <_svfiprintf_r+0x114>
 8006ace:	eba0 0308 	sub.w	r3, r0, r8
 8006ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	46a2      	mov	sl, r4
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	e7d2      	b.n	8006a84 <_svfiprintf_r+0xa0>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfbb      	ittet	lt
 8006aea:	425b      	neglt	r3, r3
 8006aec:	f042 0202 	orrlt.w	r2, r2, #2
 8006af0:	9307      	strge	r3, [sp, #28]
 8006af2:	9307      	strlt	r3, [sp, #28]
 8006af4:	bfb8      	it	lt
 8006af6:	9204      	strlt	r2, [sp, #16]
 8006af8:	7823      	ldrb	r3, [r4, #0]
 8006afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006afc:	d10a      	bne.n	8006b14 <_svfiprintf_r+0x130>
 8006afe:	7863      	ldrb	r3, [r4, #1]
 8006b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b02:	d132      	bne.n	8006b6a <_svfiprintf_r+0x186>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	3402      	adds	r4, #2
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	9203      	str	r2, [sp, #12]
 8006b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006bcc <_svfiprintf_r+0x1e8>
 8006b18:	2203      	movs	r2, #3
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	7821      	ldrb	r1, [r4, #0]
 8006b1e:	f000 fa19 	bl	8006f54 <memchr>
 8006b22:	b138      	cbz	r0, 8006b34 <_svfiprintf_r+0x150>
 8006b24:	2240      	movs	r2, #64	@ 0x40
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	4082      	lsls	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	3401      	adds	r4, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	2206      	movs	r2, #6
 8006b3a:	4825      	ldr	r0, [pc, #148]	@ (8006bd0 <_svfiprintf_r+0x1ec>)
 8006b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b40:	f000 fa08 	bl	8006f54 <memchr>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d036      	beq.n	8006bb6 <_svfiprintf_r+0x1d2>
 8006b48:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <_svfiprintf_r+0x1f0>)
 8006b4a:	bb1b      	cbnz	r3, 8006b94 <_svfiprintf_r+0x1b0>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5a:	4433      	add	r3, r6
 8006b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5e:	e76a      	b.n	8006a36 <_svfiprintf_r+0x52>
 8006b60:	460c      	mov	r4, r1
 8006b62:	2001      	movs	r0, #1
 8006b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b68:	e7a8      	b.n	8006abc <_svfiprintf_r+0xd8>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4619      	mov	r1, r3
 8006b72:	3401      	adds	r4, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7c:	3a30      	subs	r2, #48	@ 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d903      	bls.n	8006b8a <_svfiprintf_r+0x1a6>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c6      	beq.n	8006b14 <_svfiprintf_r+0x130>
 8006b86:	9105      	str	r1, [sp, #20]
 8006b88:	e7c4      	b.n	8006b14 <_svfiprintf_r+0x130>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b92:	e7f0      	b.n	8006b76 <_svfiprintf_r+0x192>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	f3af 8000 	nop.w
 8006ba4:	1c42      	adds	r2, r0, #1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d1d6      	bne.n	8006b58 <_svfiprintf_r+0x174>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af2d 	bmi.w	8006a0c <_svfiprintf_r+0x28>
 8006bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb4:	e72c      	b.n	8006a10 <_svfiprintf_r+0x2c>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	f000 f87d 	bl	8006cc0 <_printf_i>
 8006bc6:	e7ed      	b.n	8006ba4 <_svfiprintf_r+0x1c0>
 8006bc8:	08007ca6 	.word	0x08007ca6
 8006bcc:	08007cac 	.word	0x08007cac
 8006bd0:	08007cb0 	.word	0x08007cb0
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	0800692d 	.word	0x0800692d

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4698      	mov	r8, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4607      	mov	r7, r0
 8006bea:	4293      	cmp	r3, r2
 8006bec:	bfb8      	it	lt
 8006bee:	4613      	movlt	r3, r2
 8006bf0:	6033      	str	r3, [r6, #0]
 8006bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc2b      	bgt.n	8006c7c <_printf_common+0xa0>
 8006c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	3b00      	subs	r3, #0
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d430      	bmi.n	8006c96 <_printf_common+0xba>
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c3c:	47c8      	blx	r9
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d023      	beq.n	8006c8a <_printf_common+0xae>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	f003 0306 	and.w	r3, r3, #6
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	bf14      	ite	ne
 8006c4e:	2500      	movne	r5, #0
 8006c50:	6833      	ldreq	r3, [r6, #0]
 8006c52:	f04f 0600 	mov.w	r6, #0
 8006c56:	bf08      	it	eq
 8006c58:	68e5      	ldreq	r5, [r4, #12]
 8006c5a:	f104 041a 	add.w	r4, r4, #26
 8006c5e:	bf08      	it	eq
 8006c60:	1aed      	subeq	r5, r5, r3
 8006c62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006c66:	bf08      	it	eq
 8006c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	bfc4      	itt	gt
 8006c70:	1a9b      	subgt	r3, r3, r2
 8006c72:	18ed      	addgt	r5, r5, r3
 8006c74:	42b5      	cmp	r5, r6
 8006c76:	d11a      	bne.n	8006cae <_printf_common+0xd2>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e008      	b.n	8006c8e <_printf_common+0xb2>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4641      	mov	r1, r8
 8006c82:	4638      	mov	r0, r7
 8006c84:	47c8      	blx	r9
 8006c86:	3001      	adds	r0, #1
 8006c88:	d103      	bne.n	8006c92 <_printf_common+0xb6>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	3501      	adds	r5, #1
 8006c94:	e7c1      	b.n	8006c1a <_printf_common+0x3e>
 8006c96:	2030      	movs	r0, #48	@ 0x30
 8006c98:	18e1      	adds	r1, r4, r3
 8006c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ca4:	4422      	add	r2, r4
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cac:	e7c2      	b.n	8006c34 <_printf_common+0x58>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	47c8      	blx	r9
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d0e6      	beq.n	8006c8a <_printf_common+0xae>
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	e7d9      	b.n	8006c74 <_printf_common+0x98>

08006cc0 <_printf_i>:
 8006cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	7e0f      	ldrb	r7, [r1, #24]
 8006cc6:	4691      	mov	r9, r2
 8006cc8:	2f78      	cmp	r7, #120	@ 0x78
 8006cca:	4680      	mov	r8, r0
 8006ccc:	460c      	mov	r4, r1
 8006cce:	469a      	mov	sl, r3
 8006cd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cd6:	d807      	bhi.n	8006ce8 <_printf_i+0x28>
 8006cd8:	2f62      	cmp	r7, #98	@ 0x62
 8006cda:	d80a      	bhi.n	8006cf2 <_printf_i+0x32>
 8006cdc:	2f00      	cmp	r7, #0
 8006cde:	f000 80d3 	beq.w	8006e88 <_printf_i+0x1c8>
 8006ce2:	2f58      	cmp	r7, #88	@ 0x58
 8006ce4:	f000 80ba 	beq.w	8006e5c <_printf_i+0x19c>
 8006ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cf0:	e03a      	b.n	8006d68 <_printf_i+0xa8>
 8006cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cf6:	2b15      	cmp	r3, #21
 8006cf8:	d8f6      	bhi.n	8006ce8 <_printf_i+0x28>
 8006cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8006d00 <_printf_i+0x40>)
 8006cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d00:	08006d59 	.word	0x08006d59
 8006d04:	08006d6d 	.word	0x08006d6d
 8006d08:	08006ce9 	.word	0x08006ce9
 8006d0c:	08006ce9 	.word	0x08006ce9
 8006d10:	08006ce9 	.word	0x08006ce9
 8006d14:	08006ce9 	.word	0x08006ce9
 8006d18:	08006d6d 	.word	0x08006d6d
 8006d1c:	08006ce9 	.word	0x08006ce9
 8006d20:	08006ce9 	.word	0x08006ce9
 8006d24:	08006ce9 	.word	0x08006ce9
 8006d28:	08006ce9 	.word	0x08006ce9
 8006d2c:	08006e6f 	.word	0x08006e6f
 8006d30:	08006d97 	.word	0x08006d97
 8006d34:	08006e29 	.word	0x08006e29
 8006d38:	08006ce9 	.word	0x08006ce9
 8006d3c:	08006ce9 	.word	0x08006ce9
 8006d40:	08006e91 	.word	0x08006e91
 8006d44:	08006ce9 	.word	0x08006ce9
 8006d48:	08006d97 	.word	0x08006d97
 8006d4c:	08006ce9 	.word	0x08006ce9
 8006d50:	08006ce9 	.word	0x08006ce9
 8006d54:	08006e31 	.word	0x08006e31
 8006d58:	6833      	ldr	r3, [r6, #0]
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6032      	str	r2, [r6, #0]
 8006d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e09e      	b.n	8006eaa <_printf_i+0x1ea>
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	6820      	ldr	r0, [r4, #0]
 8006d70:	1d19      	adds	r1, r3, #4
 8006d72:	6031      	str	r1, [r6, #0]
 8006d74:	0606      	lsls	r6, r0, #24
 8006d76:	d501      	bpl.n	8006d7c <_printf_i+0xbc>
 8006d78:	681d      	ldr	r5, [r3, #0]
 8006d7a:	e003      	b.n	8006d84 <_printf_i+0xc4>
 8006d7c:	0645      	lsls	r5, r0, #25
 8006d7e:	d5fb      	bpl.n	8006d78 <_printf_i+0xb8>
 8006d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	da03      	bge.n	8006d90 <_printf_i+0xd0>
 8006d88:	232d      	movs	r3, #45	@ 0x2d
 8006d8a:	426d      	negs	r5, r5
 8006d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d90:	230a      	movs	r3, #10
 8006d92:	4859      	ldr	r0, [pc, #356]	@ (8006ef8 <_printf_i+0x238>)
 8006d94:	e011      	b.n	8006dba <_printf_i+0xfa>
 8006d96:	6821      	ldr	r1, [r4, #0]
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	0608      	lsls	r0, r1, #24
 8006d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006da0:	d402      	bmi.n	8006da8 <_printf_i+0xe8>
 8006da2:	0649      	lsls	r1, r1, #25
 8006da4:	bf48      	it	mi
 8006da6:	b2ad      	uxthmi	r5, r5
 8006da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	bf14      	ite	ne
 8006dae:	230a      	movne	r3, #10
 8006db0:	2308      	moveq	r3, #8
 8006db2:	4851      	ldr	r0, [pc, #324]	@ (8006ef8 <_printf_i+0x238>)
 8006db4:	2100      	movs	r1, #0
 8006db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dba:	6866      	ldr	r6, [r4, #4]
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	bfa8      	it	ge
 8006dc0:	6821      	ldrge	r1, [r4, #0]
 8006dc2:	60a6      	str	r6, [r4, #8]
 8006dc4:	bfa4      	itt	ge
 8006dc6:	f021 0104 	bicge.w	r1, r1, #4
 8006dca:	6021      	strge	r1, [r4, #0]
 8006dcc:	b90d      	cbnz	r5, 8006dd2 <_printf_i+0x112>
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d04b      	beq.n	8006e6a <_printf_i+0x1aa>
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8006ddc:	5dc7      	ldrb	r7, [r0, r7]
 8006dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006de2:	462f      	mov	r7, r5
 8006de4:	42bb      	cmp	r3, r7
 8006de6:	460d      	mov	r5, r1
 8006de8:	d9f4      	bls.n	8006dd4 <_printf_i+0x114>
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d10b      	bne.n	8006e06 <_printf_i+0x146>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	07df      	lsls	r7, r3, #31
 8006df2:	d508      	bpl.n	8006e06 <_printf_i+0x146>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	6861      	ldr	r1, [r4, #4]
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	bfde      	ittt	le
 8006dfc:	2330      	movle	r3, #48	@ 0x30
 8006dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e06:	1b92      	subs	r2, r2, r6
 8006e08:	6122      	str	r2, [r4, #16]
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f8cd a000 	str.w	sl, [sp]
 8006e14:	aa03      	add	r2, sp, #12
 8006e16:	f7ff fee1 	bl	8006bdc <_printf_common>
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d14a      	bne.n	8006eb4 <_printf_i+0x1f4>
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	b004      	add	sp, #16
 8006e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	f043 0320 	orr.w	r3, r3, #32
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	2778      	movs	r7, #120	@ 0x78
 8006e32:	4832      	ldr	r0, [pc, #200]	@ (8006efc <_printf_i+0x23c>)
 8006e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	6831      	ldr	r1, [r6, #0]
 8006e3c:	061f      	lsls	r7, r3, #24
 8006e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e42:	d402      	bmi.n	8006e4a <_printf_i+0x18a>
 8006e44:	065f      	lsls	r7, r3, #25
 8006e46:	bf48      	it	mi
 8006e48:	b2ad      	uxthmi	r5, r5
 8006e4a:	6031      	str	r1, [r6, #0]
 8006e4c:	07d9      	lsls	r1, r3, #31
 8006e4e:	bf44      	itt	mi
 8006e50:	f043 0320 	orrmi.w	r3, r3, #32
 8006e54:	6023      	strmi	r3, [r4, #0]
 8006e56:	b11d      	cbz	r5, 8006e60 <_printf_i+0x1a0>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	e7ab      	b.n	8006db4 <_printf_i+0xf4>
 8006e5c:	4826      	ldr	r0, [pc, #152]	@ (8006ef8 <_printf_i+0x238>)
 8006e5e:	e7e9      	b.n	8006e34 <_printf_i+0x174>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f023 0320 	bic.w	r3, r3, #32
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	e7f6      	b.n	8006e58 <_printf_i+0x198>
 8006e6a:	4616      	mov	r6, r2
 8006e6c:	e7bd      	b.n	8006dea <_printf_i+0x12a>
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	1d18      	adds	r0, r3, #4
 8006e74:	6961      	ldr	r1, [r4, #20]
 8006e76:	6030      	str	r0, [r6, #0]
 8006e78:	062e      	lsls	r6, r5, #24
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	d501      	bpl.n	8006e82 <_printf_i+0x1c2>
 8006e7e:	6019      	str	r1, [r3, #0]
 8006e80:	e002      	b.n	8006e88 <_printf_i+0x1c8>
 8006e82:	0668      	lsls	r0, r5, #25
 8006e84:	d5fb      	bpl.n	8006e7e <_printf_i+0x1be>
 8006e86:	8019      	strh	r1, [r3, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	e7bc      	b.n	8006e0a <_printf_i+0x14a>
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	2100      	movs	r1, #0
 8006e94:	1d1a      	adds	r2, r3, #4
 8006e96:	6032      	str	r2, [r6, #0]
 8006e98:	681e      	ldr	r6, [r3, #0]
 8006e9a:	6862      	ldr	r2, [r4, #4]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f859 	bl	8006f54 <memchr>
 8006ea2:	b108      	cbz	r0, 8006ea8 <_printf_i+0x1e8>
 8006ea4:	1b80      	subs	r0, r0, r6
 8006ea6:	6060      	str	r0, [r4, #4]
 8006ea8:	6863      	ldr	r3, [r4, #4]
 8006eaa:	6123      	str	r3, [r4, #16]
 8006eac:	2300      	movs	r3, #0
 8006eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eb2:	e7aa      	b.n	8006e0a <_printf_i+0x14a>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	47d0      	blx	sl
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0ad      	beq.n	8006e1e <_printf_i+0x15e>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	079b      	lsls	r3, r3, #30
 8006ec6:	d413      	bmi.n	8006ef0 <_printf_i+0x230>
 8006ec8:	68e0      	ldr	r0, [r4, #12]
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	4298      	cmp	r0, r3
 8006ece:	bfb8      	it	lt
 8006ed0:	4618      	movlt	r0, r3
 8006ed2:	e7a6      	b.n	8006e22 <_printf_i+0x162>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4640      	mov	r0, r8
 8006edc:	47d0      	blx	sl
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d09d      	beq.n	8006e1e <_printf_i+0x15e>
 8006ee2:	3501      	adds	r5, #1
 8006ee4:	68e3      	ldr	r3, [r4, #12]
 8006ee6:	9903      	ldr	r1, [sp, #12]
 8006ee8:	1a5b      	subs	r3, r3, r1
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	dcf2      	bgt.n	8006ed4 <_printf_i+0x214>
 8006eee:	e7eb      	b.n	8006ec8 <_printf_i+0x208>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	f104 0619 	add.w	r6, r4, #25
 8006ef6:	e7f5      	b.n	8006ee4 <_printf_i+0x224>
 8006ef8:	08007cb7 	.word	0x08007cb7
 8006efc:	08007cc8 	.word	0x08007cc8

08006f00 <memmove>:
 8006f00:	4288      	cmp	r0, r1
 8006f02:	b510      	push	{r4, lr}
 8006f04:	eb01 0402 	add.w	r4, r1, r2
 8006f08:	d902      	bls.n	8006f10 <memmove+0x10>
 8006f0a:	4284      	cmp	r4, r0
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	d807      	bhi.n	8006f20 <memmove+0x20>
 8006f10:	1e43      	subs	r3, r0, #1
 8006f12:	42a1      	cmp	r1, r4
 8006f14:	d008      	beq.n	8006f28 <memmove+0x28>
 8006f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1e:	e7f8      	b.n	8006f12 <memmove+0x12>
 8006f20:	4601      	mov	r1, r0
 8006f22:	4402      	add	r2, r0
 8006f24:	428a      	cmp	r2, r1
 8006f26:	d100      	bne.n	8006f2a <memmove+0x2a>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f32:	e7f7      	b.n	8006f24 <memmove+0x24>

08006f34 <_sbrk_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2300      	movs	r3, #0
 8006f38:	4d05      	ldr	r5, [pc, #20]	@ (8006f50 <_sbrk_r+0x1c>)
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fa ffbe 	bl	8001ec0 <_sbrk>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_sbrk_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_sbrk_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20000aa4 	.word	0x20000aa4

08006f54 <memchr>:
 8006f54:	4603      	mov	r3, r0
 8006f56:	b510      	push	{r4, lr}
 8006f58:	b2c9      	uxtb	r1, r1
 8006f5a:	4402      	add	r2, r0
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	d101      	bne.n	8006f66 <memchr+0x12>
 8006f62:	2000      	movs	r0, #0
 8006f64:	e003      	b.n	8006f6e <memchr+0x1a>
 8006f66:	7804      	ldrb	r4, [r0, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	428c      	cmp	r4, r1
 8006f6c:	d1f6      	bne.n	8006f5c <memchr+0x8>
 8006f6e:	bd10      	pop	{r4, pc}

08006f70 <memcpy>:
 8006f70:	440a      	add	r2, r1
 8006f72:	4291      	cmp	r1, r2
 8006f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f78:	d100      	bne.n	8006f7c <memcpy+0xc>
 8006f7a:	4770      	bx	lr
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f82:	4291      	cmp	r1, r2
 8006f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f88:	d1f9      	bne.n	8006f7e <memcpy+0xe>
 8006f8a:	bd10      	pop	{r4, pc}

08006f8c <_realloc_r>:
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	4680      	mov	r8, r0
 8006f92:	4615      	mov	r5, r2
 8006f94:	460c      	mov	r4, r1
 8006f96:	b921      	cbnz	r1, 8006fa2 <_realloc_r+0x16>
 8006f98:	4611      	mov	r1, r2
 8006f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	f7ff bc39 	b.w	8006814 <_malloc_r>
 8006fa2:	b92a      	cbnz	r2, 8006fb0 <_realloc_r+0x24>
 8006fa4:	f7ff fbcc 	bl	8006740 <_free_r>
 8006fa8:	2400      	movs	r4, #0
 8006faa:	4620      	mov	r0, r4
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	f000 f81a 	bl	8006fe8 <_malloc_usable_size_r>
 8006fb4:	4285      	cmp	r5, r0
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	d802      	bhi.n	8006fc0 <_realloc_r+0x34>
 8006fba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fbe:	d8f4      	bhi.n	8006faa <_realloc_r+0x1e>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7ff fc26 	bl	8006814 <_malloc_r>
 8006fc8:	4607      	mov	r7, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d0ec      	beq.n	8006fa8 <_realloc_r+0x1c>
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	bf28      	it	cs
 8006fd6:	4632      	movcs	r2, r6
 8006fd8:	f7ff ffca 	bl	8006f70 <memcpy>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4640      	mov	r0, r8
 8006fe0:	f7ff fbae 	bl	8006740 <_free_r>
 8006fe4:	463c      	mov	r4, r7
 8006fe6:	e7e0      	b.n	8006faa <_realloc_r+0x1e>

08006fe8 <_malloc_usable_size_r>:
 8006fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fec:	1f18      	subs	r0, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bfbc      	itt	lt
 8006ff2:	580b      	ldrlt	r3, [r1, r0]
 8006ff4:	18c0      	addlt	r0, r0, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
