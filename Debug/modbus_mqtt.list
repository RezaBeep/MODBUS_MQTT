
modbus_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  080079c0  080079c0  000089c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c4  080086c4  0000a294  2**0
                  CONTENTS
  4 .ARM          00000008  080086c4  080086c4  000096c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086cc  080086cc  0000a294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086cc  080086cc  000096cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086d0  080086d0  000096d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  080086d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000294  08008968  0000a294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08008968  0000aaf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f4a  00000000  00000000  0000a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b5  00000000  00000000  0001c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9b  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954f  00000000  00000000  0002157b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171eb  00000000  00000000  0003aaca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008764c  00000000  00000000  00051cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f20  00000000  00000000  000d9344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000dd264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000294 	.word	0x20000294
 8000128:	00000000 	.word	0x00000000
 800012c:	080079a8 	.word	0x080079a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000298 	.word	0x20000298
 8000148:	080079a8 	.word	0x080079a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_at_response_error_check>:
char tx_buff[AT_TX_BUFF_SIZE] = "";
uint16_t RxLen;



at_state_t _at_response_error_check(char* rx_buff){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(find_substr(rx_buff, "ERROR")){
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <_at_response_error_check+0x24>)
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f000 f80c 	bl	8000184 <find_substr>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d001      	beq.n	8000176 <_at_response_error_check+0x1a>
		return AT_STATE_ERROR;
 8000172:	2300      	movs	r3, #0
 8000174:	e000      	b.n	8000178 <_at_response_error_check+0x1c>
	}
	return AT_STATE_OK;
 8000176:	2301      	movs	r3, #1
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080079c0 	.word	0x080079c0

08000184 <find_substr>:


bool find_substr(char* str, char* substr){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	char* pch = strstr(str, substr);
 800018e:	6839      	ldr	r1, [r7, #0]
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f006 ff6a 	bl	800706a <strstr>
 8000196:	60f8      	str	r0, [r7, #12]
		if(pch != NULL){
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d001      	beq.n	80001a2 <find_substr+0x1e>
			return true;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <find_substr+0x20>
		}
		return false;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <flush_buff>:


void flush_buff(char* buffer){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	memset(buffer,0,strlen(buffer));
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffc9 	bl	800014c <strlen>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	2100      	movs	r1, #0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f006 ff3b 	bl	800703c <memset>
	strcpy(buffer, "");
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <at_read>:



at_state_t at_read(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af02      	add	r7, sp, #8
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 80001e2:	68b8      	ldr	r0, [r7, #8]
 80001e4:	f7ff ffe2 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80001e8:	4b19      	ldr	r3, [pc, #100]	@ (8000250 <at_read+0x7c>)
 80001ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <at_read+0x80>)
 80001ec:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	4817      	ldr	r0, [pc, #92]	@ (8000250 <at_read+0x7c>)
 80001f2:	f006 ff2b 	bl	800704c <strcat>
	strcat(tx_buff, "?\r\n");
 80001f6:	4816      	ldr	r0, [pc, #88]	@ (8000250 <at_read+0x7c>)
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b13      	ldr	r3, [pc, #76]	@ (8000250 <at_read+0x7c>)
 8000202:	4413      	add	r3, r2
 8000204:	4a14      	ldr	r2, [pc, #80]	@ (8000258 <at_read+0x84>)
 8000206:	6810      	ldr	r0, [r2, #0]
 8000208:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 800020a:	4811      	ldr	r0, [pc, #68]	@ (8000250 <at_read+0x7c>)
 800020c:	f7ff ff9e 	bl	800014c <strlen>
 8000210:	4603      	mov	r3, r0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	3301      	adds	r3, #1
 8000216:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	b29b      	uxth	r3, r3
 800021c:	461a      	mov	r2, r3
 800021e:	490c      	ldr	r1, [pc, #48]	@ (8000250 <at_read+0x7c>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f005 fe4a 	bl	8005eba <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 8000226:	887b      	ldrh	r3, [r7, #2]
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <at_read+0x88>)
 800022c:	2232      	movs	r2, #50	@ 0x32
 800022e:	68b9      	ldr	r1, [r7, #8]
 8000230:	68f8      	ldr	r0, [r7, #12]
 8000232:	f005 fe77 	bl	8005f24 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 8000236:	68b8      	ldr	r0, [r7, #8]
 8000238:	f7ff ff90 	bl	800015c <_at_response_error_check>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <at_read+0x72>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000242:	2301      	movs	r3, #1
 8000244:	e000      	b.n	8000248 <at_read+0x74>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3718      	adds	r7, #24
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200002b0 	.word	0x200002b0
 8000254:	002b5441 	.word	0x002b5441
 8000258:	080079c8 	.word	0x080079c8
 800025c:	200002e2 	.word	0x200002e2

08000260 <at_write>:



at_state_t at_write(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000260:	b580      	push	{r7, lr}
 8000262:	b08a      	sub	sp, #40	@ 0x28
 8000264:	af02      	add	r7, sp, #8
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800026e:	68b8      	ldr	r0, [r7, #8]
 8000270:	f7ff ff9c 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000274:	4b2f      	ldr	r3, [pc, #188]	@ (8000334 <at_write+0xd4>)
 8000276:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <at_write+0xd8>)
 8000278:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	482d      	ldr	r0, [pc, #180]	@ (8000334 <at_write+0xd4>)
 800027e:	f006 fee5 	bl	800704c <strcat>
	strcat(tx_buff, "=");
 8000282:	482c      	ldr	r0, [pc, #176]	@ (8000334 <at_write+0xd4>)
 8000284:	f7ff ff62 	bl	800014c <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	461a      	mov	r2, r3
 800028c:	4b29      	ldr	r3, [pc, #164]	@ (8000334 <at_write+0xd4>)
 800028e:	4413      	add	r3, r2
 8000290:	492a      	ldr	r1, [pc, #168]	@ (800033c <at_write+0xdc>)
 8000292:	461a      	mov	r2, r3
 8000294:	460b      	mov	r3, r1
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 800029a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800029e:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
 80002a4:	e00a      	b.n	80002bc <at_write+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	1d1a      	adds	r2, r3, #4
 80002aa:	617a      	str	r2, [r7, #20]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4619      	mov	r1, r3
 80002b0:	4820      	ldr	r0, [pc, #128]	@ (8000334 <at_write+0xd4>)
 80002b2:	f006 fecb 	bl	800704c <strcat>
	for(int i=0;i<argc;i++){
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	3301      	adds	r3, #1
 80002ba:	61fb      	str	r3, [r7, #28]
 80002bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80002c0:	69fa      	ldr	r2, [r7, #28]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	dbef      	blt.n	80002a6 <at_write+0x46>
	}
	strcat(tx_buff, "\r\n");
 80002c6:	481b      	ldr	r0, [pc, #108]	@ (8000334 <at_write+0xd4>)
 80002c8:	f7ff ff40 	bl	800014c <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <at_write+0xd4>)
 80002d2:	4413      	add	r3, r2
 80002d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000340 <at_write+0xe0>)
 80002d6:	8811      	ldrh	r1, [r2, #0]
 80002d8:	7892      	ldrb	r2, [r2, #2]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 80002de:	4815      	ldr	r0, [pc, #84]	@ (8000334 <at_write+0xd4>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	3301      	adds	r3, #1
 80002ea:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80002ec:	7efb      	ldrb	r3, [r7, #27]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4910      	ldr	r1, [pc, #64]	@ (8000334 <at_write+0xd4>)
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f005 fde0 	bl	8005eba <HAL_UART_Transmit_IT>
//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80002fa:	887b      	ldrh	r3, [r7, #2]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <at_write+0xe4>)
 8000300:	2232      	movs	r2, #50	@ 0x32
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f005 fe0d 	bl	8005f24 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff26 	bl	800015c <_at_response_error_check>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d008      	beq.n	8000328 <at_write+0xc8>
		if(find_substr(rx_buff, AT_OK)){
 8000316:	490c      	ldr	r1, [pc, #48]	@ (8000348 <at_write+0xe8>)
 8000318:	68b8      	ldr	r0, [r7, #8]
 800031a:	f7ff ff33 	bl	8000184 <find_substr>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <at_write+0xc8>
			return AT_STATE_OK;
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <at_write+0xca>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000328:	2300      	movs	r3, #0
}
 800032a:	4618      	mov	r0, r3
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200002b0 	.word	0x200002b0
 8000338:	002b5441 	.word	0x002b5441
 800033c:	080079cc 	.word	0x080079cc
 8000340:	080079d0 	.word	0x080079d0
 8000344:	200002e2 	.word	0x200002e2
 8000348:	080079d4 	.word	0x080079d4

0800034c <at_execute>:



at_state_t at_execute(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af02      	add	r7, sp, #8
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800035a:	68b8      	ldr	r0, [r7, #8]
 800035c:	f7ff ff26 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <at_execute+0x24>
		strcpy(tx_buff, "AT+");
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <at_execute+0xa8>)
 800036a:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <at_execute+0xac>)
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	e007      	b.n	8000380 <at_execute+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 8000370:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <at_execute+0xa8>)
 8000372:	4a22      	ldr	r2, [pc, #136]	@ (80003fc <at_execute+0xb0>)
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	4611      	mov	r1, r2
 8000378:	8019      	strh	r1, [r3, #0]
 800037a:	3302      	adds	r3, #2
 800037c:	0c12      	lsrs	r2, r2, #16
 800037e:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	481c      	ldr	r0, [pc, #112]	@ (80003f4 <at_execute+0xa8>)
 8000384:	f006 fe62 	bl	800704c <strcat>
	strcat(tx_buff, "\r\n");
 8000388:	481a      	ldr	r0, [pc, #104]	@ (80003f4 <at_execute+0xa8>)
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	461a      	mov	r2, r3
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <at_execute+0xa8>)
 8000394:	4413      	add	r3, r2
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <at_execute+0xb4>)
 8000398:	8811      	ldrh	r1, [r2, #0]
 800039a:	7892      	ldrb	r2, [r2, #2]
 800039c:	8019      	strh	r1, [r3, #0]
 800039e:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80003a0:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <at_execute+0xa8>)
 80003a2:	f7ff fed3 	bl	800014c <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	3301      	adds	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	490f      	ldr	r1, [pc, #60]	@ (80003f4 <at_execute+0xa8>)
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f005 fd7f 	bl	8005eba <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <at_execute+0xb8>)
 80003c2:	2232      	movs	r2, #50	@ 0x32
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	68f8      	ldr	r0, [r7, #12]
 80003c8:	f005 fdac 	bl	8005f24 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 80003cc:	68b8      	ldr	r0, [r7, #8]
 80003ce:	f7ff fec5 	bl	800015c <_at_response_error_check>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <at_execute+0x9e>
		if(find_substr(rx_buff, AT_OK)){
 80003d8:	490b      	ldr	r1, [pc, #44]	@ (8000408 <at_execute+0xbc>)
 80003da:	68b8      	ldr	r0, [r7, #8]
 80003dc:	f7ff fed2 	bl	8000184 <find_substr>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <at_execute+0x9e>
			return AT_STATE_OK;
 80003e6:	2301      	movs	r3, #1
 80003e8:	e000      	b.n	80003ec <at_execute+0xa0>
		}
	}
	return AT_STATE_ERROR;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200002b0 	.word	0x200002b0
 80003f8:	002b5441 	.word	0x002b5441
 80003fc:	080079d8 	.word	0x080079d8
 8000400:	080079d0 	.word	0x080079d0
 8000404:	200002e2 	.word	0x200002e2
 8000408:	080079d4 	.word	0x080079d4

0800040c <at_read_blocking>:





at_state_t at_read_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800041a:	68b8      	ldr	r0, [r7, #8]
 800041c:	f7ff fec6 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <at_read_blocking+0x78>)
 8000422:	4a19      	ldr	r2, [pc, #100]	@ (8000488 <at_read_blocking+0x7c>)
 8000424:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <at_read_blocking+0x78>)
 800042a:	f006 fe0f 	bl	800704c <strcat>
	strcat(tx_buff, "?\r\n");
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <at_read_blocking+0x78>)
 8000430:	f7ff fe8c 	bl	800014c <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <at_read_blocking+0x78>)
 800043a:	4413      	add	r3, r2
 800043c:	4a13      	ldr	r2, [pc, #76]	@ (800048c <at_read_blocking+0x80>)
 800043e:	6810      	ldr	r0, [r2, #0]
 8000440:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 8000442:	4810      	ldr	r0, [pc, #64]	@ (8000484 <at_read_blocking+0x78>)
 8000444:	f7ff fe82 	bl	800014c <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b2db      	uxtb	r3, r3
 800044c:	3301      	adds	r3, #1
 800044e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000450:	7dfb      	ldrb	r3, [r7, #23]
 8000452:	b29b      	uxth	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	490b      	ldr	r1, [pc, #44]	@ (8000484 <at_read_blocking+0x78>)
 8000458:	68f8      	ldr	r0, [r7, #12]
 800045a:	f005 fd2e 	bl	8005eba <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	2232      	movs	r2, #50	@ 0x32
 8000462:	68b9      	ldr	r1, [r7, #8]
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f005 fc96 	bl	8005d96 <HAL_UART_Receive>
//	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
	if(_at_response_error_check(rx_buff)){
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f7ff fe76 	bl	800015c <_at_response_error_check>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <at_read_blocking+0x6e>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <at_read_blocking+0x70>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 800047a:	2300      	movs	r3, #0

}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200002b0 	.word	0x200002b0
 8000488:	002b5441 	.word	0x002b5441
 800048c:	080079c8 	.word	0x080079c8

08000490 <at_write_blocking>:





at_state_t at_write_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800049e:	68b8      	ldr	r0, [r7, #8]
 80004a0:	f7ff fe84 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80004a4:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <at_write_blocking+0xe0>)
 80004a6:	4a33      	ldr	r2, [pc, #204]	@ (8000574 <at_write_blocking+0xe4>)
 80004a8:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4830      	ldr	r0, [pc, #192]	@ (8000570 <at_write_blocking+0xe0>)
 80004ae:	f006 fdcd 	bl	800704c <strcat>
	strcat(tx_buff, "=");
 80004b2:	482f      	ldr	r0, [pc, #188]	@ (8000570 <at_write_blocking+0xe0>)
 80004b4:	f7ff fe4a 	bl	800014c <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <at_write_blocking+0xe0>)
 80004be:	4413      	add	r3, r2
 80004c0:	492d      	ldr	r1, [pc, #180]	@ (8000578 <at_write_blocking+0xe8>)
 80004c2:	461a      	mov	r2, r3
 80004c4:	460b      	mov	r3, r1
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 80004ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ce:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	e00a      	b.n	80004ec <at_write_blocking+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	1d1a      	adds	r2, r3, #4
 80004da:	617a      	str	r2, [r7, #20]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <at_write_blocking+0xe0>)
 80004e2:	f006 fdb3 	bl	800704c <strcat>
	for(int i=0;i<argc;i++){
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3301      	adds	r3, #1
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dbef      	blt.n	80004d6 <at_write_blocking+0x46>
	}
	strcat(tx_buff, "\r\n");
 80004f6:	481e      	ldr	r0, [pc, #120]	@ (8000570 <at_write_blocking+0xe0>)
 80004f8:	f7ff fe28 	bl	800014c <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <at_write_blocking+0xe0>)
 8000502:	4413      	add	r3, r2
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <at_write_blocking+0xec>)
 8000506:	8811      	ldrh	r1, [r2, #0]
 8000508:	7892      	ldrb	r2, [r2, #2]
 800050a:	8019      	strh	r1, [r3, #0]
 800050c:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 800050e:	4818      	ldr	r0, [pc, #96]	@ (8000570 <at_write_blocking+0xe0>)
 8000510:	f7ff fe1c 	bl	800014c <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b2db      	uxtb	r3, r3
 8000518:	3301      	adds	r3, #1
 800051a:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 800051c:	7efb      	ldrb	r3, [r7, #27]
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4913      	ldr	r1, [pc, #76]	@ (8000570 <at_write_blocking+0xe0>)
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f005 fcc8 	bl	8005eba <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	2232      	movs	r2, #50	@ 0x32
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f005 fc30 	bl	8005d96 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f7ff fe10 	bl	800015c <_at_response_error_check>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d011      	beq.n	8000566 <at_write_blocking+0xd6>
		if(find_substr(rx_buff, AT_OK)){
 8000542:	490f      	ldr	r1, [pc, #60]	@ (8000580 <at_write_blocking+0xf0>)
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f7ff fe1d 	bl	8000184 <find_substr>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <at_write_blocking+0xc4>
			return AT_STATE_OK;
 8000550:	2301      	movs	r3, #1
 8000552:	e009      	b.n	8000568 <at_write_blocking+0xd8>
		}
		if(find_substr(rx_buff, ">")){
 8000554:	490b      	ldr	r1, [pc, #44]	@ (8000584 <at_write_blocking+0xf4>)
 8000556:	68b8      	ldr	r0, [r7, #8]
 8000558:	f7ff fe14 	bl	8000184 <find_substr>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <at_write_blocking+0xd6>
			return AT_STATE_ENTER_INPUT;
 8000562:	2302      	movs	r3, #2
 8000564:	e000      	b.n	8000568 <at_write_blocking+0xd8>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000566:	2300      	movs	r3, #0

}
 8000568:	4618      	mov	r0, r3
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200002b0 	.word	0x200002b0
 8000574:	002b5441 	.word	0x002b5441
 8000578:	080079cc 	.word	0x080079cc
 800057c:	080079d0 	.word	0x080079d0
 8000580:	080079d4 	.word	0x080079d4
 8000584:	080079dc 	.word	0x080079dc

08000588 <at_execute_blocking>:





at_state_t at_execute_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f7ff fe08 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <at_execute_blocking+0x24>
		strcpy(tx_buff, "AT+");
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <at_execute_blocking+0xa4>)
 80005a6:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <at_execute_blocking+0xa8>)
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e007      	b.n	80005bc <at_execute_blocking+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <at_execute_blocking+0xa4>)
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <at_execute_blocking+0xac>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	0c12      	lsrs	r2, r2, #16
 80005ba:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	481b      	ldr	r0, [pc, #108]	@ (800062c <at_execute_blocking+0xa4>)
 80005c0:	f006 fd44 	bl	800704c <strcat>
	strcat(tx_buff, "\r\n");
 80005c4:	4819      	ldr	r0, [pc, #100]	@ (800062c <at_execute_blocking+0xa4>)
 80005c6:	f7ff fdc1 	bl	800014c <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <at_execute_blocking+0xa4>)
 80005d0:	4413      	add	r3, r2
 80005d2:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <at_execute_blocking+0xb0>)
 80005d4:	8811      	ldrh	r1, [r2, #0]
 80005d6:	7892      	ldrb	r2, [r2, #2]
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <at_execute_blocking+0xa4>)
 80005de:	f7ff fdb5 	bl	800014c <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <at_execute_blocking+0xa4>)
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f005 fc61 	bl	8005eba <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	2232      	movs	r2, #50	@ 0x32
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f005 fbc9 	bl	8005d96 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f7ff fda9 	bl	800015c <_at_response_error_check>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <at_execute_blocking+0x9a>
		if(find_substr(rx_buff, AT_OK)){
 8000610:	490a      	ldr	r1, [pc, #40]	@ (800063c <at_execute_blocking+0xb4>)
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f7ff fdb6 	bl	8000184 <find_substr>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <at_execute_blocking+0x9a>
			return AT_STATE_OK;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <at_execute_blocking+0x9c>
		}
	}
	return AT_STATE_ERROR;
 8000622:	2300      	movs	r3, #0

}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200002b0 	.word	0x200002b0
 8000630:	002b5441 	.word	0x002b5441
 8000634:	080079d8 	.word	0x080079d8
 8000638:	080079d0 	.word	0x080079d0
 800063c:	080079d4 	.word	0x080079d4

08000640 <CRC16>:


#include "crc16.h"

uint16_t CRC16(uint8_t *puchMsg, unsigned short usDataLen ) /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	uint8_t uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	@ 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	uint8_t uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	@ 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--){
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--){
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	807a      	strh	r2, [r7, #2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000100 	.word	0x20000100

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 2);
 80006ca:	2202      	movs	r2, #2
 80006cc:	2102      	movs	r1, #2
 80006ce:	2010      	movs	r0, #16
 80006d0:	f001 ff2e 	bl	8002530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d4:	2010      	movs	r0, #16
 80006d6:	f001 ff57 	bl	8002588 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0xc0>)
 8000762:	f002 fcf9 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <MX_GPIO_Init+0xc0>)
 800077e:	f002 fa7d 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0xc8>)
 8000798:	f002 fa70 	bl	8002c7c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	10210000 	.word	0x10210000
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f002 fd17 	bl	8003224 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 fae0 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002e4 	.word	0x200002e4
 8000808:	40005400 	.word	0x40005400
 800080c:	000186a0 	.word	0x000186a0

08000810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <HAL_I2C_MspInit+0x70>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d123      	bne.n	8000878 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000848:	23c0      	movs	r3, #192	@ 0xc0
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084c:	2312      	movs	r3, #18
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	480b      	ldr	r0, [pc, #44]	@ (8000888 <HAL_I2C_MspInit+0x78>)
 800085c:	f002 fa0e 	bl	8002c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086a:	61d3      	str	r3, [r2, #28]
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000
 8000888:	40010c00 	.word	0x40010c00

0800088c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	rtc_set_alarm_seconds_it(hrtc, REPEAT_DELAY);
 8000894:	210a      	movs	r1, #10
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 fde6 	bl	8001468 <rtc_set_alarm_seconds_it>
	repeative_task();
 800089c:	f000 f9a0 	bl	8000be0 <repeative_task>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008a0:	2102      	movs	r1, #2
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <HAL_RTC_AlarmAEventCallback+0x24>)
 80008a4:	f002 fc84 	bl	80031b0 <HAL_GPIO_TogglePin>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010800 	.word	0x40010800

080008b4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008c4:	d109      	bne.n	80008da <HAL_GPIO_EXTI_Callback+0x26>
		if(sim_reboot(&sim)){
 80008c6:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008c8:	f000 fe9e 	bl	8001608 <sim_reboot>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <HAL_GPIO_EXTI_Callback+0x26>
			oled_printl(&oled, "sim reboot");
 80008d2:	4905      	ldr	r1, [pc, #20]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x38>)
 80008d6:	f000 fcd1 	bl	800127c <oled_printl>
		}
	}

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000338 	.word	0x20000338
 80008e8:	080079e0 	.word	0x080079e0
 80008ec:	2000034c 	.word	0x2000034c

080008f0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_UART_TxCpltCallback+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d103      	bne.n	800090e <HAL_UART_TxCpltCallback+0x1e>
		oled_printl(&oled, "modbus req sent");
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <HAL_UART_TxCpltCallback+0x2c>)
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_UART_TxCpltCallback+0x30>)
 800090a:	f000 fcb7 	bl	800127c <oled_printl>
	}

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000020c 	.word	0x2000020c
 800091c:	080079ec 	.word	0x080079ec
 8000920:	2000034c 	.word	0x2000034c

08000924 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){

	}
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <HAL_UARTEx_RxEventCallback>:





void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
	oled_printl(&oled, "rx event");
 8000944:	4932      	ldr	r1, [pc, #200]	@ (8000a10 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000948:	f000 fc98 	bl	800127c <oled_printl>
	if(huart->Instance == PHUART_MODBUS->Instance){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	429a      	cmp	r2, r3
 8000958:	d156      	bne.n	8000a08 <HAL_UARTEx_RxEventCallback+0xd0>
		oled_printl(&oled, "modbus response");
 800095a:	4930      	ldr	r1, [pc, #192]	@ (8000a1c <HAL_UARTEx_RxEventCallback+0xe4>)
 800095c:	482d      	ldr	r0, [pc, #180]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 800095e:	f000 fc8d 	bl	800127c <oled_printl>
		MODBUS_MASTER_res normal_res = {0};
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
		MODBUS_MASTER_exception exception = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	809a      	strh	r2, [r3, #4]

		if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_OK){
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	2139      	movs	r1, #57	@ 0x39
 8000982:	4827      	ldr	r0, [pc, #156]	@ (8000a20 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000984:	f000 faa2 	bl	8000ecc <MODBUS_MASTER_response_handler>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d122      	bne.n	80009d4 <HAL_UARTEx_RxEventCallback+0x9c>
			oled_printl(&oled, "MODBUS_RES_OK");
 800098e:	4925      	ldr	r1, [pc, #148]	@ (8000a24 <HAL_UARTEx_RxEventCallback+0xec>)
 8000990:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000992:	f000 fc73 	bl	800127c <oled_printl>
			uint8_t* register_data = normal_res.register_data;
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	61fb      	str	r3, [r7, #28]

			sprintf(mqtt_payload_buff, "0x%X", (uint16_t)((register_data[0]<<8) | register_data[1]));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3301      	adds	r3, #1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	491d      	ldr	r1, [pc, #116]	@ (8000a28 <HAL_UARTEx_RxEventCallback+0xf0>)
 80009b4:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <HAL_UARTEx_RxEventCallback+0xf4>)
 80009b6:	f006 fb21 	bl	8006ffc <siprintf>
			// now publish the data
			mqtt_publish_string(&mqtt_conn, "0", "0", "stm32/plc/register0", mqtt_payload_buff);
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <HAL_UARTEx_RxEventCallback+0xf4>)
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <HAL_UARTEx_RxEventCallback+0xf8>)
 80009c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a34 <HAL_UARTEx_RxEventCallback+0xfc>)
 80009c2:	491c      	ldr	r1, [pc, #112]	@ (8000a34 <HAL_UARTEx_RxEventCallback+0xfc>)
 80009c4:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <HAL_UARTEx_RxEventCallback+0x100>)
 80009c6:	f000 fbaf 	bl	8001128 <mqtt_publish_string>
			oled_printl(&oled, "published");
 80009ca:	491c      	ldr	r1, [pc, #112]	@ (8000a3c <HAL_UARTEx_RxEventCallback+0x104>)
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 80009ce:	f000 fc55 	bl	800127c <oled_printl>


	}


}
 80009d2:	e019      	b.n	8000a08 <HAL_UARTEx_RxEventCallback+0xd0>
		else if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_EXCEPTION){
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	2139      	movs	r1, #57	@ 0x39
 80009de:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <HAL_UARTEx_RxEventCallback+0xe8>)
 80009e0:	f000 fa74 	bl	8000ecc <MODBUS_MASTER_response_handler>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10a      	bne.n	8000a00 <HAL_UARTEx_RxEventCallback+0xc8>
			oled_printl(&oled, "MODBUS_RES_EXCEPTION");
 80009ea:	4915      	ldr	r1, [pc, #84]	@ (8000a40 <HAL_UARTEx_RxEventCallback+0x108>)
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 80009ee:	f000 fc45 	bl	800127c <oled_printl>
			sprintf(oled_buff, "exception 0x%X", (uint16_t) exception.exception_code);
 80009f2:	7abb      	ldrb	r3, [r7, #10]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4913      	ldr	r1, [pc, #76]	@ (8000a44 <HAL_UARTEx_RxEventCallback+0x10c>)
 80009f8:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <HAL_UARTEx_RxEventCallback+0x110>)
 80009fa:	f006 faff 	bl	8006ffc <siprintf>
}
 80009fe:	e003      	b.n	8000a08 <HAL_UARTEx_RxEventCallback+0xd0>
			oled_printl(&oled, "UNKNOWN RESPONSE!");
 8000a00:	4912      	ldr	r1, [pc, #72]	@ (8000a4c <HAL_UARTEx_RxEventCallback+0x114>)
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000a04:	f000 fc3a 	bl	800127c <oled_printl>
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080079fc 	.word	0x080079fc
 8000a14:	2000034c 	.word	0x2000034c
 8000a18:	2000020c 	.word	0x2000020c
 8000a1c:	08007a08 	.word	0x08007a08
 8000a20:	20000374 	.word	0x20000374
 8000a24:	08007a18 	.word	0x08007a18
 8000a28:	08007a28 	.word	0x08007a28
 8000a2c:	200003c8 	.word	0x200003c8
 8000a30:	08007a30 	.word	0x08007a30
 8000a34:	08007a44 	.word	0x08007a44
 8000a38:	20000354 	.word	0x20000354
 8000a3c:	08007a48 	.word	0x08007a48
 8000a40:	08007a54 	.word	0x08007a54
 8000a44:	08007a6c 	.word	0x08007a6c
 8000a48:	200003dc 	.word	0x200003dc
 8000a4c:	08007a7c 	.word	0x08007a7c

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f001 fbf9 	bl	800224c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f865 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f7ff fe43 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a62:	f7ff fe23 	bl	80006ac <MX_DMA_Init>
  MX_I2C1_Init();
 8000a66:	f7ff fea5 	bl	80007b4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000a6a:	f000 fc6f 	bl	800134c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000a6e:	f001 fab5 	bl	8001fdc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a72:	f001 fadd 	bl	8002030 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  oled_init(&oled, &hi2c1);
 8000a76:	491b      	ldr	r1, [pc, #108]	@ (8000ae4 <main+0x94>)
 8000a78:	481b      	ldr	r0, [pc, #108]	@ (8000ae8 <main+0x98>)
 8000a7a:	f000 fc41 	bl	8001300 <oled_init>
  sim_init(&sim, PHUART_SIM, "mtnirancell", "", "");
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <main+0x9c>)
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <main+0xa0>)
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <main+0xa0>)
 8000a88:	4a1a      	ldr	r2, [pc, #104]	@ (8000af4 <main+0xa4>)
 8000a8a:	481b      	ldr	r0, [pc, #108]	@ (8000af8 <main+0xa8>)
 8000a8c:	f000 fd3c 	bl	8001508 <sim_init>
  mqtt_init(&mqtt_conn, &sim, "stm32", "185.165.30.166", "1883", "", "", MQTT_KEEPTIME);
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <main+0xac>)
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <main+0xa0>)
 8000a96:	9302      	str	r3, [sp, #8]
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <main+0xa0>)
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <main+0xb0>)
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <main+0xb4>)
 8000aa2:	4a19      	ldr	r2, [pc, #100]	@ (8000b08 <main+0xb8>)
 8000aa4:	4914      	ldr	r1, [pc, #80]	@ (8000af8 <main+0xa8>)
 8000aa6:	4819      	ldr	r0, [pc, #100]	@ (8000b0c <main+0xbc>)
 8000aa8:	f000 fa90 	bl	8000fcc <mqtt_init>
  MODBUS_MASTER_init(&master, PHUART_MODBUS, modbus_tx_buff, modbus_rx_buff);
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <main+0xc0>)
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <main+0xc4>)
 8000ab2:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <main+0xc8>)
 8000ab4:	4819      	ldr	r0, [pc, #100]	@ (8000b1c <main+0xcc>)
 8000ab6:	f000 f993 	bl	8000de0 <MODBUS_MASTER_init>


setup:
  if(setup()){
 8000aba:	f000 f89d 	bl	8000bf8 <setup>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <main+0x82>
	  repeative_task();
 8000ac4:	f000 f88c 	bl	8000be0 <repeative_task>
	  rtc_set_alarm_seconds_it(&hrtc, REPEAT_DELAY);
 8000ac8:	210a      	movs	r1, #10
 8000aca:	4815      	ldr	r0, [pc, #84]	@ (8000b20 <main+0xd0>)
 8000acc:	f000 fccc 	bl	8001468 <rtc_set_alarm_seconds_it>
 8000ad0:	e007      	b.n	8000ae2 <main+0x92>
  }
  else{
	  oled_printl(&oled, "sim reboot");
 8000ad2:	4914      	ldr	r1, [pc, #80]	@ (8000b24 <main+0xd4>)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <main+0x98>)
 8000ad6:	f000 fbd1 	bl	800127c <oled_printl>
	  sim_reboot(&sim);
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <main+0xa8>)
 8000adc:	f000 fd94 	bl	8001608 <sim_reboot>
	  goto setup;
 8000ae0:	e7eb      	b.n	8000aba <main+0x6a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0x92>
 8000ae4:	200002e4 	.word	0x200002e4
 8000ae8:	2000034c 	.word	0x2000034c
 8000aec:	20000208 	.word	0x20000208
 8000af0:	08007a90 	.word	0x08007a90
 8000af4:	08007a94 	.word	0x08007a94
 8000af8:	20000338 	.word	0x20000338
 8000afc:	08007ab8 	.word	0x08007ab8
 8000b00:	08007abc 	.word	0x08007abc
 8000b04:	08007aa0 	.word	0x08007aa0
 8000b08:	08007ab0 	.word	0x08007ab0
 8000b0c:	20000354 	.word	0x20000354
 8000b10:	2000020c 	.word	0x2000020c
 8000b14:	20000388 	.word	0x20000388
 8000b18:	20000380 	.word	0x20000380
 8000b1c:	20000374 	.word	0x20000374
 8000b20:	20000450 	.word	0x20000450
 8000b24:	080079e0 	.word	0x080079e0

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	@ 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b32:	2228      	movs	r2, #40	@ 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fa80 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b74:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 f892 	bl	8003ca8 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b8a:	f000 f919 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fbea 	bl	8004384 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bb6:	f000 f903 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000bbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fe10 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bd2:	f000 f8f5 	bl	8000dc0 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3750      	adds	r7, #80	@ 0x50
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <repeative_task>:

/* USER CODE BEGIN 4 */


void repeative_task(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	MODBUS_MASTER_read_coils(&master, MODBUS_SLAVE_ADDR, 0, 5);
 8000be4:	2305      	movs	r3, #5
 8000be6:	2200      	movs	r2, #0
 8000be8:	2139      	movs	r1, #57	@ 0x39
 8000bea:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <repeative_task+0x14>)
 8000bec:	f000 f9d3 	bl	8000f96 <MODBUS_MASTER_read_coils>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000374 	.word	0x20000374

08000bf8 <setup>:




bool setup(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	  oled_printl(&oled, "Please wait");
 8000bfe:	495f      	ldr	r1, [pc, #380]	@ (8000d7c <setup+0x184>)
 8000c00:	485f      	ldr	r0, [pc, #380]	@ (8000d80 <setup+0x188>)
 8000c02:	f000 fb3b 	bl	800127c <oled_printl>
	  HAL_Delay(15000);
 8000c06:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000c0a:	f001 fb81 	bl	8002310 <HAL_Delay>
	  oled_printl(&oled, "sending AT..");
 8000c0e:	495d      	ldr	r1, [pc, #372]	@ (8000d84 <setup+0x18c>)
 8000c10:	485b      	ldr	r0, [pc, #364]	@ (8000d80 <setup+0x188>)
 8000c12:	f000 fb33 	bl	800127c <oled_printl>
	  if(sim_test_at(&sim)){
 8000c16:	485c      	ldr	r0, [pc, #368]	@ (8000d88 <setup+0x190>)
 8000c18:	f000 fcd4 	bl	80015c4 <sim_test_at>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <setup+0x3a>
		  oled_printl(&oled, "AT OK!");
 8000c22:	495a      	ldr	r1, [pc, #360]	@ (8000d8c <setup+0x194>)
 8000c24:	4856      	ldr	r0, [pc, #344]	@ (8000d80 <setup+0x188>)
 8000c26:	f000 fb29 	bl	800127c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_AT_OK){
 8000c2a:	e002      	b.n	8000c32 <setup+0x3a>
		  sim_test_at(&sim);
 8000c2c:	4856      	ldr	r0, [pc, #344]	@ (8000d88 <setup+0x190>)
 8000c2e:	f000 fcc9 	bl	80015c4 <sim_test_at>
	  while(sim.state < SIM_STATE_AT_OK){
 8000c32:	4b55      	ldr	r3, [pc, #340]	@ (8000d88 <setup+0x190>)
 8000c34:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dbf7      	blt.n	8000c2c <setup+0x34>
	  }
	  if(sim_report_error_enable(&sim)){
 8000c3c:	4852      	ldr	r0, [pc, #328]	@ (8000d88 <setup+0x190>)
 8000c3e:	f000 fd15 	bl	800166c <sim_report_error_enable>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <setup+0x58>
		  oled_printl(&oled, "+CMEE=2");
 8000c48:	4951      	ldr	r1, [pc, #324]	@ (8000d90 <setup+0x198>)
 8000c4a:	484d      	ldr	r0, [pc, #308]	@ (8000d80 <setup+0x188>)
 8000c4c:	f000 fb16 	bl	800127c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_REPORT_ERROR_ENABLED){}
 8000c50:	bf00      	nop
 8000c52:	4b4d      	ldr	r3, [pc, #308]	@ (8000d88 <setup+0x190>)
 8000c54:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	ddfa      	ble.n	8000c52 <setup+0x5a>
	  if(sim_is_ready(&sim)){
 8000c5c:	484a      	ldr	r0, [pc, #296]	@ (8000d88 <setup+0x190>)
 8000c5e:	f000 fd2b 	bl	80016b8 <sim_is_ready>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <setup+0x78>
		  oled_printl(&oled, "ready");
 8000c68:	494a      	ldr	r1, [pc, #296]	@ (8000d94 <setup+0x19c>)
 8000c6a:	4845      	ldr	r0, [pc, #276]	@ (8000d80 <setup+0x188>)
 8000c6c:	f000 fb06 	bl	800127c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_PIN_READY){}
 8000c70:	bf00      	nop
 8000c72:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <setup+0x190>)
 8000c74:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	ddfa      	ble.n	8000c72 <setup+0x7a>
	  if(sim_registered(&sim)){
 8000c7c:	4842      	ldr	r0, [pc, #264]	@ (8000d88 <setup+0x190>)
 8000c7e:	f000 fd6b 	bl	8001758 <sim_registered>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <setup+0x98>
		  oled_printl(&oled, "registered");
 8000c88:	4943      	ldr	r1, [pc, #268]	@ (8000d98 <setup+0x1a0>)
 8000c8a:	483d      	ldr	r0, [pc, #244]	@ (8000d80 <setup+0x188>)
 8000c8c:	f000 faf6 	bl	800127c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CREG_OK){}
 8000c90:	bf00      	nop
 8000c92:	4b3d      	ldr	r3, [pc, #244]	@ (8000d88 <setup+0x190>)
 8000c94:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	ddfa      	ble.n	8000c92 <setup+0x9a>
	  if(sim_gprs_registered(&sim)){
 8000c9c:	483a      	ldr	r0, [pc, #232]	@ (8000d88 <setup+0x190>)
 8000c9e:	f000 fd89 	bl	80017b4 <sim_gprs_registered>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <setup+0xb8>
		  oled_printl(&oled, "gprs registered");
 8000ca8:	493c      	ldr	r1, [pc, #240]	@ (8000d9c <setup+0x1a4>)
 8000caa:	4835      	ldr	r0, [pc, #212]	@ (8000d80 <setup+0x188>)
 8000cac:	f000 fae6 	bl	800127c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CGREG_OK){}
 8000cb0:	bf00      	nop
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <setup+0x190>)
 8000cb4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	ddfa      	ble.n	8000cb2 <setup+0xba>

	  //mqtt disconnect
	  if(!mqtt_disconnect(&mqtt_conn)){
 8000cbc:	4838      	ldr	r0, [pc, #224]	@ (8000da0 <setup+0x1a8>)
 8000cbe:	f000 fa13 	bl	80010e8 <mqtt_disconnect>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <setup+0xde>
	  	  oled_printl(&oled, "broker disconnect error!");
 8000cce:	4935      	ldr	r1, [pc, #212]	@ (8000da4 <setup+0x1ac>)
 8000cd0:	482b      	ldr	r0, [pc, #172]	@ (8000d80 <setup+0x188>)
 8000cd2:	f000 fad3 	bl	800127c <oled_printl>
	   }


	  // gprs disconnect
	  if(!sim_gprs_disconnect(&sim)){
 8000cd6:	482c      	ldr	r0, [pc, #176]	@ (8000d88 <setup+0x190>)
 8000cd8:	f000 fdd4 	bl	8001884 <sim_gprs_disconnect>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <setup+0xf8>
		  oled_printl(&oled, "gprs disconnected already!");
 8000ce8:	492f      	ldr	r1, [pc, #188]	@ (8000da8 <setup+0x1b0>)
 8000cea:	4825      	ldr	r0, [pc, #148]	@ (8000d80 <setup+0x188>)
 8000cec:	f000 fac6 	bl	800127c <oled_printl>
	  }

	  HAL_Delay(5000);
 8000cf0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cf4:	f001 fb0c 	bl	8002310 <HAL_Delay>
	  if(sim_gprs_connect(&sim)){
 8000cf8:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <setup+0x190>)
 8000cfa:	f000 fd89 	bl	8001810 <sim_gprs_connect>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d030      	beq.n	8000d66 <setup+0x16e>
	//	  sim_event_listen_once(&sim);
		  uint8_t i = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
		  oled_printl(&oled, "activatin app network");
 8000d08:	4928      	ldr	r1, [pc, #160]	@ (8000dac <setup+0x1b4>)
 8000d0a:	481d      	ldr	r0, [pc, #116]	@ (8000d80 <setup+0x188>)
 8000d0c:	f000 fab6 	bl	800127c <oled_printl>
		  while(!(sim.app_network)){
 8000d10:	e012      	b.n	8000d38 <setup+0x140>
			  i++;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	3301      	adds	r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]
			  HAL_Delay(5000);
 8000d18:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d1c:	f001 faf8 	bl	8002310 <HAL_Delay>
			  oled_printl(&oled, "retrying app net");
 8000d20:	4923      	ldr	r1, [pc, #140]	@ (8000db0 <setup+0x1b8>)
 8000d22:	4817      	ldr	r0, [pc, #92]	@ (8000d80 <setup+0x188>)
 8000d24:	f000 faaa 	bl	800127c <oled_printl>
			  sim_gprs_connect(&sim);
 8000d28:	4817      	ldr	r0, [pc, #92]	@ (8000d88 <setup+0x190>)
 8000d2a:	f000 fd71 	bl	8001810 <sim_gprs_connect>

			  if(i>3){
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d901      	bls.n	8000d38 <setup+0x140>
				  return false;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e01d      	b.n	8000d74 <setup+0x17c>
		  while(!(sim.app_network)){
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <setup+0x190>)
 8000d3a:	7c5b      	ldrb	r3, [r3, #17]
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1e5      	bne.n	8000d12 <setup+0x11a>
			  }
		  }
	//	  HAL_UART_AbortReceive_IT(sim.huart);

		  oled_printl(&oled, "Connecting to broker");
 8000d46:	491b      	ldr	r1, [pc, #108]	@ (8000db4 <setup+0x1bc>)
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <setup+0x188>)
 8000d4a:	f000 fa97 	bl	800127c <oled_printl>
		  if(mqtt_connect(&mqtt_conn)){
 8000d4e:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <setup+0x1a8>)
 8000d50:	f000 f964 	bl	800101c <mqtt_connect>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <setup+0x17a>
			  oled_printl(&oled, "Connected to broker");
 8000d5a:	4917      	ldr	r1, [pc, #92]	@ (8000db8 <setup+0x1c0>)
 8000d5c:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <setup+0x188>)
 8000d5e:	f000 fa8d 	bl	800127c <oled_printl>
			  return true;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e006      	b.n	8000d74 <setup+0x17c>
		  }
	  }
	  else{
	  	  oled_printl(&oled, "app network FAILED");
 8000d66:	4915      	ldr	r1, [pc, #84]	@ (8000dbc <setup+0x1c4>)
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <setup+0x188>)
 8000d6a:	f000 fa87 	bl	800127c <oled_printl>
	  	  return false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <setup+0x17c>
	  }
	  return false;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08007ac4 	.word	0x08007ac4
 8000d80:	2000034c 	.word	0x2000034c
 8000d84:	08007ad0 	.word	0x08007ad0
 8000d88:	20000338 	.word	0x20000338
 8000d8c:	08007ae0 	.word	0x08007ae0
 8000d90:	08007ae8 	.word	0x08007ae8
 8000d94:	08007af0 	.word	0x08007af0
 8000d98:	08007af8 	.word	0x08007af8
 8000d9c:	08007b04 	.word	0x08007b04
 8000da0:	20000354 	.word	0x20000354
 8000da4:	08007b14 	.word	0x08007b14
 8000da8:	08007b30 	.word	0x08007b30
 8000dac:	08007b4c 	.word	0x08007b4c
 8000db0:	08007b64 	.word	0x08007b64
 8000db4:	08007b78 	.word	0x08007b78
 8000db8:	08007b90 	.word	0x08007b90
 8000dbc:	08007ba4 	.word	0x08007ba4

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <MODBUS_MASTER_init>:
void MODBUS_MASTER_init(
		MODBUS_MASTER_InitTypeDef *master,
		UART_HandleTypeDef *huart,
		uint8_t *pchTxBuffer,
		uint8_t *pchRxBuffer)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	master->huart = huart;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	601a      	str	r2, [r3, #0]
	master->pchRxBuffer = pchRxBuffer;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	609a      	str	r2, [r3, #8]
	master->pchTxBuffer = pchTxBuffer;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <MODBUS_MASTER_request>:


void MODBUS_MASTER_request(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint8_t function_code, uint16_t register_addr, uint16_t number_of_points){
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	461a      	mov	r2, r3
 8000e18:	4603      	mov	r3, r0
 8000e1a:	70fb      	strb	r3, [r7, #3]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70bb      	strb	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	803b      	strh	r3, [r7, #0]
	uint16_t rx_size = number_of_points * 2 + 5;
 8000e24:	8b3b      	ldrh	r3, [r7, #24]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	81fb      	strh	r3, [r7, #14]


	pMaster->pchTxBuffer[0] = slave_addr;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[1] = function_code;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	78ba      	ldrb	r2, [r7, #2]
 8000e3e:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[2] = register_addr>>8;
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[3] = register_addr;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	3303      	adds	r3, #3
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[4] = number_of_points>>8;
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	3304      	adds	r3, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[5] = number_of_points;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	3305      	adds	r3, #5
 8000e72:	8b3a      	ldrh	r2, [r7, #24]
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]
	uint16_t crc = CRC16(pMaster->pchTxBuffer, 6);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2106      	movs	r1, #6
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fbde 	bl	8000640 <CRC16>
 8000e84:	4603      	mov	r3, r0
 8000e86:	81bb      	strh	r3, [r7, #12]
	pMaster->pchTxBuffer[6] = crc&0xff;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	89ba      	ldrh	r2, [r7, #12]
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[7] = (crc>>8)&0xff;
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]


	HAL_UART_Transmit_IT(pMaster->huart, pMaster->pchTxBuffer, TX_SIZE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2208      	movs	r2, #8
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f005 f803 	bl	8005eba <HAL_UART_Transmit_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(pMaster->huart, pMaster->pchRxBuffer, rx_size);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	89fa      	ldrh	r2, [r7, #14]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f005 f904 	bl	80060cc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <MODBUS_MASTER_response_handler>:
		MODBUS_MASTER_InitTypeDef *pMaster,
		uint8_t slave_addr,
		MODBUS_MASTER_res *pNormalRes,
		MODBUS_MASTER_exception *pException
		)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_size = strlen(pMaster->pchRxBuffer);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f933 	bl	800014c <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	75fb      	strb	r3, [r7, #23]
	if(pMaster->pchRxBuffer[0] == slave_addr){
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	7afa      	ldrb	r2, [r7, #11]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d14a      	bne.n	8000f8c <MODBUS_MASTER_response_handler+0xc0>

		if(pMaster->pchRxBuffer[1] >= 0x80){
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da22      	bge.n	8000f4a <MODBUS_MASTER_response_handler+0x7e>
			// Exception
			pNormalRes = NULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
			pException->slave_addr = pMaster->pchRxBuffer[0];
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
			pException->function_code = pMaster->pchRxBuffer[1];
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	785a      	ldrb	r2, [r3, #1]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	705a      	strb	r2, [r3, #1]
			pException->exception_code = pMaster->pchRxBuffer[2];
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	789a      	ldrb	r2, [r3, #2]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	709a      	strb	r2, [r3, #2]
			pException->crc = (pMaster->pchRxBuffer[3] >> 8) | (pMaster->pchRxBuffer[4]);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	3303      	adds	r3, #3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	121b      	asrs	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	3304      	adds	r3, #4
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	809a      	strh	r2, [r3, #4]

			return MODBUS_RES_EXCEPTION;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e021      	b.n	8000f8e <MODBUS_MASTER_response_handler+0xc2>
		}

		else{
			pException = NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
			pNormalRes->slave_addr = pMaster->pchRxBuffer[0];
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
			pNormalRes->function_code = pMaster->pchRxBuffer[1];
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	785a      	ldrb	r2, [r3, #1]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	705a      	strb	r2, [r3, #1]
			pNormalRes->byte_count = pMaster->pchRxBuffer[2];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	789a      	ldrb	r2, [r3, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	709a      	strb	r2, [r3, #2]
			pNormalRes->register_data = pMaster->pchRxBuffer+3;	// Last 2 bytes are CRC
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	1cda      	adds	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	605a      	str	r2, [r3, #4]
			pNormalRes->crc = pMaster->pchRxBuffer + 3 + pNormalRes->byte_count;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	789b      	ldrb	r3, [r3, #2]
 8000f7e:	3303      	adds	r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	811a      	strh	r2, [r3, #8]

			//clear crc from response
//			strcpy(pNormalRes->crc, "");

			return MODBUS_RES_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e000      	b.n	8000f8e <MODBUS_MASTER_response_handler+0xc2>
		}
	}
	else{
		return MODBUS_RES_UNKNOWN;
 8000f8c:	2302      	movs	r3, #2
	}
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <MODBUS_MASTER_read_coils>:



void MODBUS_MASTER_read_coils(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint16_t register_addr, uint16_t number_of_points){
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af02      	add	r7, sp, #8
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	72fb      	strb	r3, [r7, #11]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	813b      	strh	r3, [r7, #8]
 8000fac:	4613      	mov	r3, r2
 8000fae:	80fb      	strh	r3, [r7, #6]
	MODBUS_MASTER_request(pMaster, slave_addr, 1, register_addr, number_of_points);
 8000fb0:	893a      	ldrh	r2, [r7, #8]
 8000fb2:	7af9      	ldrb	r1, [r7, #11]
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	2201      	movs	r2, #1
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff24 	bl	8000e0a <MODBUS_MASTER_request>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <mqtt_init>:
	char* url,
	char* port,
	char* username,
	char* password,
	char* keep_time)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
	pMqttConn->sim = pSim;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	601a      	str	r2, [r3, #0]
	pMqttConn->client_id = client_id;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	pMqttConn->url = url;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	609a      	str	r2, [r3, #8]
	pMqttConn->port = port;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	60da      	str	r2, [r3, #12]
	pMqttConn->username = username;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	611a      	str	r2, [r3, #16]
	pMqttConn->password = password;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a3a      	ldr	r2, [r7, #32]
 8000ffc:	615a      	str	r2, [r3, #20]
	pMqttConn->keep_time = keep_time;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001002:	619a      	str	r2, [r3, #24]
	pMqttConn->connected = false;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	771a      	strb	r2, [r3, #28]
	flush_buff(mqtt_rx_buff);
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <mqtt_init+0x4c>)
 800100c:	f7ff f8ce 	bl	80001ac <flush_buff>


}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200003ec 	.word	0x200003ec

0800101c <mqtt_connect>:



bool mqtt_connect(mqtt_conn_t* pMqttConn){
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af06      	add	r7, sp, #24
 8001022:	6078      	str	r0, [r7, #4]
	if(pMqttConn->sim->app_network){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	7c5b      	ldrb	r3, [r3, #17]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d045      	beq.n	80010ba <mqtt_connect+0x9e>
		if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 5, "\"URL\",\"", pMqttConn->url, "\",\"", pMqttConn->port, "\"")){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <mqtt_connect+0xb0>)
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68d2      	ldr	r2, [r2, #12]
 8001040:	4c23      	ldr	r4, [pc, #140]	@ (80010d0 <mqtt_connect+0xb4>)
 8001042:	9405      	str	r4, [sp, #20]
 8001044:	9204      	str	r2, [sp, #16]
 8001046:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <mqtt_connect+0xb8>)
 8001048:	9203      	str	r2, [sp, #12]
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <mqtt_connect+0xbc>)
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	2305      	movs	r3, #5
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001058:	460a      	mov	r2, r1
 800105a:	4920      	ldr	r1, [pc, #128]	@ (80010dc <mqtt_connect+0xc0>)
 800105c:	f7ff f900 	bl	8000260 <at_write>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d02c      	beq.n	80010c0 <mqtt_connect+0xa4>
			if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 2, "\"KEEPTIME\",", pMqttConn->keep_time)){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <mqtt_connect+0xb0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <mqtt_connect+0xc4>)
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	2302      	movs	r3, #2
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001082:	4916      	ldr	r1, [pc, #88]	@ (80010dc <mqtt_connect+0xc0>)
 8001084:	f7ff f8ec 	bl	8000260 <at_write>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d018      	beq.n	80010c0 <mqtt_connect+0xa4>

				HAL_Delay(2000);
 800108e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001092:	f001 f93d 	bl	8002310 <HAL_Delay>
				if(at_execute_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smconn, 20000)>0){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <mqtt_connect+0xc8>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80010a4:	490d      	ldr	r1, [pc, #52]	@ (80010dc <mqtt_connect+0xc0>)
 80010a6:	f7ff fa6f 	bl	8000588 <at_execute_blocking>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <mqtt_connect+0xa4>
					pMqttConn->connected = true;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	771a      	strb	r2, [r3, #28]
					return true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e003      	b.n	80010c2 <mqtt_connect+0xa6>
				}
			}
		}
	}
	else{
		pMqttConn->connected = false;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	771a      	strb	r2, [r3, #28]
	}
	return false;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000210 	.word	0x20000210
 80010d0:	08007be0 	.word	0x08007be0
 80010d4:	08007be4 	.word	0x08007be4
 80010d8:	08007be8 	.word	0x08007be8
 80010dc:	200003ec 	.word	0x200003ec
 80010e0:	08007bf0 	.word	0x08007bf0
 80010e4:	20000214 	.word	0x20000214

080010e8 <mqtt_disconnect>:




bool mqtt_disconnect(mqtt_conn_t* pMqttConn){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(at_execute(pMqttConn->sim->huart, mqtt_rx_buff, smdisc, 5000)){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <mqtt_disconnect+0x38>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010fe:	4909      	ldr	r1, [pc, #36]	@ (8001124 <mqtt_disconnect+0x3c>)
 8001100:	f7ff f924 	bl	800034c <at_execute>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <mqtt_disconnect+0x2c>
		pMqttConn->connected = false;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	771a      	strb	r2, [r3, #28]
		return true;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <mqtt_disconnect+0x2e>
	}
	return false;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000021c 	.word	0x2000021c
 8001124:	200003ec 	.word	0x200003ec

08001128 <mqtt_publish_string>:





bool mqtt_publish_string(mqtt_conn_t* pMqttConn, char* qos, char* retain, char* topic, char* payload){
 8001128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112c:	b095      	sub	sp, #84	@ 0x54
 800112e:	af0a      	add	r7, sp, #40	@ 0x28
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	603b      	str	r3, [r7, #0]
	if(pMqttConn->connected){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8084 	beq.w	800124a <mqtt_publish_string+0x122>
		uint8_t content_length = strlen(payload);
 8001142:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001144:	f7ff f802 	bl	800014c <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		char content_len[5];
		sprintf(content_len, "%d", content_length);
 800114e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4940      	ldr	r1, [pc, #256]	@ (8001258 <mqtt_publish_string+0x130>)
 8001158:	4618      	mov	r0, r3
 800115a:	f005 ff4f 	bl	8006ffc <siprintf>
		if(pMqttConn->connected){
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	7f1b      	ldrb	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d071      	beq.n	800124a <mqtt_publish_string+0x122>
			if(at_write_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smpub, MQTT_AT_MIN_TIMEOUT, 8, "\"", topic, "\",\"",
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <mqtt_publish_string+0x134>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	9308      	str	r3, [sp, #32]
 8001174:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <mqtt_publish_string+0x138>)
 8001176:	9307      	str	r3, [sp, #28]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	9306      	str	r3, [sp, #24]
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <mqtt_publish_string+0x13c>)
 800117e:	9305      	str	r3, [sp, #20]
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	9304      	str	r3, [sp, #16]
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <mqtt_publish_string+0x140>)
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <mqtt_publish_string+0x144>)
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2308      	movs	r3, #8
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119a:	4935      	ldr	r1, [pc, #212]	@ (8001270 <mqtt_publish_string+0x148>)
 800119c:	f7ff f978 	bl	8000490 <at_write_blocking>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d151      	bne.n	800124a <mqtt_publish_string+0x122>
					content_len, "\",", qos, ",", retain) == AT_STATE_ENTER_INPUT){
 80011a6:	466b      	mov	r3, sp
 80011a8:	461e      	mov	r6, r3
				char msg[content_length+5];
 80011aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011ae:	1d59      	adds	r1, r3, #5
 80011b0:	1e4b      	subs	r3, r1, #1
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	460a      	mov	r2, r1
 80011b6:	2300      	movs	r3, #0
 80011b8:	4690      	mov	r8, r2
 80011ba:	4699      	mov	r9, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011d0:	460a      	mov	r2, r1
 80011d2:	2300      	movs	r3, #0
 80011d4:	4614      	mov	r4, r2
 80011d6:	461d      	mov	r5, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	00eb      	lsls	r3, r5, #3
 80011e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011e6:	00e2      	lsls	r2, r4, #3
 80011e8:	460b      	mov	r3, r1
 80011ea:	3307      	adds	r3, #7
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	ebad 0d03 	sub.w	sp, sp, r3
 80011f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80011f6:	3300      	adds	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
//				sprintf(msg, "%s\x1A\r\n", payload);
				sprintf(msg, "%s", payload);
 80011fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011fc:	491d      	ldr	r1, [pc, #116]	@ (8001274 <mqtt_publish_string+0x14c>)
 80011fe:	69f8      	ldr	r0, [r7, #28]
 8001200:	f005 fefc 	bl	8006ffc <siprintf>
				HAL_UART_Transmit(pMqttConn->sim->huart, msg , strlen(msg), MQTT_AT_MIN_TIMEOUT);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7fe ff9e 	bl	800014c <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001218:	69f9      	ldr	r1, [r7, #28]
 800121a:	4620      	mov	r0, r4
 800121c:	f004 fd38 	bl	8005c90 <HAL_UART_Transmit>
				sprintf(msg, "%c", (char) 26);
 8001220:	221a      	movs	r2, #26
 8001222:	4915      	ldr	r1, [pc, #84]	@ (8001278 <mqtt_publish_string+0x150>)
 8001224:	69f8      	ldr	r0, [r7, #28]
 8001226:	f005 fee9 	bl	8006ffc <siprintf>
				HAL_UART_Transmit_IT(pMqttConn->sim->huart, msg , strlen(msg));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f7fe ff8b 	bl	800014c <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	69f9      	ldr	r1, [r7, #28]
 800123e:	4620      	mov	r0, r4
 8001240:	f004 fe3b 	bl	8005eba <HAL_UART_Transmit_IT>
				return true;
 8001244:	2301      	movs	r3, #1
 8001246:	46b5      	mov	sp, r6
 8001248:	e000      	b.n	800124c <mqtt_publish_string+0x124>
			}
		}
	}
	return false;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	372c      	adds	r7, #44	@ 0x2c
 8001250:	46bd      	mov	sp, r7
 8001252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001256:	bf00      	nop
 8001258:	08007bfc 	.word	0x08007bfc
 800125c:	20000218 	.word	0x20000218
 8001260:	08007c00 	.word	0x08007c00
 8001264:	08007c04 	.word	0x08007c04
 8001268:	08007be4 	.word	0x08007be4
 800126c:	08007be0 	.word	0x08007be0
 8001270:	200003ec 	.word	0x200003ec
 8001274:	08007c08 	.word	0x08007c08
 8001278:	08007c0c 	.word	0x08007c0c

0800127c <oled_printl>:
	ssd1306_UpdateScreen(pOled->pHi2c);
}



void oled_printl(oled_t *pOled, const char* str){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	if(pOled->current_line < 6){
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d81d      	bhi.n	80012ca <oled_printl+0x4e>
		uint8_t y = pOled->current_line * 10;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	461a      	mov	r2, r3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(0, y);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	4619      	mov	r1, r3
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 fdaf 	bl	8001e04 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80012a6:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <oled_printl+0x80>)
 80012a8:	2301      	movs	r3, #1
 80012aa:	ca06      	ldmia	r2, {r1, r2}
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f000 fd83 	bl	8001db8 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fc6c 	bl	8001b94 <ssd1306_UpdateScreen>
		pOled->current_line++;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	711a      	strb	r2, [r3, #4]
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString(str, Font_7x10, White);
		ssd1306_UpdateScreen(pOled->pHi2c);
		pOled->current_line = 1;
	}
}
 80012c8:	e014      	b.n	80012f4 <oled_printl+0x78>
		ssd1306_Fill(Black);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fc40 	bl	8001b50 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 fd96 	bl	8001e04 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <oled_printl+0x80>)
 80012da:	2301      	movs	r3, #1
 80012dc:	ca06      	ldmia	r2, {r1, r2}
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f000 fd6a 	bl	8001db8 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fc53 	bl	8001b94 <ssd1306_UpdateScreen>
		pOled->current_line = 1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	711a      	strb	r2, [r3, #4]
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000200 	.word	0x20000200

08001300 <oled_init>:


void oled_init(oled_t *pOled, I2C_HandleTypeDef *pHi2c){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	 ssd1306_Init(pHi2c);
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f000 fb00 	bl	8001910 <ssd1306_Init>
	 ssd1306_Fill(Black);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 fc1d 	bl	8001b50 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2000      	movs	r0, #0
 800131a:	f000 fd73 	bl	8001e04 <ssd1306_SetCursor>
	 ssd1306_WriteString("Loading...", Font_7x10, White);
 800131e:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <oled_init+0x44>)
 8001320:	2301      	movs	r3, #1
 8001322:	ca06      	ldmia	r2, {r1, r2}
 8001324:	4808      	ldr	r0, [pc, #32]	@ (8001348 <oled_init+0x48>)
 8001326:	f000 fd47 	bl	8001db8 <ssd1306_WriteString>
	 ssd1306_UpdateScreen(pOled->pHi2c);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc30 	bl	8001b94 <ssd1306_UpdateScreen>
	 pOled->pHi2c = pHi2c;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000200 	.word	0x20000200
 8001348:	08007c2c 	.word	0x08007c2c

0800134c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2100      	movs	r1, #0
 8001358:	460a      	mov	r2, r1
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	460a      	mov	r2, r1
 800135e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_RTC_Init+0xac>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_RTC_Init+0xb0>)
 8001370:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_RTC_Init+0xac>)
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_RTC_Init+0xac>)
 800137c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001380:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <MX_RTC_Init+0xac>)
 8001384:	f003 fc08 	bl	8004b98 <HAL_RTC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800138e:	f7ff fd17 	bl	8000dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001396:	2300      	movs	r3, #0
 8001398:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800139a:	2300      	movs	r3, #0
 800139c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <MX_RTC_Init+0xac>)
 80013a8:	f003 fcb6 	bl	8004d18 <HAL_RTC_SetTime>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f7ff fd05 	bl	8000dc0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013b6:	2301      	movs	r3, #1
 80013b8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80013be:	2301      	movs	r3, #1
 80013c0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <MX_RTC_Init+0xac>)
 80013d0:	f003 fe6e 	bl	80050b0 <HAL_RTC_SetDate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80013da:	f7ff fcf1 	bl	8000dc0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013de:	2300      	movs	r3, #0
 80013e0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
//  }
//  /* USER CODE BEGIN RTC_Init 2 */
//
//  /* USER CODE END RTC_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000450 	.word	0x20000450
 80013fc:	40002800 	.word	0x40002800

08001400 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a13      	ldr	r2, [pc, #76]	@ (800145c <HAL_RTC_MspInit+0x5c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d120      	bne.n	8001454 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001412:	f002 fc3d 	bl	8003c90 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_RTC_MspInit+0x60>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_RTC_MspInit+0x60>)
 800141c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_RTC_MspInit+0x60>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HAL_RTC_MspInit+0x64>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2003      	movs	r0, #3
 800143a:	f001 f879 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800143e:	2003      	movs	r0, #3
 8001440:	f001 f8a2 	bl	8002588 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2029      	movs	r0, #41	@ 0x29
 800144a:	f001 f871 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800144e:	2029      	movs	r0, #41	@ 0x29
 8001450:	f001 f89a 	bl	8002588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40002800 	.word	0x40002800
 8001460:	40021000 	.word	0x40021000
 8001464:	4242043c 	.word	0x4242043c

08001468 <rtc_set_alarm_seconds_it>:

#include "rtc_delay.h"



void rtc_set_alarm_seconds_it(RTC_HandleTypeDef* hrtc, uint16_t seconds){
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
	RTC_AlarmTypeDef sAlarm;

	    // Get the current time
	    RTC_TimeTypeDef sTime;
	    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f003 fd31 	bl	8004ee4 <HAL_RTC_GetTime>

	    // Calculate alarm time (current time + period)
	    sAlarm.AlarmTime.Seconds = sTime.Seconds + seconds;
 8001482:	7bba      	ldrb	r2, [r7, #14]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	74bb      	strb	r3, [r7, #18]
	    sAlarm.AlarmTime.Minutes = sTime.Minutes;
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	747b      	strb	r3, [r7, #17]
	    sAlarm.AlarmTime.Hours = sTime.Hours;
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	743b      	strb	r3, [r7, #16]

	    // Normalize alarm time
	    if (sAlarm.AlarmTime.Seconds >= 60) {
 8001496:	7cbb      	ldrb	r3, [r7, #18]
 8001498:	2b3b      	cmp	r3, #59	@ 0x3b
 800149a:	d907      	bls.n	80014ac <rtc_set_alarm_seconds_it+0x44>
	        sAlarm.AlarmTime.Seconds -= 60;
 800149c:	7cbb      	ldrb	r3, [r7, #18]
 800149e:	3b3c      	subs	r3, #60	@ 0x3c
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	74bb      	strb	r3, [r7, #18]
	        sAlarm.AlarmTime.Minutes++;
 80014a4:	7c7b      	ldrb	r3, [r7, #17]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	747b      	strb	r3, [r7, #17]
	    }
	    if (sAlarm.AlarmTime.Minutes >= 60) {
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80014b0:	d907      	bls.n	80014c2 <rtc_set_alarm_seconds_it+0x5a>
	        sAlarm.AlarmTime.Minutes -= 60;
 80014b2:	7c7b      	ldrb	r3, [r7, #17]
 80014b4:	3b3c      	subs	r3, #60	@ 0x3c
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	747b      	strb	r3, [r7, #17]
	        sAlarm.AlarmTime.Hours++;
 80014ba:	7c3b      	ldrb	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	743b      	strb	r3, [r7, #16]
	    }
	    if (sAlarm.AlarmTime.Hours >= 24) {
 80014c2:	7c3b      	ldrb	r3, [r7, #16]
 80014c4:	2b17      	cmp	r3, #23
 80014c6:	d903      	bls.n	80014d0 <rtc_set_alarm_seconds_it+0x68>
	        sAlarm.AlarmTime.Hours -= 24;
 80014c8:	7c3b      	ldrb	r3, [r7, #16]
 80014ca:	3b18      	subs	r3, #24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	743b      	strb	r3, [r7, #16]
	    }

	    sAlarm.Alarm = RTC_ALARM_A;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

	    if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f003 ff05 	bl	80052ec <HAL_RTC_SetAlarm_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <rtc_set_alarm_seconds_it+0x84>
	        Error_Handler();
 80014e8:	f7ff fc6a 	bl	8000dc0 <Error_Handler>
	    }

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_sim_finish_operation>:
char sim_event_buff[SIM_EVENT_BUFF_SIZE];
uint16_t sim_event_rx_len;



bool _sim_finish_operation(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	flush_buff(sim_rx_buff);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <_sim_finish_operation+0x10>)
 80014fa:	f7fe fe57 	bl	80001ac <flush_buff>
	return true;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000464 	.word	0x20000464

08001508 <sim_init>:


void sim_init(sim_t* psim, UART_HandleTypeDef* huart, char* apn, char* username, char* password){
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
	psim->huart = huart;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]
	psim->apn = apn;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
	psim->username = username;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	609a      	str	r2, [r3, #8]
	psim->password = password;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	60da      	str	r2, [r3, #12]
	psim->app_network = false;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	745a      	strb	r2, [r3, #17]


}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <sim_event_poll_once>:
}




void sim_event_poll_once(sim_t* psim, uint32_t timeout){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
//	HAL_UARTEx_ReceiveToIdle(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, &sim_event_rx_len, timeout);
	HAL_UART_Receive(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, timeout);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2232      	movs	r2, #50	@ 0x32
 8001552:	4903      	ldr	r1, [pc, #12]	@ (8001560 <sim_event_poll_once+0x20>)
 8001554:	f004 fc1f 	bl	8005d96 <HAL_UART_Receive>

}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000498 	.word	0x20000498

08001564 <sim_event_handler>:




void sim_event_handler(sim_t* psim, char* event_buff){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]

	if(strlen(event_buff) > 0){
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01b      	beq.n	80015ae <sim_event_handler+0x4a>
		if(find_substr(event_buff, "+APP")){
 8001576:	4910      	ldr	r1, [pc, #64]	@ (80015b8 <sim_event_handler+0x54>)
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f7fe fe03 	bl	8000184 <find_substr>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d014      	beq.n	80015ae <sim_event_handler+0x4a>
			if(find_substr(event_buff, "ACTIVE")){
 8001584:	490d      	ldr	r1, [pc, #52]	@ (80015bc <sim_event_handler+0x58>)
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f7fe fdfc 	bl	8000184 <find_substr>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <sim_event_handler+0x36>
				psim->app_network = true;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	745a      	strb	r2, [r3, #17]
			else if(find_substr(event_buff, "DEACTIVE")){
				psim->app_network = false;
			}
		}
	}
}
 8001598:	e009      	b.n	80015ae <sim_event_handler+0x4a>
			else if(find_substr(event_buff, "DEACTIVE")){
 800159a:	4909      	ldr	r1, [pc, #36]	@ (80015c0 <sim_event_handler+0x5c>)
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f7fe fdf1 	bl	8000184 <find_substr>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <sim_event_handler+0x4a>
				psim->app_network = false;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	08007c9c 	.word	0x08007c9c
 80015bc:	08007ca4 	.word	0x08007ca4
 80015c0:	08007cac 	.word	0x08007cac

080015c4 <sim_test_at>:





bool sim_test_at(sim_t* psim){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if(at_execute(psim->huart, sim_rx_buff, "", SIM_AT_MIN_TIMEOUT)){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <sim_test_at+0x3c>)
 80015d6:	490b      	ldr	r1, [pc, #44]	@ (8001604 <sim_test_at+0x40>)
 80015d8:	f7fe feb8 	bl	800034c <at_execute>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <sim_test_at+0x2c>
			psim->state = SIM_STATE_AT_OK;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	741a      	strb	r2, [r3, #16]
			return _sim_finish_operation();
 80015e8:	f7ff ff84 	bl	80014f4 <_sim_finish_operation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	e003      	b.n	80015f8 <sim_test_at+0x34>
	}
	else{
		psim->state = SIM_STATE_OFF;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	22ff      	movs	r2, #255	@ 0xff
 80015f4:	741a      	strb	r2, [r3, #16]
	}
	return false;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08007cb8 	.word	0x08007cb8
 8001604:	20000464 	.word	0x20000464

08001608 <sim_reboot>:



bool sim_reboot(sim_t* psim){
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
	sim_init(psim, psim->huart, psim->apn, psim->username, psim->password);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4603      	mov	r3, r0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff6f 	bl	8001508 <sim_init>
	if(at_write_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT, 2, "1,", "1")){
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <sim_reboot+0x54>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <sim_reboot+0x58>)
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <sim_reboot+0x5c>)
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2302      	movs	r3, #2
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001642:	4909      	ldr	r1, [pc, #36]	@ (8001668 <sim_reboot+0x60>)
 8001644:	f7fe ff24 	bl	8000490 <at_write_blocking>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <sim_reboot+0x4a>
		return true;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <sim_reboot+0x4c>
	}
	return false;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000220 	.word	0x20000220
 8001660:	08007cbc 	.word	0x08007cbc
 8001664:	08007cc0 	.word	0x08007cc0
 8001668:	20000464 	.word	0x20000464

0800166c <sim_report_error_enable>:



bool sim_report_error_enable(sim_t* psim){
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
	if(at_write(psim->huart, sim_rx_buff, cmee, 5000, 1, "2")){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <sim_report_error_enable+0x40>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <sim_report_error_enable+0x44>)
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001688:	490a      	ldr	r1, [pc, #40]	@ (80016b4 <sim_report_error_enable+0x48>)
 800168a:	f7fe fde9 	bl	8000260 <at_write>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <sim_report_error_enable+0x36>
		psim->state = SIM_STATE_REPORT_ERROR_ENABLED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	741a      	strb	r2, [r3, #16]
		return _sim_finish_operation();
 800169a:	f7ff ff2b 	bl	80014f4 <_sim_finish_operation>
 800169e:	4603      	mov	r3, r0
 80016a0:	e000      	b.n	80016a4 <sim_report_error_enable+0x38>
	}
	return false;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000228 	.word	0x20000228
 80016b0:	08007cc4 	.word	0x08007cc4
 80016b4:	20000464 	.word	0x20000464

080016b8 <sim_is_ready>:




bool sim_is_ready(sim_t* psim){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if(psim->state >= SIM_STATE_AT_OK){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db36      	blt.n	8001738 <sim_is_ready+0x80>
		if(at_read_blocking(psim->huart, sim_rx_buff, cpin, SIM_AT_MIN_TIMEOUT)){
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <sim_is_ready+0x8c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016d6:	491c      	ldr	r1, [pc, #112]	@ (8001748 <sim_is_ready+0x90>)
 80016d8:	f7fe fe98 	bl	800040c <at_read_blocking>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <sim_is_ready+0x3e>
			if(find_substr(sim_rx_buff, "READY")){
 80016e2:	491a      	ldr	r1, [pc, #104]	@ (800174c <sim_is_ready+0x94>)
 80016e4:	4818      	ldr	r0, [pc, #96]	@ (8001748 <sim_is_ready+0x90>)
 80016e6:	f7fe fd4d 	bl	8000184 <find_substr>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <sim_is_ready+0x3e>
				psim->state = SIM_STATE_PIN_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	741a      	strb	r2, [r3, #16]
			}
			else{

			}
		}
		if(psim->state == SIM_STATE_PIN_READY){
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d119      	bne.n	8001734 <sim_is_ready+0x7c>
			if(at_read_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT)){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <sim_is_ready+0x98>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <sim_is_ready+0x90>)
 800170e:	f7fe fe7d 	bl	800040c <at_read_blocking>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00d      	beq.n	8001734 <sim_is_ready+0x7c>
				if(find_substr(sim_rx_buff, "+CFUN: 1")){
 8001718:	490e      	ldr	r1, [pc, #56]	@ (8001754 <sim_is_ready+0x9c>)
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <sim_is_ready+0x90>)
 800171c:	f7fe fd32 	bl	8000184 <find_substr>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <sim_is_ready+0x7c>
					psim->state = SIM_STATE_FULL_FUNC;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	741a      	strb	r2, [r3, #16]
					return _sim_finish_operation();
 800172c:	f7ff fee2 	bl	80014f4 <_sim_finish_operation>
 8001730:	4603      	mov	r3, r0
 8001732:	e002      	b.n	800173a <sim_is_ready+0x82>
				else{

				}
			}
		}
		return false;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <sim_is_ready+0x82>
	}
	return false;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000224 	.word	0x20000224
 8001748:	20000464 	.word	0x20000464
 800174c:	08007cc8 	.word	0x08007cc8
 8001750:	20000220 	.word	0x20000220
 8001754:	08007cd0 	.word	0x08007cd0

08001758 <sim_registered>:


bool sim_registered(sim_t* psim){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_FULL_FUNC){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d119      	bne.n	800179e <sim_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, creg, 5000)){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <sim_registered+0x50>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <sim_registered+0x54>)
 8001778:	f7fe fd2c 	bl	80001d4 <at_read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <sim_registered+0x46>
			if(find_substr(sim_rx_buff, "+CREG: 0,1")){
 8001782:	490b      	ldr	r1, [pc, #44]	@ (80017b0 <sim_registered+0x58>)
 8001784:	4809      	ldr	r0, [pc, #36]	@ (80017ac <sim_registered+0x54>)
 8001786:	f7fe fcfd 	bl	8000184 <find_substr>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <sim_registered+0x46>
				psim->state = SIM_STATE_CREG_OK;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2204      	movs	r2, #4
 8001794:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001796:	f7ff fead 	bl	80014f4 <_sim_finish_operation>
 800179a:	4603      	mov	r3, r0
 800179c:	e000      	b.n	80017a0 <sim_registered+0x48>
			else{

			}
		}
	}
	return false;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000022c 	.word	0x2000022c
 80017ac:	20000464 	.word	0x20000464
 80017b0:	08007cdc 	.word	0x08007cdc

080017b4 <sim_gprs_registered>:



bool sim_gprs_registered(sim_t* psim){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CREG_OK){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d119      	bne.n	80017fa <sim_gprs_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, cgreg, 5000)){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <sim_gprs_registered+0x50>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <sim_gprs_registered+0x54>)
 80017d4:	f7fe fcfe 	bl	80001d4 <at_read>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <sim_gprs_registered+0x46>
			if(find_substr(sim_rx_buff, "+CGREG: 0,1")){
 80017de:	490b      	ldr	r1, [pc, #44]	@ (800180c <sim_gprs_registered+0x58>)
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <sim_gprs_registered+0x54>)
 80017e2:	f7fe fccf 	bl	8000184 <find_substr>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <sim_gprs_registered+0x46>
				psim->state = SIM_STATE_CGREG_OK;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 80017f2:	f7ff fe7f 	bl	80014f4 <_sim_finish_operation>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e000      	b.n	80017fc <sim_gprs_registered+0x48>

			}
		}
	}

	return false;
 80017fa:	2300      	movs	r3, #0

}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000230 	.word	0x20000230
 8001808:	20000464 	.word	0x20000464
 800180c:	08007ce8 	.word	0x08007ce8

08001810 <sim_gprs_connect>:



bool sim_gprs_connect(sim_t* psim){
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af04      	add	r7, sp, #16
 8001816:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d11d      	bne.n	800185e <sim_gprs_connect+0x4e>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 100, 2, "1,",SIM_APN_MTN) > 0){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <sim_gprs_connect+0x60>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <sim_gprs_connect+0x64>)
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <sim_gprs_connect+0x68>)
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2364      	movs	r3, #100	@ 0x64
 8001838:	4910      	ldr	r1, [pc, #64]	@ (800187c <sim_gprs_connect+0x6c>)
 800183a:	f7fe fe29 	bl	8000490 <at_write_blocking>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	dd0c      	ble.n	800185e <sim_gprs_connect+0x4e>
//			sim_event_handler(psim);
			sim_event_poll_once(psim, 10000);
 8001844:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fe79 	bl	8001540 <sim_event_poll_once>
			sim_event_handler(psim, sim_event_buff);
 800184e:	490c      	ldr	r1, [pc, #48]	@ (8001880 <sim_gprs_connect+0x70>)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe87 	bl	8001564 <sim_event_handler>
			return _sim_finish_operation();
 8001856:	f7ff fe4d 	bl	80014f4 <_sim_finish_operation>
 800185a:	4603      	mov	r3, r0
 800185c:	e003      	b.n	8001866 <sim_gprs_connect+0x56>
		}

	}
	flush_buff(sim_rx_buff);
 800185e:	4807      	ldr	r0, [pc, #28]	@ (800187c <sim_gprs_connect+0x6c>)
 8001860:	f7fe fca4 	bl	80001ac <flush_buff>
	return false;
 8001864:	2300      	movs	r3, #0

}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000234 	.word	0x20000234
 8001874:	08007cf4 	.word	0x08007cf4
 8001878:	08007cc0 	.word	0x08007cc0
 800187c:	20000464 	.word	0x20000464
 8001880:	20000498 	.word	0x20000498

08001884 <sim_gprs_disconnect>:



bool sim_gprs_disconnect(sim_t* psim){
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d116      	bne.n	80018c4 <sim_gprs_disconnect+0x40>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 5000, 1, "0") > 0){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <sim_gprs_disconnect+0x50>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <sim_gprs_disconnect+0x54>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018aa:	490c      	ldr	r1, [pc, #48]	@ (80018dc <sim_gprs_disconnect+0x58>)
 80018ac:	f7fe fdf0 	bl	8000490 <at_write_blocking>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	dd06      	ble.n	80018c4 <sim_gprs_disconnect+0x40>
			psim->app_network = false;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	745a      	strb	r2, [r3, #17]
//			sim_event_handler(psim);
//			sim_event_poll_once(psim, 60000);
//			sim_event_handler(psim);
			return _sim_finish_operation();
 80018bc:	f7ff fe1a 	bl	80014f4 <_sim_finish_operation>
 80018c0:	4603      	mov	r3, r0
 80018c2:	e003      	b.n	80018cc <sim_gprs_disconnect+0x48>
		}

	}
	flush_buff(sim_rx_buff);
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <sim_gprs_disconnect+0x58>)
 80018c6:	f7fe fc71 	bl	80001ac <flush_buff>
	return false;
 80018ca:	2300      	movs	r3, #0

}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000234 	.word	0x20000234
 80018d8:	08007d04 	.word	0x08007d04
 80018dc:	20000464 	.word	0x20000464

080018e0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80018ec:	230a      	movs	r3, #10
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	1cfb      	adds	r3, r7, #3
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2200      	movs	r2, #0
 80018fc:	2178      	movs	r1, #120	@ 0x78
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f001 fe52 	bl	80035a8 <HAL_I2C_Mem_Write>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	f000 fcf9 	bl	8002310 <HAL_Delay>
    int status = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001922:	21ae      	movs	r1, #174	@ 0xae
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffdb 	bl	80018e0 <ssd1306_WriteCommand>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001934:	2120      	movs	r1, #32
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffd2 	bl	80018e0 <ssd1306_WriteCommand>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001946:	2110      	movs	r1, #16
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ffc9 	bl	80018e0 <ssd1306_WriteCommand>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001958:	21b0      	movs	r1, #176	@ 0xb0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffc0 	bl	80018e0 <ssd1306_WriteCommand>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800196a:	21c8      	movs	r1, #200	@ 0xc8
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffb7 	bl	80018e0 <ssd1306_WriteCommand>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffae 	bl	80018e0 <ssd1306_WriteCommand>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800198e:	2110      	movs	r1, #16
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffa5 	bl	80018e0 <ssd1306_WriteCommand>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80019a0:	2140      	movs	r1, #64	@ 0x40
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff9c 	bl	80018e0 <ssd1306_WriteCommand>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80019b2:	2181      	movs	r1, #129	@ 0x81
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff93 	bl	80018e0 <ssd1306_WriteCommand>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80019c4:	21ff      	movs	r1, #255	@ 0xff
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff8a 	bl	80018e0 <ssd1306_WriteCommand>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80019d6:	21a1      	movs	r1, #161	@ 0xa1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff81 	bl	80018e0 <ssd1306_WriteCommand>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80019e8:	21a6      	movs	r1, #166	@ 0xa6
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff78 	bl	80018e0 <ssd1306_WriteCommand>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80019fa:	21a8      	movs	r1, #168	@ 0xa8
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff6f 	bl	80018e0 <ssd1306_WriteCommand>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001a0c:	213f      	movs	r1, #63	@ 0x3f
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff66 	bl	80018e0 <ssd1306_WriteCommand>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a1e:	21a4      	movs	r1, #164	@ 0xa4
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff5d 	bl	80018e0 <ssd1306_WriteCommand>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001a30:	21d3      	movs	r1, #211	@ 0xd3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff54 	bl	80018e0 <ssd1306_WriteCommand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff4b 	bl	80018e0 <ssd1306_WriteCommand>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001a54:	21d5      	movs	r1, #213	@ 0xd5
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff42 	bl	80018e0 <ssd1306_WriteCommand>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001a66:	21f0      	movs	r1, #240	@ 0xf0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff39 	bl	80018e0 <ssd1306_WriteCommand>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001a78:	21d9      	movs	r1, #217	@ 0xd9
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff30 	bl	80018e0 <ssd1306_WriteCommand>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001a8a:	2122      	movs	r1, #34	@ 0x22
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff27 	bl	80018e0 <ssd1306_WriteCommand>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001a9c:	21da      	movs	r1, #218	@ 0xda
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff1e 	bl	80018e0 <ssd1306_WriteCommand>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001aae:	2112      	movs	r1, #18
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff15 	bl	80018e0 <ssd1306_WriteCommand>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001ac0:	21db      	movs	r1, #219	@ 0xdb
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff0c 	bl	80018e0 <ssd1306_WriteCommand>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff03 	bl	80018e0 <ssd1306_WriteCommand>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001ae4:	218d      	movs	r1, #141	@ 0x8d
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fefa 	bl	80018e0 <ssd1306_WriteCommand>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001af6:	2114      	movs	r1, #20
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fef1 	bl	80018e0 <ssd1306_WriteCommand>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001b08:	21af      	movs	r1, #175	@ 0xaf
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fee8 	bl	80018e0 <ssd1306_WriteCommand>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <ssd1306_Init+0x214>
        return 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00f      	b.n	8001b44 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 f813 	bl	8001b50 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f832 	bl	8001b94 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <ssd1306_Init+0x23c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <ssd1306_Init+0x23c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <ssd1306_Init+0x23c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	715a      	strb	r2, [r3, #5]

    return 0;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200008cc 	.word	0x200008cc

08001b50 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e00d      	b.n	8001b7c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <ssd1306_Fill+0x1a>
 8001b66:	2100      	movs	r1, #0
 8001b68:	e000      	b.n	8001b6c <ssd1306_Fill+0x1c>
 8001b6a:	21ff      	movs	r1, #255	@ 0xff
 8001b6c:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <ssd1306_Fill+0x40>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	460a      	mov	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b82:	d3ed      	bcc.n	8001b60 <ssd1306_Fill+0x10>
    }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	200004cc 	.word	0x200004cc

08001b94 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af04      	add	r7, sp, #16
 8001b9a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e020      	b.n	8001be4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3b50      	subs	r3, #80	@ 0x50
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe98 	bl	80018e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe94 	bl	80018e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001bb8:	2110      	movs	r1, #16
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe90 	bl	80018e0 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	01db      	lsls	r3, r3, #7
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <ssd1306_UpdateScreen+0x60>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2264      	movs	r2, #100	@ 0x64
 8001bca:	9202      	str	r2, [sp, #8]
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	9201      	str	r2, [sp, #4]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	2178      	movs	r1, #120	@ 0x78
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f001 fce5 	bl	80035a8 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d9db      	bls.n	8001ba2 <ssd1306_UpdateScreen+0xe>
    }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200004cc 	.word	0x200004cc

08001bf8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	460b      	mov	r3, r1
 8001c04:	71bb      	strb	r3, [r7, #6]
 8001c06:	4613      	mov	r3, r2
 8001c08:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db48      	blt.n	8001ca4 <ssd1306_DrawPixel+0xac>
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c16:	d845      	bhi.n	8001ca4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <ssd1306_DrawPixel+0xb8>)
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11a      	bne.n	8001c6a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	b2d8      	uxtb	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	4413      	add	r3, r2
 8001c42:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b259      	sxtb	r1, r3
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	01db      	lsls	r3, r3, #7
 8001c60:	4413      	add	r3, r2
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c66:	54d1      	strb	r1, [r2, r3]
 8001c68:	e01d      	b.n	8001ca6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4413      	add	r3, r2
 8001c78:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	b259      	sxtb	r1, r3
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	4603      	mov	r3, r0
 8001c98:	01db      	lsls	r3, r3, #7
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2c9      	uxtb	r1, r1
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001ca0:	54d1      	strb	r1, [r2, r3]
 8001ca2:	e000      	b.n	8001ca6 <ssd1306_DrawPixel+0xae>
        return;
 8001ca4:	bf00      	nop
    }
}
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	200008cc 	.word	0x200008cc
 8001cb4:	200004cc 	.word	0x200004cc

08001cb8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	1d38      	adds	r0, r7, #4
 8001cc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001cd0:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	793b      	ldrb	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cdc:	dc06      	bgt.n	8001cec <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001cde:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001ce0:	885b      	ldrh	r3, [r3, #2]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	797b      	ldrb	r3, [r7, #5]
 8001ce6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001ce8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cea:	dd01      	ble.n	8001cf0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e05c      	b.n	8001daa <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	e04c      	b.n	8001d90 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3b20      	subs	r3, #32
 8001cfc:	7979      	ldrb	r1, [r7, #5]
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	440b      	add	r3, r1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e034      	b.n	8001d80 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d26:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b2d8      	uxtb	r0, r3
 8001d34:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	7bba      	ldrb	r2, [r7, #14]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7ff ff57 	bl	8001bf8 <ssd1306_DrawPixel>
 8001d4a:	e016      	b.n	8001d7a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001d5c:	885b      	ldrh	r3, [r3, #2]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	b2d9      	uxtb	r1, r3
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	f7ff ff3f 	bl	8001bf8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	793b      	ldrb	r3, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d3c5      	bcc.n	8001d16 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	461a      	mov	r2, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d3ad      	bcc.n	8001cf6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	793a      	ldrb	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <ssd1306_WriteChar+0xfc>)
 8001da6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200008cc 	.word	0x200008cc

08001db8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	1d38      	adds	r0, r7, #4
 8001dc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dc6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001dc8:	e012      	b.n	8001df0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	7818      	ldrb	r0, [r3, #0]
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	ca06      	ldmia	r2, {r1, r2}
 8001dd4:	f7ff ff70 	bl	8001cb8 <ssd1306_WriteChar>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d002      	beq.n	8001dea <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	e008      	b.n	8001dfc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3301      	adds	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e8      	bne.n	8001dca <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <ssd1306_SetCursor+0x2c>)
 8001e1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <ssd1306_SetCursor+0x2c>)
 8001e22:	805a      	strh	r2, [r3, #2]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200008cc 	.word	0x200008cc

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_MspInit+0x5c>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_MspInit+0x60>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_MspInit+0x60>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <NMI_Handler+0x4>

08001ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <MemManage_Handler+0x4>

08001eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f9f6 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <RTC_IRQHandler+0x10>)
 8001ef6:	f003 fdd5 	bl	8005aa4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000450 	.word	0x20000450

08001f04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA1_Channel6_IRQHandler+0x10>)
 8001f0a:	f000 fd83 	bl	8002a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000968 	.word	0x20000968

08001f18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <USART1_IRQHandler+0x10>)
 8001f1e:	f004 f933 	bl	8006188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200008d8 	.word	0x200008d8

08001f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <USART2_IRQHandler+0x10>)
 8001f32:	f004 f929 	bl	8006188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000920 	.word	0x20000920

08001f40 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <RTC_Alarm_IRQHandler+0x10>)
 8001f46:	f003 fae1 	bl	800550c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000450 	.word	0x20000450

08001f54 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f58:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f5c:	f001 f94a 	bl	80031f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f005 f880 	bl	8007098 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20005000 	.word	0x20005000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	200008d4 	.word	0x200008d4
 8001fcc:	20000af8 	.word	0x20000af8

08001fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <MX_USART1_UART_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002014:	f003 fd90 	bl	8005b38 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800201e:	f7fe fecf 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200008d8 	.word	0x200008d8
 800202c:	40013800 	.word	0x40013800

08002030 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <MX_USART2_UART_Init+0x50>)
 8002038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 800203c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_USART2_UART_Init+0x4c>)
 8002068:	f003 fd66 	bl	8005b38 <HAL_UART_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002072:	f7fe fea5 	bl	8000dc0 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000920 	.word	0x20000920
 8002080:	40004400 	.word	0x40004400

08002084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_UART_MspInit+0x164>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d13a      	bne.n	800211a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a4:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_UART_MspInit+0x168>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0318 	add.w	r3, r7, #24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4841      	ldr	r0, [pc, #260]	@ (80021f0 <HAL_UART_MspInit+0x16c>)
 80020ea:	f000 fdc7 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	4619      	mov	r1, r3
 8002102:	483b      	ldr	r0, [pc, #236]	@ (80021f0 <HAL_UART_MspInit+0x16c>)
 8002104:	f000 fdba 	bl	8002c7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	2025      	movs	r0, #37	@ 0x25
 800210e:	f000 fa0f 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002112:	2025      	movs	r0, #37	@ 0x25
 8002114:	f000 fa38 	bl	8002588 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002118:	e062      	b.n	80021e0 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a35      	ldr	r2, [pc, #212]	@ (80021f4 <HAL_UART_MspInit+0x170>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d15d      	bne.n	80021e0 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002124:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_UART_MspInit+0x168>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a30      	ldr	r2, [pc, #192]	@ (80021ec <HAL_UART_MspInit+0x168>)
 800212a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <HAL_UART_MspInit+0x168>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_UART_MspInit+0x168>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <HAL_UART_MspInit+0x168>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_UART_MspInit+0x168>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002154:	2304      	movs	r3, #4
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	4619      	mov	r1, r3
 8002166:	4822      	ldr	r0, [pc, #136]	@ (80021f0 <HAL_UART_MspInit+0x16c>)
 8002168:	f000 fd88 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800216c:	2308      	movs	r3, #8
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	4619      	mov	r1, r3
 800217e:	481c      	ldr	r0, [pc, #112]	@ (80021f0 <HAL_UART_MspInit+0x16c>)
 8002180:	f000 fd7c 	bl	8002c7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_UART_MspInit+0x178>)
 8002188:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218a:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b4:	4810      	ldr	r0, [pc, #64]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021b6:	f000 fa0b 	bl	80025d0 <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80021c0:	f7fe fdfe 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ca:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2101      	movs	r1, #1
 80021d4:	2026      	movs	r0, #38	@ 0x26
 80021d6:	f000 f9ab 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021da:	2026      	movs	r0, #38	@ 0x26
 80021dc:	f000 f9d4 	bl	8002588 <HAL_NVIC_EnableIRQ>
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40004400 	.word	0x40004400
 80021f8:	20000968 	.word	0x20000968
 80021fc:	4002006c 	.word	0x4002006c

08002200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002200:	f7ff fee6 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480b      	ldr	r0, [pc, #44]	@ (8002234 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002206:	490c      	ldr	r1, [pc, #48]	@ (8002238 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002208:	4a0c      	ldr	r2, [pc, #48]	@ (800223c <LoopFillZerobss+0x16>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800221c:	4c09      	ldr	r4, [pc, #36]	@ (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f004 ff3b 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222e:	f7fe fc0f 	bl	8000a50 <main>
  bx lr
 8002232:	4770      	bx	lr
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 800223c:	080086d4 	.word	0x080086d4
  ldr r2, =_sbss
 8002240:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8002244:	20000af8 	.word	0x20000af8

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>
	...

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_Init+0x28>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_Init+0x28>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f947 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fde4 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f98e 	bl	80025b8 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f93c 	bl	8002530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	@ (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000238 	.word	0x20000238
 80022d0:	20000240 	.word	0x20000240
 80022d4:	2000023c 	.word	0x2000023c

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a03      	ldr	r2, [pc, #12]	@ (80022f8 <HAL_IncTick+0x20>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000240 	.word	0x20000240
 80022f8:	200009ac 	.word	0x200009ac

080022fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	@ (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	200009ac 	.word	0x200009ac

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff0 	bl	80022fc <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffe0 	bl	80022fc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000240 	.word	0x20000240

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4906      	ldr	r1, [pc, #24]	@ (80023f0 <__NVIC_EnableIRQ+0x34>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	@ (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff90 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d00f      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d00c      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d009      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d006      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002516:	2191      	movs	r1, #145	@ 0x91
 8002518:	4804      	ldr	r0, [pc, #16]	@ (800252c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800251a:	f7fe fc57 	bl	8000dcc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff1a 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	08007d14 	.word	0x08007d14

08002530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d903      	bls.n	8002550 <HAL_NVIC_SetPriority+0x20>
 8002548:	21a9      	movs	r1, #169	@ 0xa9
 800254a:	480e      	ldr	r0, [pc, #56]	@ (8002584 <HAL_NVIC_SetPriority+0x54>)
 800254c:	f7fe fc3e 	bl	8000dcc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d903      	bls.n	800255e <HAL_NVIC_SetPriority+0x2e>
 8002556:	21aa      	movs	r1, #170	@ 0xaa
 8002558:	480a      	ldr	r0, [pc, #40]	@ (8002584 <HAL_NVIC_SetPriority+0x54>)
 800255a:	f7fe fc37 	bl	8000dcc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255e:	f7ff ff1f 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002562:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	6978      	ldr	r0, [r7, #20]
 800256a:	f7ff ff6d 	bl	8002448 <NVIC_EncodePriority>
 800256e:	4602      	mov	r2, r0
 8002570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff3c 	bl	80023f4 <__NVIC_SetPriority>
}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08007d14 	.word	0x08007d14

08002588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da03      	bge.n	80025a2 <HAL_NVIC_EnableIRQ+0x1a>
 800259a:	21bd      	movs	r1, #189	@ 0xbd
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800259e:	f7fe fc15 	bl	8000dcc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff08 	bl	80023bc <__NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08007d14 	.word	0x08007d14

080025b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff73 	bl	80024ac <SysTick_Config>
 80025c6:	4603      	mov	r3, r0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0da      	b.n	800279c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_DMA_Init+0x1d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d021      	beq.n	8002634 <HAL_DMA_Init+0x64>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6c      	ldr	r2, [pc, #432]	@ (80027a8 <HAL_DMA_Init+0x1d8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01c      	beq.n	8002634 <HAL_DMA_Init+0x64>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6b      	ldr	r2, [pc, #428]	@ (80027ac <HAL_DMA_Init+0x1dc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d017      	beq.n	8002634 <HAL_DMA_Init+0x64>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a69      	ldr	r2, [pc, #420]	@ (80027b0 <HAL_DMA_Init+0x1e0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d012      	beq.n	8002634 <HAL_DMA_Init+0x64>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a68      	ldr	r2, [pc, #416]	@ (80027b4 <HAL_DMA_Init+0x1e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00d      	beq.n	8002634 <HAL_DMA_Init+0x64>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a66      	ldr	r2, [pc, #408]	@ (80027b8 <HAL_DMA_Init+0x1e8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d008      	beq.n	8002634 <HAL_DMA_Init+0x64>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a65      	ldr	r2, [pc, #404]	@ (80027bc <HAL_DMA_Init+0x1ec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <HAL_DMA_Init+0x64>
 800262c:	2199      	movs	r1, #153	@ 0x99
 800262e:	4864      	ldr	r0, [pc, #400]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 8002630:	f7fe fbcc 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <HAL_DMA_Init+0x86>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d008      	beq.n	8002656 <HAL_DMA_Init+0x86>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800264c:	d003      	beq.n	8002656 <HAL_DMA_Init+0x86>
 800264e:	219a      	movs	r1, #154	@ 0x9a
 8002650:	485b      	ldr	r0, [pc, #364]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 8002652:	f7fe fbbb 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b40      	cmp	r3, #64	@ 0x40
 800265c:	d007      	beq.n	800266e <HAL_DMA_Init+0x9e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_DMA_Init+0x9e>
 8002666:	219b      	movs	r1, #155	@ 0x9b
 8002668:	4855      	ldr	r0, [pc, #340]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 800266a:	f7fe fbaf 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	d007      	beq.n	8002686 <HAL_DMA_Init+0xb6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_DMA_Init+0xb6>
 800267e:	219c      	movs	r1, #156	@ 0x9c
 8002680:	484f      	ldr	r0, [pc, #316]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 8002682:	f7fe fba3 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <HAL_DMA_Init+0xda>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Init+0xda>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a0:	d003      	beq.n	80026aa <HAL_DMA_Init+0xda>
 80026a2:	219d      	movs	r1, #157	@ 0x9d
 80026a4:	4846      	ldr	r0, [pc, #280]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 80026a6:	f7fe fb91 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_DMA_Init+0xfe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ba:	d008      	beq.n	80026ce <HAL_DMA_Init+0xfe>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026c4:	d003      	beq.n	80026ce <HAL_DMA_Init+0xfe>
 80026c6:	219e      	movs	r1, #158	@ 0x9e
 80026c8:	483d      	ldr	r0, [pc, #244]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 80026ca:	f7fe fb7f 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_DMA_Init+0x116>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d003      	beq.n	80026e6 <HAL_DMA_Init+0x116>
 80026de:	219f      	movs	r1, #159	@ 0x9f
 80026e0:	4837      	ldr	r0, [pc, #220]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 80026e2:	f7fe fb73 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <HAL_DMA_Init+0x144>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f6:	d00d      	beq.n	8002714 <HAL_DMA_Init+0x144>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002700:	d008      	beq.n	8002714 <HAL_DMA_Init+0x144>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800270a:	d003      	beq.n	8002714 <HAL_DMA_Init+0x144>
 800270c:	21a0      	movs	r1, #160	@ 0xa0
 800270e:	482c      	ldr	r0, [pc, #176]	@ (80027c0 <HAL_DMA_Init+0x1f0>)
 8002710:	f7fe fb5c 	bl	8000dcc <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <HAL_DMA_Init+0x1f4>)
 800271c:	4413      	add	r3, r2
 800271e:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_DMA_Init+0x1f8>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	009a      	lsls	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <HAL_DMA_Init+0x1fc>)
 8002730:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002748:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800274c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020008 	.word	0x40020008
 80027a8:	4002001c 	.word	0x4002001c
 80027ac:	40020030 	.word	0x40020030
 80027b0:	40020044 	.word	0x40020044
 80027b4:	40020058 	.word	0x40020058
 80027b8:	4002006c 	.word	0x4002006c
 80027bc:	40020080 	.word	0x40020080
 80027c0:	08007d50 	.word	0x08007d50
 80027c4:	bffdfff8 	.word	0xbffdfff8
 80027c8:	cccccccd 	.word	0xcccccccd
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_Start_IT+0x20>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d304      	bcc.n	80027fa <HAL_DMA_Start_IT+0x2a>
 80027f0:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80027f4:	482c      	ldr	r0, [pc, #176]	@ (80028a8 <HAL_DMA_Start_IT+0xd8>)
 80027f6:	f7fe fae9 	bl	8000dcc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_DMA_Start_IT+0x38>
 8002804:	2302      	movs	r3, #2
 8002806:	e04b      	b.n	80028a0 <HAL_DMA_Start_IT+0xd0>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d13a      	bne.n	8002892 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f9ed 	bl	8002c20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 020e 	orr.w	r2, r2, #14
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e00f      	b.n	8002880 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0204 	bic.w	r2, r2, #4
 800286e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 020a 	orr.w	r2, r2, #10
 800287e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e005      	b.n	800289e <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	08007d50 	.word	0x08007d50

080028ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e020      	b.n	8002918 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 020e 	bic.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d005      	beq.n	8002948 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2204      	movs	r2, #4
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e051      	b.n	80029ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_DMA_Abort_IT+0xd4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d029      	beq.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <HAL_DMA_Abort_IT+0xd8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <HAL_DMA_Abort_IT+0x9e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_DMA_Abort_IT+0xdc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_Abort_IT+0x98>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_DMA_Abort_IT+0xe0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d012      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x92>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_DMA_Abort_IT+0xe4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00a      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x8c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_DMA_Abort_IT+0xe8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d102      	bne.n	80029aa <HAL_DMA_Abort_IT+0x86>
 80029a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029a8:	e00e      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ae:	e00b      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029b4:	e008      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ba:	e005      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c0:	e002      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029c2:	2310      	movs	r3, #16
 80029c4:	e000      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029c6:	2301      	movs	r3, #1
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_DMA_Abort_IT+0xec>)
 80029ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
    } 
  }
  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40020008 	.word	0x40020008
 80029fc:	4002001c 	.word	0x4002001c
 8002a00:	40020030 	.word	0x40020030
 8002a04:	40020044 	.word	0x40020044
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	4002006c 	.word	0x4002006c
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04f      	beq.n	8002adc <HAL_DMA_IRQHandler+0xc8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d04a      	beq.n	8002adc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a66      	ldr	r2, [pc, #408]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d029      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xae>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0xaa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a63      	ldr	r2, [pc, #396]	@ (8002c0c <HAL_DMA_IRQHandler+0x1f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xa4>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a62      	ldr	r2, [pc, #392]	@ (8002c10 <HAL_DMA_IRQHandler+0x1fc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x9e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a60      	ldr	r2, [pc, #384]	@ (8002c14 <HAL_DMA_IRQHandler+0x200>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00a      	beq.n	8002aac <HAL_DMA_IRQHandler+0x98>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c18 <HAL_DMA_IRQHandler+0x204>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x92>
 8002aa0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aa4:	e00e      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002aa6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002aaa:	e00b      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002aac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ab0:	e008      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ab2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ab6:	e005      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abc:	e002      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002abe:	2340      	movs	r3, #64	@ 0x40
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	4a55      	ldr	r2, [pc, #340]	@ (8002c1c <HAL_DMA_IRQHandler+0x208>)
 8002ac6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8094 	beq.w	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ada:	e08e      	b.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d056      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x186>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d051      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020a 	bic.w	r2, r2, #10
 8002b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a38      	ldr	r2, [pc, #224]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d029      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x166>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a37      	ldr	r2, [pc, #220]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x162>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a35      	ldr	r2, [pc, #212]	@ (8002c0c <HAL_DMA_IRQHandler+0x1f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x15c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a34      	ldr	r2, [pc, #208]	@ (8002c10 <HAL_DMA_IRQHandler+0x1fc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x156>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <HAL_DMA_IRQHandler+0x200>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x150>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <HAL_DMA_IRQHandler+0x204>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x14a>
 8002b58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b5c:	e00e      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b62:	e00b      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b68:	e008      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b6e:	e005      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b74:	e002      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b76:	2320      	movs	r3, #32
 8002b78:	e000      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	4a27      	ldr	r2, [pc, #156]	@ (8002c1c <HAL_DMA_IRQHandler+0x208>)
 8002b7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d034      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b98:	e02f      	b.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d028      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 020e 	bic.w	r2, r2, #14
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
    }
  }
  return;
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
}
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40020008 	.word	0x40020008
 8002c08:	4002001c 	.word	0x4002001c
 8002c0c:	40020030 	.word	0x40020030
 8002c10:	40020044 	.word	0x40020044
 8002c14:	40020058 	.word	0x40020058
 8002c18:	4002006c 	.word	0x4002006c
 8002c1c:	40020000 	.word	0x40020000

08002c20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d108      	bne.n	8002c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c5e:	e007      	b.n	8002c70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a96      	ldr	r2, [pc, #600]	@ (8002eec <HAL_GPIO_Init+0x270>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x42>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a95      	ldr	r2, [pc, #596]	@ (8002ef0 <HAL_GPIO_Init+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00f      	beq.n	8002cbe <HAL_GPIO_Init+0x42>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a94      	ldr	r2, [pc, #592]	@ (8002ef4 <HAL_GPIO_Init+0x278>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <HAL_GPIO_Init+0x42>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a93      	ldr	r2, [pc, #588]	@ (8002ef8 <HAL_GPIO_Init+0x27c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x42>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a92      	ldr	r2, [pc, #584]	@ (8002efc <HAL_GPIO_Init+0x280>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x42>
 8002cb6:	21bd      	movs	r1, #189	@ 0xbd
 8002cb8:	4891      	ldr	r0, [pc, #580]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002cba:	f7fe f887 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_GPIO_Init+0x56>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d303      	bcc.n	8002cda <HAL_GPIO_Init+0x5e>
 8002cd2:	21be      	movs	r1, #190	@ 0xbe
 8002cd4:	488a      	ldr	r0, [pc, #552]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002cd6:	f7fe f879 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 821d 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f000 8218 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b11      	cmp	r3, #17
 8002cf4:	f000 8213 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f000 820e 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	f000 8209 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a7c      	ldr	r2, [pc, #496]	@ (8002f04 <HAL_GPIO_Init+0x288>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f000 8203 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f08 <HAL_GPIO_Init+0x28c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f000 81fd 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a78      	ldr	r2, [pc, #480]	@ (8002f0c <HAL_GPIO_Init+0x290>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 81f7 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a76      	ldr	r2, [pc, #472]	@ (8002f10 <HAL_GPIO_Init+0x294>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 81f1 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a74      	ldr	r2, [pc, #464]	@ (8002f14 <HAL_GPIO_Init+0x298>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f000 81eb 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a72      	ldr	r2, [pc, #456]	@ (8002f18 <HAL_GPIO_Init+0x29c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f000 81e5 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	f000 81e0 	beq.w	800311e <HAL_GPIO_Init+0x4a2>
 8002d5e:	21bf      	movs	r1, #191	@ 0xbf
 8002d60:	4867      	ldr	r0, [pc, #412]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002d62:	f7fe f833 	bl	8000dcc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	e1da      	b.n	800311e <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d68:	2201      	movs	r2, #1
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 81c9 	bne.w	8003118 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_GPIO_Init+0x270>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a57      	ldr	r2, [pc, #348]	@ (8002ef0 <HAL_GPIO_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a56      	ldr	r2, [pc, #344]	@ (8002ef4 <HAL_GPIO_Init+0x278>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a55      	ldr	r2, [pc, #340]	@ (8002ef8 <HAL_GPIO_Init+0x27c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a54      	ldr	r2, [pc, #336]	@ (8002efc <HAL_GPIO_Init+0x280>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002dae:	21cd      	movs	r1, #205	@ 0xcd
 8002db0:	4853      	ldr	r0, [pc, #332]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002db2:	f7fe f80b 	bl	8000dcc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a57      	ldr	r2, [pc, #348]	@ (8002f18 <HAL_GPIO_Init+0x29c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	f000 80c2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
 8002dc2:	4a55      	ldr	r2, [pc, #340]	@ (8002f18 <HAL_GPIO_Init+0x29c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	f200 80e8 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002dca:	4a50      	ldr	r2, [pc, #320]	@ (8002f0c <HAL_GPIO_Init+0x290>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	f000 80ba 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
 8002dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8002f0c <HAL_GPIO_Init+0x290>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f200 80e0 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002dda:	4a4e      	ldr	r2, [pc, #312]	@ (8002f14 <HAL_GPIO_Init+0x298>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	f000 80b2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
 8002de2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_GPIO_Init+0x298>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	f200 80d8 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002dea:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <HAL_GPIO_Init+0x28c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	f000 80aa 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
 8002df2:	4a45      	ldr	r2, [pc, #276]	@ (8002f08 <HAL_GPIO_Init+0x28c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	f200 80d0 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002dfa:	4a45      	ldr	r2, [pc, #276]	@ (8002f10 <HAL_GPIO_Init+0x294>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f000 80a2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
 8002e02:	4a43      	ldr	r2, [pc, #268]	@ (8002f10 <HAL_GPIO_Init+0x294>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	f200 80c8 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d82c      	bhi.n	8002e68 <HAL_GPIO_Init+0x1ec>
 8002e0e:	2b12      	cmp	r3, #18
 8002e10:	f200 80c3 	bhi.w	8002f9a <HAL_GPIO_Init+0x31e>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_GPIO_Init+0x1a0>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002f47 	.word	0x08002f47
 8002e20:	08002e71 	.word	0x08002e71
 8002e24:	08002ec3 	.word	0x08002ec3
 8002e28:	08002f95 	.word	0x08002f95
 8002e2c:	08002f9b 	.word	0x08002f9b
 8002e30:	08002f9b 	.word	0x08002f9b
 8002e34:	08002f9b 	.word	0x08002f9b
 8002e38:	08002f9b 	.word	0x08002f9b
 8002e3c:	08002f9b 	.word	0x08002f9b
 8002e40:	08002f9b 	.word	0x08002f9b
 8002e44:	08002f9b 	.word	0x08002f9b
 8002e48:	08002f9b 	.word	0x08002f9b
 8002e4c:	08002f9b 	.word	0x08002f9b
 8002e50:	08002f9b 	.word	0x08002f9b
 8002e54:	08002f9b 	.word	0x08002f9b
 8002e58:	08002f9b 	.word	0x08002f9b
 8002e5c:	08002f9b 	.word	0x08002f9b
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002f1d 	.word	0x08002f1d
 8002e68:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <HAL_GPIO_Init+0x288>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d06b      	beq.n	8002f46 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e6e:	e094      	b.n	8002f9a <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d00b      	beq.n	8002e90 <HAL_GPIO_Init+0x214>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_GPIO_Init+0x214>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x214>
 8002e88:	21d5      	movs	r1, #213	@ 0xd5
 8002e8a:	481d      	ldr	r0, [pc, #116]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002e8c:	f7fd ff9e 	bl	8000dcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	623b      	str	r3, [r7, #32]
          break;
 8002e96:	e081      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_GPIO_Init+0x23c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <HAL_GPIO_Init+0x23c>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x23c>
 8002eb0:	21dc      	movs	r1, #220	@ 0xdc
 8002eb2:	4813      	ldr	r0, [pc, #76]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002eb4:	f7fd ff8a 	bl	8000dcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e06c      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_GPIO_Init+0x266>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x266>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x266>
 8002eda:	21e3      	movs	r1, #227	@ 0xe3
 8002edc:	4808      	ldr	r0, [pc, #32]	@ (8002f00 <HAL_GPIO_Init+0x284>)
 8002ede:	f7fd ff75 	bl	8000dcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	623b      	str	r3, [r7, #32]
          break;
 8002eea:	e057      	b.n	8002f9c <HAL_GPIO_Init+0x320>
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	40011800 	.word	0x40011800
 8002f00:	08007d88 	.word	0x08007d88
 8002f04:	10110000 	.word	0x10110000
 8002f08:	10210000 	.word	0x10210000
 8002f0c:	10310000 	.word	0x10310000
 8002f10:	10120000 	.word	0x10120000
 8002f14:	10220000 	.word	0x10220000
 8002f18:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d00b      	beq.n	8002f3c <HAL_GPIO_Init+0x2c0>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x2c0>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2c0>
 8002f34:	21ea      	movs	r1, #234	@ 0xea
 8002f36:	4880      	ldr	r0, [pc, #512]	@ (8003138 <HAL_GPIO_Init+0x4bc>)
 8002f38:	f7fd ff48 	bl	8000dcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	330c      	adds	r3, #12
 8002f42:	623b      	str	r3, [r7, #32]
          break;
 8002f44:	e02a      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_GPIO_Init+0x2ea>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x2ea>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x2ea>
 8002f5e:	21f7      	movs	r1, #247	@ 0xf7
 8002f60:	4875      	ldr	r0, [pc, #468]	@ (8003138 <HAL_GPIO_Init+0x4bc>)
 8002f62:	f7fd ff33 	bl	8000dcc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e013      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	611a      	str	r2, [r3, #16]
          break;
 8002f86:	e009      	b.n	8002f9c <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	615a      	str	r2, [r3, #20]
          break;
 8002f92:	e003      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x320>
          break;
 8002f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2bff      	cmp	r3, #255	@ 0xff
 8002fa0:	d801      	bhi.n	8002fa6 <HAL_GPIO_Init+0x32a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e001      	b.n	8002faa <HAL_GPIO_Init+0x32e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2bff      	cmp	r3, #255	@ 0xff
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_GPIO_Init+0x33c>
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x342>
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	3b08      	subs	r3, #8
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8096 	beq.w	8003118 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <HAL_GPIO_Init+0x4c0>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	@ (800313c <HAL_GPIO_Init+0x4c0>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b50      	ldr	r3, [pc, #320]	@ (800313c <HAL_GPIO_Init+0x4c0>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003004:	4a4e      	ldr	r2, [pc, #312]	@ (8003140 <HAL_GPIO_Init+0x4c4>)
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a46      	ldr	r2, [pc, #280]	@ (8003144 <HAL_GPIO_Init+0x4c8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_GPIO_Init+0x3dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a45      	ldr	r2, [pc, #276]	@ (8003148 <HAL_GPIO_Init+0x4cc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x3d8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a44      	ldr	r2, [pc, #272]	@ (800314c <HAL_GPIO_Init+0x4d0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x3d4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a43      	ldr	r2, [pc, #268]	@ (8003150 <HAL_GPIO_Init+0x4d4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x3d0>
 8003048:	2303      	movs	r3, #3
 800304a:	e006      	b.n	800305a <HAL_GPIO_Init+0x3de>
 800304c:	2304      	movs	r3, #4
 800304e:	e004      	b.n	800305a <HAL_GPIO_Init+0x3de>
 8003050:	2302      	movs	r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x3de>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_GPIO_Init+0x3de>
 8003058:	2300      	movs	r3, #0
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800306a:	4935      	ldr	r1, [pc, #212]	@ (8003140 <HAL_GPIO_Init+0x4c4>)
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003084:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4932      	ldr	r1, [pc, #200]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003092:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	43db      	mvns	r3, r3
 800309a:	492e      	ldr	r1, [pc, #184]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 800309c:	4013      	ands	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ac:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4928      	ldr	r1, [pc, #160]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ba:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4924      	ldr	r1, [pc, #144]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	491e      	ldr	r1, [pc, #120]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	491a      	ldr	r1, [pc, #104]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030fc:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4914      	ldr	r1, [pc, #80]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	4910      	ldr	r1, [pc, #64]	@ (8003154 <HAL_GPIO_Init+0x4d8>)
 8003114:	4013      	ands	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	3301      	adds	r3, #1
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f ae1d 	bne.w	8002d68 <HAL_GPIO_Init+0xec>
  }
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	3728      	adds	r7, #40	@ 0x28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	08007d88 	.word	0x08007d88
 800313c:	40021000 	.word	0x40021000
 8003140:	40010000 	.word	0x40010000
 8003144:	40010800 	.word	0x40010800
 8003148:	40010c00 	.word	0x40010c00
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_GPIO_WritePin+0x20>
 800316e:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8003172:	480e      	ldr	r0, [pc, #56]	@ (80031ac <HAL_GPIO_WritePin+0x54>)
 8003174:	f7fd fe2a 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_GPIO_WritePin+0x36>
 800317e:	787b      	ldrb	r3, [r7, #1]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d004      	beq.n	800318e <HAL_GPIO_WritePin+0x36>
 8003184:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8003188:	4808      	ldr	r0, [pc, #32]	@ (80031ac <HAL_GPIO_WritePin+0x54>)
 800318a:	f7fd fe1f 	bl	8000dcc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800318e:	787b      	ldrb	r3, [r7, #1]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003194:	887a      	ldrh	r2, [r7, #2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800319a:	e003      	b.n	80031a4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08007d88 	.word	0x08007d88

080031b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_GPIO_TogglePin+0x1c>
 80031c2:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 80031c6:	480a      	ldr	r0, [pc, #40]	@ (80031f0 <HAL_GPIO_TogglePin+0x40>)
 80031c8:	f7fd fe00 	bl	8000dcc <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	041a      	lsls	r2, r3, #16
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43d9      	mvns	r1, r3
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	400b      	ands	r3, r1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08007d88 	.word	0x08007d88

080031f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800320a:	4a05      	ldr	r2, [pc, #20]	@ (8003220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fb4e 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1b4      	b.n	80035a0 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a9b      	ldr	r2, [pc, #620]	@ (80034a8 <HAL_I2C_Init+0x284>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_I2C_Init+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a99      	ldr	r2, [pc, #612]	@ (80034ac <HAL_I2C_Init+0x288>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_I2C_Init+0x30>
 800324a:	f240 11db 	movw	r1, #475	@ 0x1db
 800324e:	4898      	ldr	r0, [pc, #608]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 8003250:	f7fd fdbc 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_I2C_Init+0x42>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a94      	ldr	r2, [pc, #592]	@ (80034b4 <HAL_I2C_Init+0x290>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d904      	bls.n	8003270 <HAL_I2C_Init+0x4c>
 8003266:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800326a:	4891      	ldr	r0, [pc, #580]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 800326c:	f7fd fdae 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <HAL_I2C_Init+0x68>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003280:	d004      	beq.n	800328c <HAL_I2C_Init+0x68>
 8003282:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8003286:	488a      	ldr	r0, [pc, #552]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 8003288:	f7fd fda0 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003294:	d304      	bcc.n	80032a0 <HAL_I2C_Init+0x7c>
 8003296:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800329a:	4885      	ldr	r0, [pc, #532]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 800329c:	f7fd fd96 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032a8:	d009      	beq.n	80032be <HAL_I2C_Init+0x9a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032b2:	d004      	beq.n	80032be <HAL_I2C_Init+0x9a>
 80032b4:	f240 11df 	movw	r1, #479	@ 0x1df
 80032b8:	487d      	ldr	r0, [pc, #500]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 80032ba:	f7fd fd87 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_I2C_Init+0xb4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d004      	beq.n	80032d8 <HAL_I2C_Init+0xb4>
 80032ce:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80032d2:	4877      	ldr	r0, [pc, #476]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 80032d4:	f7fd fd7a 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_I2C_Init+0xca>
 80032e4:	f240 11e1 	movw	r1, #481	@ 0x1e1
 80032e8:	4871      	ldr	r0, [pc, #452]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 80032ea:	f7fd fd6f 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_I2C_Init+0xe4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d004      	beq.n	8003308 <HAL_I2C_Init+0xe4>
 80032fe:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8003302:	486b      	ldr	r0, [pc, #428]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 8003304:	f7fd fd62 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_I2C_Init+0xfe>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	2b80      	cmp	r3, #128	@ 0x80
 8003316:	d004      	beq.n	8003322 <HAL_I2C_Init+0xfe>
 8003318:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800331c:	4864      	ldr	r0, [pc, #400]	@ (80034b0 <HAL_I2C_Init+0x28c>)
 800331e:	f7fd fd55 	bl	8000dcc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fa6a 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	@ 0x24
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f001 f9f4 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a4e      	ldr	r2, [pc, #312]	@ (80034b8 <HAL_I2C_Init+0x294>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d807      	bhi.n	8003394 <HAL_I2C_Init+0x170>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a4d      	ldr	r2, [pc, #308]	@ (80034bc <HAL_I2C_Init+0x298>)
 8003388:	4293      	cmp	r3, r2
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e006      	b.n	80033a2 <HAL_I2C_Init+0x17e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a4a      	ldr	r2, [pc, #296]	@ (80034c0 <HAL_I2C_Init+0x29c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0fa      	b.n	80035a0 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a45      	ldr	r2, [pc, #276]	@ (80034c4 <HAL_I2C_Init+0x2a0>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a37      	ldr	r2, [pc, #220]	@ (80034b8 <HAL_I2C_Init+0x294>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <HAL_I2C_Init+0x1c0>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e009      	b.n	80033f8 <HAL_I2C_Init+0x1d4>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a36      	ldr	r2, [pc, #216]	@ (80034c8 <HAL_I2C_Init+0x2a4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800340a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4929      	ldr	r1, [pc, #164]	@ (80034b8 <HAL_I2C_Init+0x294>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d819      	bhi.n	800344c <HAL_I2C_Init+0x228>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e59      	subs	r1, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fbb1 f3f3 	udiv	r3, r1, r3
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800342c:	400b      	ands	r3, r1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_I2C_Init+0x224>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e59      	subs	r1, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	e064      	b.n	8003512 <HAL_I2C_Init+0x2ee>
 8003448:	2304      	movs	r3, #4
 800344a:	e062      	b.n	8003512 <HAL_I2C_Init+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <HAL_I2C_Init+0x254>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_I2C_Init+0x27a>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <HAL_I2C_Init+0x2a8>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e035      	b.n	8003512 <HAL_I2C_Init+0x2ee>
 80034a6:	bf00      	nop
 80034a8:	40005400 	.word	0x40005400
 80034ac:	40005800 	.word	0x40005800
 80034b0:	08007dc4 	.word	0x08007dc4
 80034b4:	00061a80 	.word	0x00061a80
 80034b8:	000186a0 	.word	0x000186a0
 80034bc:	001e847f 	.word	0x001e847f
 80034c0:	003d08ff 	.word	0x003d08ff
 80034c4:	431bde83 	.word	0x431bde83
 80034c8:	10624dd3 	.word	0x10624dd3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <HAL_I2C_Init+0x2ce>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	440b      	add	r3, r1
 80034e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e6:	3301      	adds	r3, #1
 80034e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f0:	e00f      	b.n	8003512 <HAL_I2C_Init+0x2ee>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1e58      	subs	r0, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	0099      	lsls	r1, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	fbb0 f3f3 	udiv	r3, r0, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	6809      	ldr	r1, [r1, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003540:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6911      	ldr	r1, [r2, #16]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	430b      	orrs	r3, r1
 8003554:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c2:	f7fe fe9b 	bl	80022fc <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d007      	beq.n	80035de <HAL_I2C_Mem_Write+0x36>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d004      	beq.n	80035de <HAL_I2C_Mem_Write+0x36>
 80035d4:	f640 2106 	movw	r1, #2566	@ 0xa06
 80035d8:	4873      	ldr	r0, [pc, #460]	@ (80037a8 <HAL_I2C_Mem_Write+0x200>)
 80035da:	f7fd fbf7 	bl	8000dcc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	f040 80d9 	bne.w	800379e <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2319      	movs	r3, #25
 80035f2:	2201      	movs	r2, #1
 80035f4:	496d      	ldr	r1, [pc, #436]	@ (80037ac <HAL_I2C_Mem_Write+0x204>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f972 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	e0cc      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2C_Mem_Write+0x6c>
 8003610:	2302      	movs	r3, #2
 8003612:	e0c5      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d007      	beq.n	800363a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003648:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2221      	movs	r2, #33	@ 0x21
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800366a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a4d      	ldr	r2, [pc, #308]	@ (80037b0 <HAL_I2C_Mem_Write+0x208>)
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367c:	88f8      	ldrh	r0, [r7, #6]
 800367e:	893a      	ldrh	r2, [r7, #8]
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4603      	mov	r3, r0
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f891 	bl	80037b4 <I2C_RequestMemoryWrite>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d052      	beq.n	800373e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e081      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa37 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e06b      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d11b      	bne.n	800373e <HAL_I2C_Mem_Write+0x196>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d017      	beq.n	800373e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1aa      	bne.n	800369c <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fa2a 	bl	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b04      	cmp	r3, #4
 800375c:	d107      	bne.n	800376e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e016      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08007dc4 	.word	0x08007dc4
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000

080037b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	460b      	mov	r3, r1
 80037c8:	813b      	strh	r3, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f878 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003804:	d103      	bne.n	800380e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e05f      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	492d      	ldr	r1, [pc, #180]	@ (80038dc <I2C_RequestMemoryWrite+0x128>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f8d3 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04c      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f95e 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02b      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]
 800388a:	e021      	b.n	80038d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b29b      	uxth	r3, r3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f938 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e005      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e048      	b.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d044      	beq.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fcff 	bl	80022fc <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d139      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	e00c      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e023      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10d      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	e00c      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d093      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e2:	e071      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d123      	bne.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e067      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d041      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fc5a 	bl	80022fc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d136      	bne.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10c      	bne.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e00b      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af6d 	bne.w	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	e034      	b.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f886 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d028      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fbdf 	bl	80022fc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5a:	2b80      	cmp	r3, #128	@ 0x80
 8003b5c:	d016      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e007      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b80      	cmp	r3, #128	@ 0x80
 8003b98:	d1c3      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	e034      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f83e 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d028      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fb97 	bl	80022fc <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d1c3      	bne.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4a:	d11b      	bne.n	8003c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003c94:	4b03      	ldr	r3, [pc, #12]	@ (8003ca4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	420e0020 	.word	0x420e0020

08003ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e35a      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x54>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x54>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d110      	bne.n	8003cfc <HAL_RCC_OscConfig+0x54>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x54>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_RCC_OscConfig+0x54>
 8003cf2:	f240 1165 	movw	r1, #357	@ 0x165
 8003cf6:	488f      	ldr	r0, [pc, #572]	@ (8003f34 <HAL_RCC_OscConfig+0x28c>)
 8003cf8:	f7fd f868 	bl	8000dcc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 809a 	beq.w	8003e3e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <HAL_RCC_OscConfig+0x88>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1a:	d009      	beq.n	8003d30 <HAL_RCC_OscConfig+0x88>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d24:	d004      	beq.n	8003d30 <HAL_RCC_OscConfig+0x88>
 8003d26:	f240 116b 	movw	r1, #363	@ 0x16b
 8003d2a:	4882      	ldr	r0, [pc, #520]	@ (8003f34 <HAL_RCC_OscConfig+0x28c>)
 8003d2c:	f7fd f84e 	bl	8000dcc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d30:	4b81      	ldr	r3, [pc, #516]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d00c      	beq.n	8003d56 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d112      	bne.n	8003d6e <HAL_RCC_OscConfig+0xc6>
 8003d48:	4b7b      	ldr	r3, [pc, #492]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d56:	4b78      	ldr	r3, [pc, #480]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d06c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x194>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d168      	bne.n	8003e3c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e300      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d76:	d106      	bne.n	8003d86 <HAL_RCC_OscConfig+0xde>
 8003d78:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e02e      	b.n	8003de4 <HAL_RCC_OscConfig+0x13c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x100>
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a69      	ldr	r2, [pc, #420]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b67      	ldr	r3, [pc, #412]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a66      	ldr	r2, [pc, #408]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003da0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e01d      	b.n	8003de4 <HAL_RCC_OscConfig+0x13c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x124>
 8003db2:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a60      	ldr	r2, [pc, #384]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0x13c>
 8003dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a59      	ldr	r2, [pc, #356]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b57      	ldr	r3, [pc, #348]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a56      	ldr	r2, [pc, #344]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fa86 	bl	80022fc <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fa82 	bl	80022fc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e2b4      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b4c      	ldr	r3, [pc, #304]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x14c>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fe fa72 	bl	80022fc <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fa6e 	bl	80022fc <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	@ 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e2a0      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	4b42      	ldr	r3, [pc, #264]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x174>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8080 	beq.w	8003f4c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1be>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d004      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1be>
 8003e5c:	f240 119f 	movw	r1, #415	@ 0x19f
 8003e60:	4834      	ldr	r0, [pc, #208]	@ (8003f34 <HAL_RCC_OscConfig+0x28c>)
 8003e62:	f7fc ffb3 	bl	8000dcc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b1f      	cmp	r3, #31
 8003e6c:	d904      	bls.n	8003e78 <HAL_RCC_OscConfig+0x1d0>
 8003e6e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8003e72:	4830      	ldr	r0, [pc, #192]	@ (8003f34 <HAL_RCC_OscConfig+0x28c>)
 8003e74:	f7fc ffaa 	bl	8000dcc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e78:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d11c      	bne.n	8003eca <HAL_RCC_OscConfig+0x222>
 8003e90:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d116      	bne.n	8003eca <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9c:	4b26      	ldr	r3, [pc, #152]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x20c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e25d      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	491d      	ldr	r1, [pc, #116]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec8:	e040      	b.n	8003f4c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d020      	beq.n	8003f14 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <HAL_RCC_OscConfig+0x294>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fa10 	bl	80022fc <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fe fa0c 	bl	80022fc <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e23e      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	490a      	ldr	r1, [pc, #40]	@ (8003f38 <HAL_RCC_OscConfig+0x290>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_OscConfig+0x294>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe f9ef 	bl	80022fc <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f20:	e00e      	b.n	8003f40 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe f9eb 	bl	80022fc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d907      	bls.n	8003f40 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e21d      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
 8003f34:	08007dfc 	.word	0x08007dfc
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f40:	4b7d      	ldr	r3, [pc, #500]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d040      	beq.n	8003fda <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2ca>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d004      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2ca>
 8003f68:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003f6c:	4873      	ldr	r0, [pc, #460]	@ (800413c <HAL_RCC_OscConfig+0x494>)
 8003f6e:	f7fc ff2d 	bl	8000dcc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b71      	ldr	r3, [pc, #452]	@ (8004140 <HAL_RCC_OscConfig+0x498>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe f9bc 	bl	80022fc <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe f9b8 	bl	80022fc <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1ea      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b67      	ldr	r3, [pc, #412]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 fc02 	bl	80047b0 <RCC_Delay>
 8003fac:	e015      	b.n	8003fda <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fae:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCC_OscConfig+0x498>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe f9a2 	bl	80022fc <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fe f99e 	bl	80022fc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1d0      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fce:	4b5a      	ldr	r3, [pc, #360]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80bf 	beq.w	8004166 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <HAL_RCC_OscConfig+0x366>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_OscConfig+0x366>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d004      	beq.n	800400e <HAL_RCC_OscConfig+0x366>
 8004004:	f240 210f 	movw	r1, #527	@ 0x20f
 8004008:	484c      	ldr	r0, [pc, #304]	@ (800413c <HAL_RCC_OscConfig+0x494>)
 800400a:	f7fc fedf 	bl	8000dcc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b47      	ldr	r3, [pc, #284]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a46      	ldr	r2, [pc, #280]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b44      	ldr	r3, [pc, #272]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b43      	ldr	r3, [pc, #268]	@ (8004144 <HAL_RCC_OscConfig+0x49c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <HAL_RCC_OscConfig+0x49c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <HAL_RCC_OscConfig+0x49c>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fe f955 	bl	80022fc <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fe f951 	bl	80022fc <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	@ 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e183      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCC_OscConfig+0x49c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x3e2>
 800407c:	4b2e      	ldr	r3, [pc, #184]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a2d      	ldr	r2, [pc, #180]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6213      	str	r3, [r2, #32]
 8004088:	e02d      	b.n	80040e6 <HAL_RCC_OscConfig+0x43e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x404>
 8004092:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6213      	str	r3, [r2, #32]
 800409e:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a25      	ldr	r2, [pc, #148]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	e01c      	b.n	80040e6 <HAL_RCC_OscConfig+0x43e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_OscConfig+0x426>
 80040b4:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040ba:	f043 0304 	orr.w	r3, r3, #4
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	e00b      	b.n	80040e6 <HAL_RCC_OscConfig+0x43e>
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fe f905 	bl	80022fc <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fe f901 	bl	80022fc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e131      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <HAL_RCC_OscConfig+0x490>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ee      	beq.n	80040f6 <HAL_RCC_OscConfig+0x44e>
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe f8ef 	bl	80022fc <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	e012      	b.n	8004148 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe f8eb 	bl	80022fc <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d909      	bls.n	8004148 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e11b      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
 8004138:	40021000 	.word	0x40021000
 800413c:	08007dfc 	.word	0x08007dfc
 8004140:	42420480 	.word	0x42420480
 8004144:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	4b8b      	ldr	r3, [pc, #556]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e6      	bne.n	8004122 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b87      	ldr	r3, [pc, #540]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a86      	ldr	r2, [pc, #536]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <HAL_RCC_OscConfig+0x4e0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d008      	beq.n	8004188 <HAL_RCC_OscConfig+0x4e0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d004      	beq.n	8004188 <HAL_RCC_OscConfig+0x4e0>
 800417e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8004182:	487e      	ldr	r0, [pc, #504]	@ (800437c <HAL_RCC_OscConfig+0x6d4>)
 8004184:	f7fc fe22 	bl	8000dcc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80ee 	beq.w	800436e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004192:	4b79      	ldr	r3, [pc, #484]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b08      	cmp	r3, #8
 800419c:	f000 80ce 	beq.w	800433c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f040 80b2 	bne.w	800430e <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_OscConfig+0x51e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ba:	d004      	beq.n	80041c6 <HAL_RCC_OscConfig+0x51e>
 80041bc:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80041c0:	486e      	ldr	r0, [pc, #440]	@ (800437c <HAL_RCC_OscConfig+0x6d4>)
 80041c2:	f7fc fe03 	bl	8000dcc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04a      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041d6:	d045      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041e0:	d040      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041ea:	d03b      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f4:	d036      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041fe:	d031      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004208:	d02c      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004212:	d027      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800421c:	d022      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004226:	d01d      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004230:	d018      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004244:	d00e      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800424e:	d009      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8004258:	d004      	beq.n	8004264 <HAL_RCC_OscConfig+0x5bc>
 800425a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800425e:	4847      	ldr	r0, [pc, #284]	@ (800437c <HAL_RCC_OscConfig+0x6d4>)
 8004260:	f7fc fdb4 	bl	8000dcc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004264:	4b46      	ldr	r3, [pc, #280]	@ (8004380 <HAL_RCC_OscConfig+0x6d8>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fe f847 	bl	80022fc <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fe f843 	bl	80022fc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e075      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004284:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d116      	bne.n	80042c8 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_OscConfig+0x60e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042aa:	d004      	beq.n	80042b6 <HAL_RCC_OscConfig+0x60e>
 80042ac:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80042b0:	4832      	ldr	r0, [pc, #200]	@ (800437c <HAL_RCC_OscConfig+0x6d4>)
 80042b2:	f7fc fd8b 	bl	8000dcc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042b6:	4b30      	ldr	r3, [pc, #192]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	492d      	ldr	r1, [pc, #180]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a19      	ldr	r1, [r3, #32]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	430b      	orrs	r3, r1
 80042da:	4927      	ldr	r1, [pc, #156]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_RCC_OscConfig+0x6d8>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe f809 	bl	80022fc <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe f805 	bl	80022fc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e037      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004300:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x646>
 800430c:	e02f      	b.n	800436e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b1c      	ldr	r3, [pc, #112]	@ (8004380 <HAL_RCC_OscConfig+0x6d8>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd fff2 	bl	80022fc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fd ffee 	bl	80022fc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e020      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800432e:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x674>
 800433a:	e018      	b.n	800436e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e013      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <HAL_RCC_OscConfig+0x6d0>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	08007dfc 	.word	0x08007dfc
 8004380:	42420060 	.word	0x42420060

08004384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e176      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x4e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d110      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x4e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x4e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x4e>
 80043c8:	f240 3136 	movw	r1, #822	@ 0x336
 80043cc:	4874      	ldr	r0, [pc, #464]	@ (80045a0 <HAL_RCC_ClockConfig+0x21c>)
 80043ce:	f7fc fcfd 	bl	8000dcc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCC_ClockConfig+0x6a>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d007      	beq.n	80043ee <HAL_RCC_ClockConfig+0x6a>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d004      	beq.n	80043ee <HAL_RCC_ClockConfig+0x6a>
 80043e4:	f240 3137 	movw	r1, #823	@ 0x337
 80043e8:	486d      	ldr	r0, [pc, #436]	@ (80045a0 <HAL_RCC_ClockConfig+0x21c>)
 80043ea:	f7fc fcef 	bl	8000dcc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043ee:	4b6d      	ldr	r3, [pc, #436]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d910      	bls.n	800441e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fc:	4b69      	ldr	r3, [pc, #420]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 0207 	bic.w	r2, r3, #7
 8004404:	4967      	ldr	r1, [pc, #412]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440c:	4b65      	ldr	r3, [pc, #404]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e133      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d049      	beq.n	80044be <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004436:	4b5c      	ldr	r3, [pc, #368]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a5b      	ldr	r2, [pc, #364]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800443c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004440:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800444e:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a55      	ldr	r2, [pc, #340]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 8004454:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004458:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d024      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b80      	cmp	r3, #128	@ 0x80
 8004468:	d020      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b90      	cmp	r3, #144	@ 0x90
 8004470:	d01c      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2ba0      	cmp	r3, #160	@ 0xa0
 8004478:	d018      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004480:	d014      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2bc0      	cmp	r3, #192	@ 0xc0
 8004488:	d010      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2bd0      	cmp	r3, #208	@ 0xd0
 8004490:	d00c      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2be0      	cmp	r3, #224	@ 0xe0
 8004498:	d008      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2bf0      	cmp	r3, #240	@ 0xf0
 80044a0:	d004      	beq.n	80044ac <HAL_RCC_ClockConfig+0x128>
 80044a2:	f240 315d 	movw	r1, #861	@ 0x35d
 80044a6:	483e      	ldr	r0, [pc, #248]	@ (80045a0 <HAL_RCC_ClockConfig+0x21c>)
 80044a8:	f7fc fc90 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b3e      	ldr	r3, [pc, #248]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	493b      	ldr	r1, [pc, #236]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d051      	beq.n	800456e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_ClockConfig+0x168>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d008      	beq.n	80044ec <HAL_RCC_ClockConfig+0x168>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d004      	beq.n	80044ec <HAL_RCC_ClockConfig+0x168>
 80044e2:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80044e6:	482e      	ldr	r0, [pc, #184]	@ (80045a0 <HAL_RCC_ClockConfig+0x21c>)
 80044e8:	f7fc fc70 	bl	8000dcc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f4:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d115      	bne.n	800452c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0c0      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450c:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b4      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0ac      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452c:	4b1e      	ldr	r3, [pc, #120]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 0203 	bic.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	491b      	ldr	r1, [pc, #108]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800453e:	f7fd fedd 	bl	80022fc <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004544:	e00a      	b.n	800455c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004546:	f7fd fed9 	bl	80022fc <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e094      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x224>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 020c 	and.w	r2, r3, #12
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	429a      	cmp	r2, r3
 800456c:	d1eb      	bne.n	8004546 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d217      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457c:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 0207 	bic.w	r2, r3, #7
 8004584:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <HAL_RCC_ClockConfig+0x220>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d008      	beq.n	80045ac <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e073      	b.n	8004686 <HAL_RCC_ClockConfig+0x302>
 800459e:	bf00      	nop
 80045a0:	08007dfc 	.word	0x08007dfc
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d025      	beq.n	8004604 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d018      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x26e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c8:	d013      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x26e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80045d2:	d00e      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x26e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045dc:	d009      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x26e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045e6:	d004      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x26e>
 80045e8:	f240 31a2 	movw	r1, #930	@ 0x3a2
 80045ec:	4828      	ldr	r0, [pc, #160]	@ (8004690 <HAL_RCC_ClockConfig+0x30c>)
 80045ee:	f7fc fbed 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f2:	4b28      	ldr	r3, [pc, #160]	@ (8004694 <HAL_RCC_ClockConfig+0x310>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4925      	ldr	r1, [pc, #148]	@ (8004694 <HAL_RCC_ClockConfig+0x310>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d026      	beq.n	800465e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d018      	beq.n	800464a <HAL_RCC_ClockConfig+0x2c6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004620:	d013      	beq.n	800464a <HAL_RCC_ClockConfig+0x2c6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800462a:	d00e      	beq.n	800464a <HAL_RCC_ClockConfig+0x2c6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x2c6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800463e:	d004      	beq.n	800464a <HAL_RCC_ClockConfig+0x2c6>
 8004640:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8004644:	4812      	ldr	r0, [pc, #72]	@ (8004690 <HAL_RCC_ClockConfig+0x30c>)
 8004646:	f7fc fbc1 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464a:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <HAL_RCC_ClockConfig+0x310>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	490e      	ldr	r1, [pc, #56]	@ (8004694 <HAL_RCC_ClockConfig+0x310>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800465e:	f000 f821 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004662:	4602      	mov	r2, r0
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <HAL_RCC_ClockConfig+0x310>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	490a      	ldr	r1, [pc, #40]	@ (8004698 <HAL_RCC_ClockConfig+0x314>)
 8004670:	5ccb      	ldrb	r3, [r1, r3]
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a09      	ldr	r2, [pc, #36]	@ (800469c <HAL_RCC_ClockConfig+0x318>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800467a:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x31c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd fdfa 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	08007dfc 	.word	0x08007dfc
 8004694:	40021000 	.word	0x40021000
 8004698:	08008650 	.word	0x08008650
 800469c:	20000238 	.word	0x20000238
 80046a0:	2000023c 	.word	0x2000023c

080046a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046be:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x94>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d002      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x30>
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0x36>
 80046d2:	e027      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046d4:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_RCC_GetSysClockFreq+0x98>)
 80046d6:	613b      	str	r3, [r7, #16]
      break;
 80046d8:	e027      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0c9b      	lsrs	r3, r3, #18
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	4a17      	ldr	r2, [pc, #92]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d010      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046f2:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x94>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0c5b      	lsrs	r3, r3, #17
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a0d      	ldr	r2, [pc, #52]	@ (800473c <HAL_RCC_GetSysClockFreq+0x98>)
 8004706:	fb03 f202 	mul.w	r2, r3, r2
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e004      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a0c      	ldr	r2, [pc, #48]	@ (8004748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	613b      	str	r3, [r7, #16]
      break;
 8004722:	e002      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCC_GetSysClockFreq+0x98>)
 8004726:	613b      	str	r3, [r7, #16]
      break;
 8004728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472a:	693b      	ldr	r3, [r7, #16]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	007a1200 	.word	0x007a1200
 8004740:	08008668 	.word	0x08008668
 8004744:	08008678 	.word	0x08008678
 8004748:	003d0900 	.word	0x003d0900

0800474c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004750:	4b02      	ldr	r3, [pc, #8]	@ (800475c <HAL_RCC_GetHCLKFreq+0x10>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	20000238 	.word	0x20000238

08004760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004764:	f7ff fff2 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4903      	ldr	r1, [pc, #12]	@ (8004784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	08008660 	.word	0x08008660

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800478c:	f7ff ffde 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	0adb      	lsrs	r3, r3, #11
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	@ (80047ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	08008660 	.word	0x08008660

080047b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <RCC_Delay+0x34>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <RCC_Delay+0x38>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0a5b      	lsrs	r3, r3, #9
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047cc:	bf00      	nop
  }
  while (Delay --);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1e5a      	subs	r2, r3, #1
 80047d2:	60fa      	str	r2, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f9      	bne.n	80047cc <RCC_Delay+0x1c>
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	20000238 	.word	0x20000238
 80047e8:	10624dd3 	.word	0x10624dd3

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004820:	216a      	movs	r1, #106	@ 0x6a
 8004822:	4873      	ldr	r0, [pc, #460]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004824:	f7fc fad2 	bl	8000dcc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8095 	beq.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800484a:	d00d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004854:	d008      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485e:	d003      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004860:	2172      	movs	r1, #114	@ 0x72
 8004862:	4863      	ldr	r0, [pc, #396]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004864:	f7fc fab2 	bl	8000dcc <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004868:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4a5e      	ldr	r2, [pc, #376]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487e:	61d3      	str	r3, [r2, #28]
 8004880:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	4b59      	ldr	r3, [pc, #356]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d118      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489c:	4b56      	ldr	r3, [pc, #344]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a55      	ldr	r2, [pc, #340]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a8:	f7fd fd28 	bl	80022fc <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fd fd24 	bl	80022fc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e092      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b4d      	ldr	r3, [pc, #308]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ce:	4b49      	ldr	r3, [pc, #292]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x150>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d027      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f6:	4b41      	ldr	r3, [pc, #260]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048fc:	4b3f      	ldr	r3, [pc, #252]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004902:	4a3c      	ldr	r2, [pc, #240]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d014      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fd fcf3 	bl	80022fc <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fd fcef 	bl	80022fc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e05b      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ee      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493c:	4b2d      	ldr	r3, [pc, #180]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	492a      	ldr	r1, [pc, #168]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800494a:	4313      	orrs	r3, r2
 800494c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004954:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800495e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01f      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800497c:	d00d      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004992:	21b7      	movs	r1, #183	@ 0xb7
 8004994:	4816      	ldr	r0, [pc, #88]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004996:	f7fc fa19 	bl	8000dcc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800499a:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4913      	ldr	r1, [pc, #76]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049ca:	f240 1113 	movw	r1, #275	@ 0x113
 80049ce:	4808      	ldr	r0, [pc, #32]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80049d0:	f7fc f9fc 	bl	8000dcc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4904      	ldr	r1, [pc, #16]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	08007e34 	.word	0x08007e34
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42420440 	.word	0x42420440

08004a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10e      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004a3a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8004a3e:	484f      	ldr	r0, [pc, #316]	@ (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004a40:	f7fc f9c4 	bl	8000dcc <assert_failed>

  switch (PeriphClk)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	f200 808a 	bhi.w	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d045      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a5e:	e082      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      temp_reg = RCC->CFGR;
 8004a60:	4b47      	ldr	r3, [pc, #284]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a66:	4b46      	ldr	r3, [pc, #280]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d07b      	beq.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	0c9b      	lsrs	r3, r3, #18
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a42      	ldr	r2, [pc, #264]	@ (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	0c5b      	lsrs	r3, r3, #17
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	4a3c      	ldr	r2, [pc, #240]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004aa4:	4a39      	ldr	r2, [pc, #228]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e004      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4a35      	ldr	r2, [pc, #212]	@ (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	61bb      	str	r3, [r7, #24]
      break;
 8004ad2:	e04a      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = (pllclk * 2) / 3;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	61bb      	str	r3, [r7, #24]
      break;
 8004ae2:	e042      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      temp_reg = RCC->BDCR;
 8004ae4:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af4:	d108      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        frequency = LSE_VALUE;
 8004b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e01f      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b12:	d109      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004b14:	4b1a      	ldr	r3, [pc, #104]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        frequency = LSI_VALUE;
 8004b20:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e00f      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b32:	d11c      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004b34:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = HSE_VALUE / 128U;
 8004b40:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004b44:	61bb      	str	r3, [r7, #24]
      break;
 8004b46:	e012      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004b48:	e011      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b4a:	f7ff fe1d 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0b9b      	lsrs	r3, r3, #14
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	61bb      	str	r3, [r7, #24]
      break;
 8004b64:	e004      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004b66:	bf00      	nop
 8004b68:	e002      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004b6e:	bf00      	nop
    }
  }
  return (frequency);
 8004b70:	69bb      	ldr	r3, [r7, #24]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08007e34 	.word	0x08007e34
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800867c 	.word	0x0800867c
 8004b88:	0800868c 	.word	0x0800868c
 8004b8c:	007a1200 	.word	0x007a1200
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	aaaaaaab 	.word	0xaaaaaaab

08004b98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0aa      	b.n	8004d04 <HAL_RTC_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a56      	ldr	r2, [pc, #344]	@ (8004d0c <HAL_RTC_Init+0x174>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_RTC_Init+0x2a>
 8004bb8:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004bbc:	4854      	ldr	r0, [pc, #336]	@ (8004d10 <HAL_RTC_Init+0x178>)
 8004bbe:	f7fc f905 	bl	8000dcc <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d012      	beq.n	8004bf0 <HAL_RTC_Init+0x58>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b80      	cmp	r3, #128	@ 0x80
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_RTC_Init+0x58>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bda:	d009      	beq.n	8004bf0 <HAL_RTC_Init+0x58>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004be4:	d004      	beq.n	8004bf0 <HAL_RTC_Init+0x58>
 8004be6:	f240 111f 	movw	r1, #287	@ 0x11f
 8004bea:	4849      	ldr	r0, [pc, #292]	@ (8004d10 <HAL_RTC_Init+0x178>)
 8004bec:	f7fc f8ee 	bl	8000dcc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bf8:	d309      	bcc.n	8004c0e <HAL_RTC_Init+0x76>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d004      	beq.n	8004c0e <HAL_RTC_Init+0x76>
 8004c04:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004c08:	4841      	ldr	r0, [pc, #260]	@ (8004d10 <HAL_RTC_Init+0x178>)
 8004c0a:	f7fc f8df 	bl	8000dcc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7c5b      	ldrb	r3, [r3, #17]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fbee 	bl	8001400 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fc98 	bl	8005560 <HAL_RTC_WaitForSynchro>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e061      	b.n	8004d04 <HAL_RTC_Init+0x16c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fd51 	bl	80056e8 <RTC_EnterInitMode>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e056      	b.n	8004d04 <HAL_RTC_Init+0x16c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0207 	bic.w	r2, r2, #7
 8004c64:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004c6e:	4b29      	ldr	r3, [pc, #164]	@ (8004d14 <HAL_RTC_Init+0x17c>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	4a28      	ldr	r2, [pc, #160]	@ (8004d14 <HAL_RTC_Init+0x17c>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004c7a:	4b26      	ldr	r3, [pc, #152]	@ (8004d14 <HAL_RTC_Init+0x17c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4923      	ldr	r1, [pc, #140]	@ (8004d14 <HAL_RTC_Init+0x17c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d003      	beq.n	8004c9e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e00e      	b.n	8004cbc <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7ff feae 	bl	8004a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ca4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e026      	b.n	8004d04 <HAL_RTC_Init+0x16c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	0c1a      	lsrs	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f002 020f 	and.w	r2, r2, #15
 8004cc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fd2f 	bl	8005738 <RTC_ExitInitMode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e00c      	b.n	8004d04 <HAL_RTC_Init+0x16c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40002800 	.word	0x40002800
 8004d10:	08007e70 	.word	0x08007e70
 8004d14:	40006c00 	.word	0x40006c00

08004d18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_RTC_SetTime+0x20>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0cd      	b.n	8004ed8 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_RTC_SetTime+0x3a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d004      	beq.n	8004d52 <HAL_RTC_SetTime+0x3a>
 8004d48:	f240 21cb 	movw	r1, #715	@ 0x2cb
 8004d4c:	4864      	ldr	r0, [pc, #400]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004d4e:	f7fc f83d 	bl	8000dcc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	7c1b      	ldrb	r3, [r3, #16]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_RTC_SetTime+0x46>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0bc      	b.n	8004ed8 <HAL_RTC_SetTime+0x1c0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2202      	movs	r2, #2
 8004d68:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d12e      	bne.n	8004dce <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b17      	cmp	r3, #23
 8004d76:	d904      	bls.n	8004d82 <HAL_RTC_SetTime+0x6a>
 8004d78:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8004d7c:	4858      	ldr	r0, [pc, #352]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004d7e:	f7fc f825 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	2b3b      	cmp	r3, #59	@ 0x3b
 8004d88:	d904      	bls.n	8004d94 <HAL_RTC_SetTime+0x7c>
 8004d8a:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8004d8e:	4854      	ldr	r0, [pc, #336]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004d90:	f7fc f81c 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	789b      	ldrb	r3, [r3, #2]
 8004d98:	2b3b      	cmp	r3, #59	@ 0x3b
 8004d9a:	d904      	bls.n	8004da6 <HAL_RTC_SetTime+0x8e>
 8004d9c:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8004da0:	484f      	ldr	r0, [pc, #316]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004da2:	f7fc f813 	bl	8000dcc <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004db0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	4619      	mov	r1, r3
 8004dba:	460b      	mov	r3, r1
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a5b      	subs	r3, r3, r1
 8004dc0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004dc2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004dc8:	4413      	add	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e045      	b.n	8004e5a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fcf5 	bl	80057c2 <RTC_Bcd2ToByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b17      	cmp	r3, #23
 8004ddc:	d904      	bls.n	8004de8 <HAL_RTC_SetTime+0xd0>
 8004dde:	f240 21de 	movw	r1, #734	@ 0x2de
 8004de2:	483f      	ldr	r0, [pc, #252]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004de4:	f7fb fff2 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fce8 	bl	80057c2 <RTC_Bcd2ToByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b3b      	cmp	r3, #59	@ 0x3b
 8004df6:	d904      	bls.n	8004e02 <HAL_RTC_SetTime+0xea>
 8004df8:	f240 21df 	movw	r1, #735	@ 0x2df
 8004dfc:	4838      	ldr	r0, [pc, #224]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004dfe:	f7fb ffe5 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	789b      	ldrb	r3, [r3, #2]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fcdb 	bl	80057c2 <RTC_Bcd2ToByte>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b3b      	cmp	r3, #59	@ 0x3b
 8004e10:	d904      	bls.n	8004e1c <HAL_RTC_SetTime+0x104>
 8004e12:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004e16:	4832      	ldr	r0, [pc, #200]	@ (8004ee0 <HAL_RTC_SetTime+0x1c8>)
 8004e18:	f7fb ffd8 	bl	8000dcc <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fcce 	bl	80057c2 <RTC_Bcd2ToByte>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004e2e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fcc3 	bl	80057c2 <RTC_Bcd2ToByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004e48:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	789b      	ldrb	r3, [r3, #2]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fcb7 	bl	80057c2 <RTC_Bcd2ToByte>
 8004e54:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004e56:	4423      	add	r3, r4
 8004e58:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fbdc 	bl	800561a <RTC_WriteTimeCounter>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e02f      	b.n	8004ed8 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0205 	bic.w	r2, r2, #5
 8004e86:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fbed 	bl	8005668 <RTC_ReadAlarmCounter>
 8004e8e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d018      	beq.n	8004eca <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d214      	bcs.n	8004eca <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004ea6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004eaa:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004eac:	6939      	ldr	r1, [r7, #16]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fbf3 	bl	800569a <RTC_WriteAlarmCounter>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e006      	b.n	8004ed8 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}
 8004ee0:	08007e70 	.word	0x08007e70

08004ee4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RTC_GetTime+0x28>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0c0      	b.n	8005092 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_RTC_GetTime+0x42>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d004      	beq.n	8004f26 <HAL_RTC_GetTime+0x42>
 8004f1c:	f240 312e 	movw	r1, #814	@ 0x32e
 8004f20:	485e      	ldr	r0, [pc, #376]	@ (800509c <HAL_RTC_GetTime+0x1b8>)
 8004f22:	f7fb ff53 	bl	8000dcc <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0ac      	b.n	8005092 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fb3e 	bl	80055ba <RTC_ReadTimeCounter>
 8004f3e:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4a57      	ldr	r2, [pc, #348]	@ (80050a0 <HAL_RTC_GetTime+0x1bc>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	0adb      	lsrs	r3, r3, #11
 8004f4a:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4b54      	ldr	r3, [pc, #336]	@ (80050a0 <HAL_RTC_GetTime+0x1bc>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	0adb      	lsrs	r3, r3, #11
 8004f56:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	4a50      	ldr	r2, [pc, #320]	@ (80050a4 <HAL_RTC_GetTime+0x1c0>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	@ (80050a0 <HAL_RTC_GetTime+0x1bc>)
 8004f72:	fba2 1203 	umull	r1, r2, r2, r3
 8004f76:	0ad2      	lsrs	r2, r2, #11
 8004f78:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004f7c:	fb01 f202 	mul.w	r2, r1, r2
 8004f80:	1a9a      	subs	r2, r3, r2
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <HAL_RTC_GetTime+0x1c0>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	0959      	lsrs	r1, r3, #5
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a5b      	subs	r3, r3, r1
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	1ad1      	subs	r1, r2, r3
 8004f94:	b2ca      	uxtb	r2, r1
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b17      	cmp	r3, #23
 8004f9e:	d955      	bls.n	800504c <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4a41      	ldr	r2, [pc, #260]	@ (80050a8 <HAL_RTC_GetTime+0x1c4>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004fac:	6939      	ldr	r1, [r7, #16]
 8004fae:	4b3e      	ldr	r3, [pc, #248]	@ (80050a8 <HAL_RTC_GetTime+0x1c4>)
 8004fb0:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb4:	091a      	lsrs	r2, r3, #4
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1aca      	subs	r2, r1, r3
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fb4e 	bl	8005668 <RTC_ReadAlarmCounter>
 8004fcc:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RTC_GetTime+0x104>
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d904      	bls.n	8004fe8 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	e002      	b.n	8004fee <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80050ac <HAL_RTC_GetTime+0x1c8>)
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fb0b 	bl	800561a <RTC_WriteTimeCounter>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e041      	b.n	8005092 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d00c      	beq.n	8005030 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	4413      	add	r3, r2
 800501c:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800501e:	69f9      	ldr	r1, [r7, #28]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fb3a 	bl	800569a <RTC_WriteAlarmCounter>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e030      	b.n	8005092 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fb31 	bl	800569a <RTC_WriteAlarmCounter>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e027      	b.n	8005092 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005042:	6979      	ldr	r1, [r7, #20]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fbd9 	bl	80057fc <RTC_DateUpdate>
 800504a:	e003      	b.n	8005054 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01a      	beq.n	8005090 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb92 	bl	8005788 <RTC_ByteToBcd2>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fb89 	bl	8005788 <RTC_ByteToBcd2>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	789b      	ldrb	r3, [r3, #2]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fb80 	bl	8005788 <RTC_ByteToBcd2>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	08007e70 	.word	0x08007e70
 80050a0:	91a2b3c5 	.word	0x91a2b3c5
 80050a4:	88888889 	.word	0x88888889
 80050a8:	aaaaaaab 	.word	0xaaaaaaab
 80050ac:	00015180 	.word	0x00015180

080050b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_RTC_SetDate+0x24>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0fc      	b.n	80052d2 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_RTC_SetDate+0x3e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d004      	beq.n	80050ee <HAL_RTC_SetDate+0x3e>
 80050e4:	f240 319d 	movw	r1, #925	@ 0x39d
 80050e8:	487c      	ldr	r0, [pc, #496]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 80050ea:	f7fb fe6f 	bl	8000dcc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	7c1b      	ldrb	r3, [r3, #16]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_RTC_SetDate+0x4a>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e0eb      	b.n	80052d2 <HAL_RTC_SetDate+0x222>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2202      	movs	r2, #2
 8005104:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d12f      	bne.n	800516c <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	78db      	ldrb	r3, [r3, #3]
 8005110:	2b63      	cmp	r3, #99	@ 0x63
 8005112:	d904      	bls.n	800511e <HAL_RTC_SetDate+0x6e>
 8005114:	f240 31a6 	movw	r1, #934	@ 0x3a6
 8005118:	4870      	ldr	r0, [pc, #448]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 800511a:	f7fb fe57 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_RTC_SetDate+0x7e>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d904      	bls.n	8005138 <HAL_RTC_SetDate+0x88>
 800512e:	f240 31a7 	movw	r1, #935	@ 0x3a7
 8005132:	486a      	ldr	r0, [pc, #424]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 8005134:	f7fb fe4a 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	789b      	ldrb	r3, [r3, #2]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_RTC_SetDate+0x98>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	789b      	ldrb	r3, [r3, #2]
 8005144:	2b1f      	cmp	r3, #31
 8005146:	d904      	bls.n	8005152 <HAL_RTC_SetDate+0xa2>
 8005148:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 800514c:	4863      	ldr	r0, [pc, #396]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 800514e:	f7fb fe3d 	bl	8000dcc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	78da      	ldrb	r2, [r3, #3]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	785a      	ldrb	r2, [r3, #1]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	789a      	ldrb	r2, [r3, #2]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	739a      	strb	r2, [r3, #14]
 800516a:	e051      	b.n	8005210 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	78db      	ldrb	r3, [r3, #3]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fb26 	bl	80057c2 <RTC_Bcd2ToByte>
 8005176:	4603      	mov	r3, r0
 8005178:	2b63      	cmp	r3, #99	@ 0x63
 800517a:	d904      	bls.n	8005186 <HAL_RTC_SetDate+0xd6>
 800517c:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8005180:	4856      	ldr	r0, [pc, #344]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 8005182:	f7fb fe23 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fb19 	bl	80057c2 <RTC_Bcd2ToByte>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <HAL_RTC_SetDate+0xf6>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fb11 	bl	80057c2 <RTC_Bcd2ToByte>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d904      	bls.n	80051b0 <HAL_RTC_SetDate+0x100>
 80051a6:	f240 31b2 	movw	r1, #946	@ 0x3b2
 80051aa:	484c      	ldr	r0, [pc, #304]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 80051ac:	f7fb fe0e 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	789b      	ldrb	r3, [r3, #2]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fb04 	bl	80057c2 <RTC_Bcd2ToByte>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_RTC_SetDate+0x120>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	789b      	ldrb	r3, [r3, #2]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fafc 	bl	80057c2 <RTC_Bcd2ToByte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b1f      	cmp	r3, #31
 80051ce:	d904      	bls.n	80051da <HAL_RTC_SetDate+0x12a>
 80051d0:	f240 31b3 	movw	r1, #947	@ 0x3b3
 80051d4:	4841      	ldr	r0, [pc, #260]	@ (80052dc <HAL_RTC_SetDate+0x22c>)
 80051d6:	f7fb fdf9 	bl	8000dcc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 faef 	bl	80057c2 <RTC_Bcd2ToByte>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fae6 	bl	80057c2 <RTC_Bcd2ToByte>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	789b      	ldrb	r3, [r3, #2]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fadd 	bl	80057c2 <RTC_Bcd2ToByte>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	7bdb      	ldrb	r3, [r3, #15]
 8005214:	4618      	mov	r0, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	7b59      	ldrb	r1, [r3, #13]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	7b9b      	ldrb	r3, [r3, #14]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fbc8 	bl	80059b4 <RTC_WeekDayNum>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	7b1a      	ldrb	r2, [r3, #12]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f9c0 	bl	80055ba <RTC_ReadTimeCounter>
 800523a:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4a28      	ldr	r2, [pc, #160]	@ (80052e0 <HAL_RTC_SetDate+0x230>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	0adb      	lsrs	r3, r3, #11
 8005246:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b18      	cmp	r3, #24
 800524c:	d93a      	bls.n	80052c4 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <HAL_RTC_SetDate+0x234>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <HAL_RTC_SetDate+0x238>)
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f9d7 	bl	800561a <RTC_WriteTimeCounter>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2204      	movs	r2, #4
 8005276:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e027      	b.n	80052d2 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f9f0 	bl	8005668 <RTC_ReadAlarmCounter>
 8005288:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d018      	beq.n	80052c4 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	429a      	cmp	r2, r3
 8005298:	d214      	bcs.n	80052c4 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80052a0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80052a4:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f9f6 	bl	800569a <RTC_WriteAlarmCounter>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2204      	movs	r2, #4
 80052b8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e006      	b.n	80052d2 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	08007e70 	.word	0x08007e70
 80052e0:	91a2b3c5 	.word	0x91a2b3c5
 80052e4:	aaaaaaab 	.word	0xaaaaaaab
 80052e8:	00015180 	.word	0x00015180

080052ec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b089      	sub	sp, #36	@ 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	2100      	movs	r1, #0
 8005302:	460a      	mov	r2, r1
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	460a      	mov	r2, r1
 8005308:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_RTC_SetAlarm_IT+0x2a>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0ef      	b.n	80054fa <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_RTC_SetAlarm_IT+0x44>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d004      	beq.n	8005330 <HAL_RTC_SetAlarm_IT+0x44>
 8005326:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 800532a:	4876      	ldr	r0, [pc, #472]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 800532c:	f7fb fd4e 	bl	8000dcc <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <HAL_RTC_SetAlarm_IT+0x56>
 8005338:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 800533c:	4871      	ldr	r0, [pc, #452]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 800533e:	f7fb fd45 	bl	8000dcc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	7c1b      	ldrb	r3, [r3, #16]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_RTC_SetAlarm_IT+0x62>
 800534a:	2302      	movs	r3, #2
 800534c:	e0d5      	b.n	80054fa <HAL_RTC_SetAlarm_IT+0x20e>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2202      	movs	r2, #2
 8005358:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800535a:	f107 0314 	add.w	r3, r7, #20
 800535e:	2200      	movs	r2, #0
 8005360:	4619      	mov	r1, r3
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fdbe 	bl	8004ee4 <HAL_RTC_GetTime>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0c3      	b.n	80054fa <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005372:	7d3b      	ldrb	r3, [r7, #20]
 8005374:	461a      	mov	r2, r3
 8005376:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800537a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800537e:	7d7b      	ldrb	r3, [r7, #21]
 8005380:	4619      	mov	r1, r3
 8005382:	460b      	mov	r3, r1
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a5b      	subs	r3, r3, r1
 8005388:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800538a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800538c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800538e:	4413      	add	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d12e      	bne.n	80053f6 <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b17      	cmp	r3, #23
 800539e:	d904      	bls.n	80053aa <HAL_RTC_SetAlarm_IT+0xbe>
 80053a0:	f240 41c2 	movw	r1, #1218	@ 0x4c2
 80053a4:	4857      	ldr	r0, [pc, #348]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 80053a6:	f7fb fd11 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80053b0:	d904      	bls.n	80053bc <HAL_RTC_SetAlarm_IT+0xd0>
 80053b2:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 80053b6:	4853      	ldr	r0, [pc, #332]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 80053b8:	f7fb fd08 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	789b      	ldrb	r3, [r3, #2]
 80053c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80053c2:	d904      	bls.n	80053ce <HAL_RTC_SetAlarm_IT+0xe2>
 80053c4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80053c8:	484e      	ldr	r0, [pc, #312]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 80053ca:	f7fb fcff 	bl	8000dcc <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80053d8:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	4619      	mov	r1, r3
 80053e2:	460b      	mov	r3, r1
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80053ea:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80053f0:	4413      	add	r3, r2
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e045      	b.n	8005482 <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f9e1 	bl	80057c2 <RTC_Bcd2ToByte>
 8005400:	4603      	mov	r3, r0
 8005402:	2b17      	cmp	r3, #23
 8005404:	d904      	bls.n	8005410 <HAL_RTC_SetAlarm_IT+0x124>
 8005406:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800540a:	483e      	ldr	r0, [pc, #248]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 800540c:	f7fb fcde 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f9d4 	bl	80057c2 <RTC_Bcd2ToByte>
 800541a:	4603      	mov	r3, r0
 800541c:	2b3b      	cmp	r3, #59	@ 0x3b
 800541e:	d904      	bls.n	800542a <HAL_RTC_SetAlarm_IT+0x13e>
 8005420:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8005424:	4837      	ldr	r0, [pc, #220]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 8005426:	f7fb fcd1 	bl	8000dcc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	789b      	ldrb	r3, [r3, #2]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f9c7 	bl	80057c2 <RTC_Bcd2ToByte>
 8005434:	4603      	mov	r3, r0
 8005436:	2b3b      	cmp	r3, #59	@ 0x3b
 8005438:	d904      	bls.n	8005444 <HAL_RTC_SetAlarm_IT+0x158>
 800543a:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 800543e:	4831      	ldr	r0, [pc, #196]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x218>)
 8005440:	f7fb fcc4 	bl	8000dcc <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f9ba 	bl	80057c2 <RTC_Bcd2ToByte>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005456:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f9af 	bl	80057c2 <RTC_Bcd2ToByte>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005470:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	789b      	ldrb	r3, [r3, #2]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f9a3 	bl	80057c2 <RTC_Bcd2ToByte>
 800547c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800547e:	4423      	add	r3, r4
 8005480:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	429a      	cmp	r2, r3
 8005488:	d205      	bcs.n	8005496 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005490:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005494:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005496:	69f9      	ldr	r1, [r7, #28]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f8fe 	bl	800569a <RTC_WriteAlarmCounter>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2204      	movs	r2, #4
 80054a8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e022      	b.n	80054fa <HAL_RTC_SetAlarm_IT+0x20e>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0202 	bic.w	r2, r2, #2
 80054c2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0202 	orr.w	r2, r2, #2
 80054d2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <HAL_RTC_SetAlarm_IT+0x21c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005508 <HAL_RTC_SetAlarm_IT+0x21c>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054de:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80054e0:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <HAL_RTC_SetAlarm_IT+0x21c>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a08      	ldr	r2, [pc, #32]	@ (8005508 <HAL_RTC_SetAlarm_IT+0x21c>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ea:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3724      	adds	r7, #36	@ 0x24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	08007e70 	.word	0x08007e70
 8005508:	40010400 	.word	0x40010400

0800550c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fb f9ab 	bl	800088c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0202 	bic.w	r2, r2, #2
 8005544:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005546:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_RTC_AlarmIRQHandler+0x50>)
 8005548:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800554c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	745a      	strb	r2, [r3, #17]
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40010400 	.word	0x40010400

08005560 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01d      	b.n	80055b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0208 	bic.w	r2, r2, #8
 8005584:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005586:	f7fc feb9 	bl	80022fc <HAL_GetTick>
 800558a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800558c:	e009      	b.n	80055a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800558e:	f7fc feb5 	bl	80022fc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800559c:	d901      	bls.n	80055a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e007      	b.n	80055b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0ee      	beq.n	800558e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	827b      	strh	r3, [r7, #18]
 80055c6:	2300      	movs	r3, #0
 80055c8:	823b      	strh	r3, [r7, #16]
 80055ca:	2300      	movs	r3, #0
 80055cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80055ea:	8a7a      	ldrh	r2, [r7, #18]
 80055ec:	8a3b      	ldrh	r3, [r7, #16]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d008      	beq.n	8005604 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80055f2:	8a3b      	ldrh	r3, [r7, #16]
 80055f4:	041a      	lsls	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e004      	b.n	800560e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005604:	8a7b      	ldrh	r3, [r7, #18]
 8005606:	041a      	lsls	r2, r3, #16
 8005608:	89fb      	ldrh	r3, [r7, #14]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800560e:	697b      	ldr	r3, [r7, #20]
}
 8005610:	4618      	mov	r0, r3
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f85d 	bl	80056e8 <RTC_EnterInitMode>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e011      	b.n	800565e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	0c12      	lsrs	r2, r2, #16
 8005642:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	b292      	uxth	r2, r2
 800564c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f872 	bl	8005738 <RTC_ExitInitMode>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	81fb      	strh	r3, [r7, #14]
 8005674:	2300      	movs	r3, #0
 8005676:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	041a      	lsls	r2, r3, #16
 800568c:	89bb      	ldrh	r3, [r7, #12]
 800568e:	4313      	orrs	r3, r2
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f81d 	bl	80056e8 <RTC_EnterInitMode>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e011      	b.n	80056de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	0c12      	lsrs	r2, r2, #16
 80056c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	b292      	uxth	r2, r2
 80056cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f832 	bl	8005738 <RTC_ExitInitMode>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80056f4:	f7fc fe02 	bl	80022fc <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80056fa:	e009      	b.n	8005710 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80056fc:	f7fc fdfe 	bl	80022fc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800570a:	d901      	bls.n	8005710 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e00f      	b.n	8005730 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ee      	beq.n	80056fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0210 	orr.w	r2, r2, #16
 800572c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0210 	bic.w	r2, r2, #16
 8005752:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005754:	f7fc fdd2 	bl	80022fc <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800575a:	e009      	b.n	8005770 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800575c:	f7fc fdce 	bl	80022fc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800576a:	d901      	bls.n	8005770 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e007      	b.n	8005780 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ee      	beq.n	800575c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005796:	e005      	b.n	80057a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	3b0a      	subs	r3, #10
 80057a2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d8f6      	bhi.n	8005798 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	b2db      	uxtb	r3, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	091b      	lsrs	r3, r3, #4
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	b2db      	uxtb	r3, r3
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7bdb      	ldrb	r3, [r3, #15]
 800581a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7b5b      	ldrb	r3, [r3, #13]
 8005820:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7b9b      	ldrb	r3, [r3, #14]
 8005826:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005828:	2300      	movs	r3, #0
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	e06f      	b.n	800590e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d011      	beq.n	8005858 <RTC_DateUpdate+0x5c>
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d00e      	beq.n	8005858 <RTC_DateUpdate+0x5c>
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b05      	cmp	r3, #5
 800583e:	d00b      	beq.n	8005858 <RTC_DateUpdate+0x5c>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b07      	cmp	r3, #7
 8005844:	d008      	beq.n	8005858 <RTC_DateUpdate+0x5c>
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d005      	beq.n	8005858 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b0a      	cmp	r3, #10
 8005850:	d002      	beq.n	8005858 <RTC_DateUpdate+0x5c>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	d117      	bne.n	8005888 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b1e      	cmp	r3, #30
 800585c:	d803      	bhi.n	8005866 <RTC_DateUpdate+0x6a>
      {
        day++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005864:	e050      	b.n	8005908 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b0c      	cmp	r3, #12
 800586a:	d005      	beq.n	8005878 <RTC_DateUpdate+0x7c>
        {
          month++;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3301      	adds	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005872:	2301      	movs	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005876:	e047      	b.n	8005908 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005878:	2301      	movs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800587c:	2301      	movs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
          year++;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	3301      	adds	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005886:	e03f      	b.n	8005908 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b04      	cmp	r3, #4
 800588c:	d008      	beq.n	80058a0 <RTC_DateUpdate+0xa4>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b06      	cmp	r3, #6
 8005892:	d005      	beq.n	80058a0 <RTC_DateUpdate+0xa4>
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b09      	cmp	r3, #9
 8005898:	d002      	beq.n	80058a0 <RTC_DateUpdate+0xa4>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b0b      	cmp	r3, #11
 800589e:	d10c      	bne.n	80058ba <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b1d      	cmp	r3, #29
 80058a4:	d803      	bhi.n	80058ae <RTC_DateUpdate+0xb2>
      {
        day++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80058ac:	e02c      	b.n	8005908 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	3301      	adds	r3, #1
 80058b2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80058b8:	e026      	b.n	8005908 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d123      	bne.n	8005908 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b1b      	cmp	r3, #27
 80058c4:	d803      	bhi.n	80058ce <RTC_DateUpdate+0xd2>
      {
        day++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e01c      	b.n	8005908 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b1c      	cmp	r3, #28
 80058d2:	d111      	bne.n	80058f8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 f839 	bl	8005950 <RTC_IsLeapYear>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <RTC_DateUpdate+0xf0>
        {
          day++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e00d      	b.n	8005908 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3301      	adds	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80058f2:	2301      	movs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e007      	b.n	8005908 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b1d      	cmp	r3, #29
 80058fc:	d104      	bne.n	8005908 <RTC_DateUpdate+0x10c>
      {
        month++;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005904:	2301      	movs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	3301      	adds	r3, #1
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d38b      	bcc.n	800582e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	4619      	mov	r1, r3
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f000 f83b 	bl	80059b4 <RTC_WeekDayNum>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	731a      	strb	r2, [r3, #12]
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	e01d      	b.n	80059a6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	4a10      	ldr	r2, [pc, #64]	@ (80059b0 <RTC_IsLeapYear+0x60>)
 800596e:	fba2 1203 	umull	r1, r2, r2, r3
 8005972:	0952      	lsrs	r2, r2, #5
 8005974:	2164      	movs	r1, #100	@ 0x64
 8005976:	fb01 f202 	mul.w	r2, r1, r2
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005982:	2301      	movs	r3, #1
 8005984:	e00f      	b.n	80059a6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	4a09      	ldr	r2, [pc, #36]	@ (80059b0 <RTC_IsLeapYear+0x60>)
 800598a:	fba2 1203 	umull	r1, r2, r2, r3
 800598e:	09d2      	lsrs	r2, r2, #7
 8005990:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005994:	fb01 f202 	mul.w	r2, r1, r2
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80059a4:	2300      	movs	r3, #0
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	51eb851f 	.word	0x51eb851f

080059b4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
 80059c0:	4613      	mov	r3, r2
 80059c2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80059d2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d82d      	bhi.n	8005a36 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a98 <RTC_WeekDayNum+0xe4>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	085a      	lsrs	r2, r3, #1
 80059ee:	78bb      	ldrb	r3, [r7, #2]
 80059f0:	441a      	add	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	441a      	add	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	4926      	ldr	r1, [pc, #152]	@ (8005a9c <RTC_WeekDayNum+0xe8>)
 8005a04:	fba1 1303 	umull	r1, r3, r1, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4922      	ldr	r1, [pc, #136]	@ (8005a9c <RTC_WeekDayNum+0xe8>)
 8005a12:	fba1 1303 	umull	r1, r3, r1, r3
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	4413      	add	r3, r2
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <RTC_WeekDayNum+0xec>)
 8005a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a22:	1ad1      	subs	r1, r2, r3
 8005a24:	0849      	lsrs	r1, r1, #1
 8005a26:	440b      	add	r3, r1
 8005a28:	0899      	lsrs	r1, r3, #2
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a5b      	subs	r3, r3, r1
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e029      	b.n	8005a8a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	4a15      	ldr	r2, [pc, #84]	@ (8005a98 <RTC_WeekDayNum+0xe4>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	085a      	lsrs	r2, r3, #1
 8005a4a:	78bb      	ldrb	r3, [r7, #2]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	441a      	add	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	089b      	lsrs	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4910      	ldr	r1, [pc, #64]	@ (8005a9c <RTC_WeekDayNum+0xe8>)
 8005a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	1ad2      	subs	r2, r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	490d      	ldr	r1, [pc, #52]	@ (8005a9c <RTC_WeekDayNum+0xe8>)
 8005a68:	fba1 1303 	umull	r1, r3, r1, r3
 8005a6c:	09db      	lsrs	r3, r3, #7
 8005a6e:	4413      	add	r3, r2
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <RTC_WeekDayNum+0xec>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	1ad1      	subs	r1, r2, r3
 8005a7a:	0849      	lsrs	r1, r1, #1
 8005a7c:	440b      	add	r3, r1
 8005a7e:	0899      	lsrs	r1, r3, #2
 8005a80:	460b      	mov	r3, r1
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	1a5b      	subs	r3, r3, r1
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	b2db      	uxtb	r3, r3
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	38e38e39 	.word	0x38e38e39
 8005a9c:	51eb851f 	.word	0x51eb851f
 8005aa0:	24924925 	.word	0x24924925

08005aa4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d027      	beq.n	8005b0a <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d020      	beq.n	8005b0a <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f824 	bl	8005b24 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0204 	mvn.w	r2, #4
 8005ae4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	745a      	strb	r2, [r3, #17]
 8005aec:	e005      	b.n	8005afa <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f80f 	bl	8005b12 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e095      	b.n	8005c76 <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02c      	beq.n	8005bac <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4a      	ldr	r2, [pc, #296]	@ (8005c80 <HAL_UART_Init+0x148>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a48      	ldr	r2, [pc, #288]	@ (8005c84 <HAL_UART_Init+0x14c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a47      	ldr	r2, [pc, #284]	@ (8005c88 <HAL_UART_Init+0x150>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b70:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8005b74:	4845      	ldr	r0, [pc, #276]	@ (8005c8c <HAL_UART_Init+0x154>)
 8005b76:	f7fb f929 	bl	8000dcc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d028      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d023      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b94:	d01e      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b9e:	d019      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005ba0:	f240 116f 	movw	r1, #367	@ 0x16f
 8005ba4:	4839      	ldr	r0, [pc, #228]	@ (8005c8c <HAL_UART_Init+0x154>)
 8005ba6:	f7fb f911 	bl	8000dcc <assert_failed>
 8005baa:	e013      	b.n	8005bd4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a33      	ldr	r2, [pc, #204]	@ (8005c80 <HAL_UART_Init+0x148>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a32      	ldr	r2, [pc, #200]	@ (8005c84 <HAL_UART_Init+0x14c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	@ (8005c88 <HAL_UART_Init+0x150>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bca:	f240 1173 	movw	r1, #371	@ 0x173
 8005bce:	482f      	ldr	r0, [pc, #188]	@ (8005c8c <HAL_UART_Init+0x154>)
 8005bd0:	f7fb f8fc 	bl	8000dcc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_UART_Init+0xb8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d004      	beq.n	8005bf0 <HAL_UART_Init+0xb8>
 8005be6:	f240 1175 	movw	r1, #373	@ 0x175
 8005bea:	4828      	ldr	r0, [pc, #160]	@ (8005c8c <HAL_UART_Init+0x154>)
 8005bec:	f7fb f8ee 	bl	8000dcc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fc fa3d 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 f91c 	bl	8006e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40013800 	.word	0x40013800
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004800 	.word	0x40004800
 8005c8c:	08007ea8 	.word	0x08007ea8

08005c90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d16d      	bne.n	8005d8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_Transmit+0x2c>
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e066      	b.n	8005d8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2221      	movs	r2, #33	@ 0x21
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cce:	f7fc fb15 	bl	80022fc <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce8:	d108      	bne.n	8005cfc <HAL_UART_Transmit+0x6c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e003      	b.n	8005d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d04:	e02a      	b.n	8005d5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	@ 0x80
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fddb 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e036      	b.n	8005d8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	3302      	adds	r3, #2
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e007      	b.n	8005d4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1cf      	bne.n	8005d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2140      	movs	r1, #64	@ 0x40
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fdab 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	@ 0x28
 8005d9a:	af02      	add	r7, sp, #8
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d17c      	bne.n	8005eb0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_UART_Receive+0x2c>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e075      	b.n	8005eb2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2222      	movs	r2, #34	@ 0x22
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dda:	f7fc fa8f 	bl	80022fc <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88fa      	ldrh	r2, [r7, #6]
 8005de4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df4:	d108      	bne.n	8005e08 <HAL_UART_Receive+0x72>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e003      	b.n	8005e10 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e10:	e043      	b.n	8005e9a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fd55 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e042      	b.n	8005eb2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3302      	adds	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e01f      	b.n	8005e8c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e54:	d007      	beq.n	8005e66 <HAL_UART_Receive+0xd0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <HAL_UART_Receive+0xde>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e008      	b.n	8005e86 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1b6      	bne.n	8005e12 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d121      	bne.n	8005f18 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Transmit_IT+0x26>
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e01a      	b.n	8005f1a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	f040 80c0 	bne.w	80060c2 <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e0b8      	b.n	80060c4 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2222      	movs	r2, #34	@ 0x22
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6c:	f7fc f9c6 	bl	80022fc <HAL_GetTick>
 8005f70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	d108      	bne.n	8005f9a <HAL_UARTEx_ReceiveToIdle+0x76>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e003      	b.n	8005fa2 <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005fa8:	e077      	b.n	800609a <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d117      	bne.n	8005fe8 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e06d      	b.n	80060c4 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d13c      	bne.n	8006070 <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10c      	bne.n	8006016 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006008:	b29a      	uxth	r2, r3
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3302      	adds	r3, #2
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e01f      	b.n	8006056 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601e:	d007      	beq.n	8006030 <HAL_UARTEx_ReceiveToIdle+0x10c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <HAL_UARTEx_ReceiveToIdle+0x11a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e008      	b.n	8006050 <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800604a:	b2da      	uxtb	r2, r3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3301      	adds	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d010      	beq.n	800609a <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006078:	f7fc f940 	bl	80022fc <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <HAL_UARTEx_ReceiveToIdle+0x16a>
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d105      	bne.n	800609a <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e014      	b.n	80060c4 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d182      	bne.n	8005faa <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08c      	sub	sp, #48	@ 0x30
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d14a      	bne.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e043      	b.n	800617e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	461a      	mov	r2, r3
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fc4d 	bl	80069a8 <UART_Start_Receive_DMA>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006118:	2b00      	cmp	r3, #0
 800611a:	d12c      	bne.n	8006176 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006120:	2b01      	cmp	r3, #1
 8006122:	d125      	bne.n	8006170 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	617b      	str	r3, [r7, #20]
   return(result);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f043 0310 	orr.w	r3, r3, #16
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800615a:	627a      	str	r2, [r7, #36]	@ 0x24
 800615c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6a39      	ldr	r1, [r7, #32]
 8006160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	61fb      	str	r3, [r7, #28]
   return(result);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800616e:	e002      	b.n	8006176 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800617a:	e000      	b.n	800617e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3730      	adds	r7, #48	@ 0x30
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b0ba      	sub	sp, #232	@ 0xe8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80061c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_UART_IRQHandler+0x66>
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fd7c 	bl	8006ce4 <UART_Receive_IT>
      return;
 80061ec:	e25b      	b.n	80066a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80de 	beq.w	80063b4 <HAL_UART_IRQHandler+0x22c>
 80061f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006208:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80d1 	beq.w	80063b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_UART_IRQHandler+0xae>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <HAL_UART_IRQHandler+0xd2>
 8006242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006252:	f043 0202 	orr.w	r2, r3, #2
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HAL_UART_IRQHandler+0xf6>
 8006266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d011      	beq.n	80062ae <HAL_UART_IRQHandler+0x126>
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f043 0208 	orr.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81f2 	beq.w	800669c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_UART_IRQHandler+0x14e>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fd07 	bl	8006ce4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <HAL_UART_IRQHandler+0x17a>
 80062fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04f      	beq.n	80063a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc11 	bl	8006b2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d041      	beq.n	800639a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800632c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006342:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800634e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800635a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1d9      	bne.n	8006316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d013      	beq.n	8006392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636e:	4a7e      	ldr	r2, [pc, #504]	@ (8006568 <HAL_UART_IRQHandler+0x3e0>)
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	4618      	mov	r0, r3
 8006378:	f7fc fad4 	bl	8002924 <HAL_DMA_Abort_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e00e      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f993 	bl	80066be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	e00a      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f98f 	bl	80066be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e006      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f98b 	bl	80066be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80063ae:	e175      	b.n	800669c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	bf00      	nop
    return;
 80063b2:	e173      	b.n	800669c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 814f 	bne.w	800665c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8148 	beq.w	800665c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8141 	beq.w	800665c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80b6 	beq.w	800656c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800640c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8145 	beq.w	80066a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800641a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800641e:	429a      	cmp	r2, r3
 8006420:	f080 813e 	bcs.w	80066a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800642a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b20      	cmp	r3, #32
 8006434:	f000 8088 	beq.w	8006548 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800644e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006464:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006470:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800647c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1d9      	bne.n	8006438 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e1      	bne.n	8006484 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e3      	bne.n	80064c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006518:	f023 0310 	bic.w	r3, r3, #16
 800651c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800652a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800652c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e3      	bne.n	8006506 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc f9b2 	bl	80028ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006556:	b29b      	uxth	r3, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fa f9ea 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006564:	e09c      	b.n	80066a0 <HAL_UART_IRQHandler+0x518>
 8006566:	bf00      	nop
 8006568:	08006bef 	.word	0x08006bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006574:	b29b      	uxth	r3, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 808e 	beq.w	80066a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8089 	beq.w	80066a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80065b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80065b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e3      	bne.n	8006592 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	623b      	str	r3, [r7, #32]
   return(result);
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	617b      	str	r3, [r7, #20]
   return(result);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e3      	bne.n	8006610 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800664e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fa f96f 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800665a:	e023      	b.n	80066a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <HAL_UART_IRQHandler+0x4f4>
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 face 	bl	8006c16 <UART_Transmit_IT>
    return;
 800667a:	e014      	b.n	80066a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <HAL_UART_IRQHandler+0x51e>
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb0d 	bl	8006cb4 <UART_EndTransmit_IT>
    return;
 800669a:	e004      	b.n	80066a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80066a4:	bf00      	nop
  }
}
 80066a6:	37e8      	adds	r7, #232	@ 0xe8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b09c      	sub	sp, #112	@ 0x70
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d172      	bne.n	80067d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ee:	2200      	movs	r2, #0
 80066f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800670a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006712:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006714:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	667b      	str	r3, [r7, #100]	@ 0x64
 800673e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006746:	647a      	str	r2, [r7, #68]	@ 0x44
 8006748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800674c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006770:	663b      	str	r3, [r7, #96]	@ 0x60
 8006772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800677a:	633a      	str	r2, [r7, #48]	@ 0x30
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800678e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679a:	2b01      	cmp	r3, #1
 800679c:	d119      	bne.n	80067d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 0310 	bic.w	r3, r3, #16
 80067b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	617b      	str	r3, [r7, #20]
   return(result);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d4:	2200      	movs	r2, #0
 80067d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d106      	bne.n	80067ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067e4:	4619      	mov	r1, r3
 80067e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80067e8:	f7fa f8a6 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ec:	e002      	b.n	80067f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80067ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80067f0:	f7fa f898 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 80067f4:	bf00      	nop
 80067f6:	3770      	adds	r7, #112	@ 0x70
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	d108      	bne.n	800682a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	b29b      	uxth	r3, r3
 8006820:	4619      	mov	r1, r3
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7fa f888 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006828:	e002      	b.n	8006830 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f7ff ff3e 	bl	80066ac <HAL_UART_RxHalfCpltCallback>
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf14      	ite	ne
 8006858:	2301      	movne	r3, #1
 800685a:	2300      	moveq	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b21      	cmp	r3, #33	@ 0x21
 800686a:	d108      	bne.n	800687e <UART_DMAError+0x46>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f000 f92f 	bl	8006adc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b22      	cmp	r3, #34	@ 0x22
 800689e:	d108      	bne.n	80068b2 <UART_DMAError+0x7a>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2200      	movs	r2, #0
 80068aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80068ac:	68b8      	ldr	r0, [r7, #8]
 80068ae:	f000 f93c 	bl	8006b2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b6:	f043 0210 	orr.w	r2, r3, #16
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068be:	68b8      	ldr	r0, [r7, #8]
 80068c0:	f7ff fefd 	bl	80066be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b090      	sub	sp, #64	@ 0x40
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068dc:	e050      	b.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d04c      	beq.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <UART_WaitOnFlagUntilTimeout+0x30>
 80068ec:	f7fb fd06 	bl	80022fc <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d241      	bcs.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800691c:	637a      	str	r2, [r7, #52]	@ 0x34
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	613b      	str	r3, [r7, #16]
   return(result);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006950:	623a      	str	r2, [r7, #32]
 8006952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	61bb      	str	r3, [r7, #24]
   return(result);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e00f      	b.n	80069a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	429a      	cmp	r2, r3
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	429a      	cmp	r2, r3
 800699c:	d09f      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3740      	adds	r7, #64	@ 0x40
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	@ 0x60
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	@ 0x22
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ad0 <UART_Start_Receive_DMA+0x128>)
 80069d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069dc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ad4 <UART_Start_Receive_DMA+0x12c>)
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ad8 <UART_Start_Receive_DMA+0x130>)
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	2200      	movs	r2, #0
 80069ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80069f0:	f107 0308 	add.w	r3, r7, #8
 80069f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	f7fb fee2 	bl	80027d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d019      	beq.n	8006a5e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a4a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a7e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3314      	adds	r3, #20
 8006a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ab2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6a39      	ldr	r1, [r7, #32]
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e5      	bne.n	8006a92 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3760      	adds	r7, #96	@ 0x60
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	080066d1 	.word	0x080066d1
 8006ad4:	080067fd 	.word	0x080067fd
 8006ad8:	08006839 	.word	0x08006839

08006adc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	@ 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	61ba      	str	r2, [r7, #24]
 8006b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b20:	bf00      	nop
 8006b22:	3724      	adds	r7, #36	@ 0x24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b095      	sub	sp, #84	@ 0x54
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d119      	bne.n	8006bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 0310 	bic.w	r3, r3, #16
 8006bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc2:	61ba      	str	r2, [r7, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006be4:	bf00      	nop
 8006be6:	3754      	adds	r7, #84	@ 0x54
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff fd58 	bl	80066be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b21      	cmp	r3, #33	@ 0x21
 8006c28:	d13e      	bne.n	8006ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c32:	d114      	bne.n	8006c5e <UART_Transmit_IT+0x48>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d110      	bne.n	8006c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	1c9a      	adds	r2, r3, #2
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	621a      	str	r2, [r3, #32]
 8006c5c:	e008      	b.n	8006c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6211      	str	r1, [r2, #32]
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10f      	bne.n	8006ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7f9 fe0b 	bl	80008f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	@ 0x30
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b22      	cmp	r3, #34	@ 0x22
 8006cf6:	f040 80ae 	bne.w	8006e56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d02:	d117      	bne.n	8006d34 <UART_Receive_IT+0x50>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d113      	bne.n	8006d34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d32:	e026      	b.n	8006d82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d46:	d007      	beq.n	8006d58 <UART_Receive_IT+0x74>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <UART_Receive_IT+0x82>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	e008      	b.n	8006d78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d15d      	bne.n	8006e52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0220 	bic.w	r2, r2, #32
 8006da4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d135      	bne.n	8006e48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	613b      	str	r3, [r7, #16]
   return(result);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f023 0310 	bic.w	r3, r3, #16
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e02:	623a      	str	r2, [r7, #32]
 8006e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	69f9      	ldr	r1, [r7, #28]
 8006e08:	6a3a      	ldr	r2, [r7, #32]
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e5      	bne.n	8006de2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d10a      	bne.n	8006e3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7f9 fd79 	bl	8000938 <HAL_UARTEx_RxEventCallback>
 8006e46:	e002      	b.n	8006e4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7f9 fd6b 	bl	8000924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e002      	b.n	8006e58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3730      	adds	r7, #48	@ 0x30
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8006fec <UART_SetConfig+0x18c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d904      	bls.n	8006e7c <UART_SetConfig+0x1c>
 8006e72:	f640 6166 	movw	r1, #3686	@ 0xe66
 8006e76:	485e      	ldr	r0, [pc, #376]	@ (8006ff0 <UART_SetConfig+0x190>)
 8006e78:	f7f9 ffa8 	bl	8000dcc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <UART_SetConfig+0x38>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8c:	d004      	beq.n	8006e98 <UART_SetConfig+0x38>
 8006e8e:	f640 6167 	movw	r1, #3687	@ 0xe67
 8006e92:	4857      	ldr	r0, [pc, #348]	@ (8006ff0 <UART_SetConfig+0x190>)
 8006e94:	f7f9 ff9a 	bl	8000dcc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <UART_SetConfig+0x5e>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea8:	d009      	beq.n	8006ebe <UART_SetConfig+0x5e>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006eb2:	d004      	beq.n	8006ebe <UART_SetConfig+0x5e>
 8006eb4:	f640 6168 	movw	r1, #3688	@ 0xe68
 8006eb8:	484d      	ldr	r0, [pc, #308]	@ (8006ff0 <UART_SetConfig+0x190>)
 8006eba:	f7f9 ff87 	bl	8000dcc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695a      	ldr	r2, [r3, #20]
 8006ec2:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <UART_SetConfig+0x74>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <UART_SetConfig+0x7e>
 8006ed4:	f640 6169 	movw	r1, #3689	@ 0xe69
 8006ed8:	4845      	ldr	r0, [pc, #276]	@ (8006ff0 <UART_SetConfig+0x190>)
 8006eda:	f7f9 ff77 	bl	8000dcc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006f10:	f023 030c 	bic.w	r3, r3, #12
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2e      	ldr	r2, [pc, #184]	@ (8006ff4 <UART_SetConfig+0x194>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d103      	bne.n	8006f46 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f3e:	f7fd fc23 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f46:	f7fd fc0b 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8006f4a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009a      	lsls	r2, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f62:	4a25      	ldr	r2, [pc, #148]	@ (8006ff8 <UART_SetConfig+0x198>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	0119      	lsls	r1, r3, #4
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009a      	lsls	r2, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <UART_SetConfig+0x198>)
 8006f84:	fba3 0302 	umull	r0, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	2064      	movs	r0, #100	@ 0x64
 8006f8c:	fb00 f303 	mul.w	r3, r0, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	3332      	adds	r3, #50	@ 0x32
 8006f96:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <UART_SetConfig+0x198>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fa2:	4419      	add	r1, r3
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009a      	lsls	r2, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fba:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff8 <UART_SetConfig+0x198>)
 8006fbc:	fba3 0302 	umull	r0, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	2064      	movs	r0, #100	@ 0x64
 8006fc4:	fb00 f303 	mul.w	r3, r0, r3
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	3332      	adds	r3, #50	@ 0x32
 8006fce:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <UART_SetConfig+0x198>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 020f 	and.w	r2, r3, #15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	440a      	add	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	0044aa20 	.word	0x0044aa20
 8006ff0:	08007ea8 	.word	0x08007ea8
 8006ff4:	40013800 	.word	0x40013800
 8006ff8:	51eb851f 	.word	0x51eb851f

08006ffc <siprintf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007002:	b500      	push	{lr}
 8007004:	b09c      	sub	sp, #112	@ 0x70
 8007006:	ab1d      	add	r3, sp, #116	@ 0x74
 8007008:	9002      	str	r0, [sp, #8]
 800700a:	9006      	str	r0, [sp, #24]
 800700c:	9107      	str	r1, [sp, #28]
 800700e:	9104      	str	r1, [sp, #16]
 8007010:	4808      	ldr	r0, [pc, #32]	@ (8007034 <siprintf+0x38>)
 8007012:	4909      	ldr	r1, [pc, #36]	@ (8007038 <siprintf+0x3c>)
 8007014:	f853 2b04 	ldr.w	r2, [r3], #4
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	a902      	add	r1, sp, #8
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	f000 f9b8 	bl	8007394 <_svfiprintf_r>
 8007024:	2200      	movs	r2, #0
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	b01c      	add	sp, #112	@ 0x70
 800702c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007030:	b003      	add	sp, #12
 8007032:	4770      	bx	lr
 8007034:	20000244 	.word	0x20000244
 8007038:	ffff0208 	.word	0xffff0208

0800703c <memset>:
 800703c:	4603      	mov	r3, r0
 800703e:	4402      	add	r2, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <strcat>:
 800704c:	4602      	mov	r2, r0
 800704e:	b510      	push	{r4, lr}
 8007050:	7814      	ldrb	r4, [r2, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	3201      	adds	r2, #1
 8007056:	2c00      	cmp	r4, #0
 8007058:	d1fa      	bne.n	8007050 <strcat+0x4>
 800705a:	3b01      	subs	r3, #1
 800705c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007060:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007064:	2a00      	cmp	r2, #0
 8007066:	d1f9      	bne.n	800705c <strcat+0x10>
 8007068:	bd10      	pop	{r4, pc}

0800706a <strstr>:
 800706a:	780a      	ldrb	r2, [r1, #0]
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	b96a      	cbnz	r2, 800708c <strstr+0x22>
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	429a      	cmp	r2, r3
 8007074:	d109      	bne.n	800708a <strstr+0x20>
 8007076:	460c      	mov	r4, r1
 8007078:	4605      	mov	r5, r0
 800707a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f6      	beq.n	8007070 <strstr+0x6>
 8007082:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007086:	429e      	cmp	r6, r3
 8007088:	d0f7      	beq.n	800707a <strstr+0x10>
 800708a:	3001      	adds	r0, #1
 800708c:	7803      	ldrb	r3, [r0, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1ef      	bne.n	8007072 <strstr+0x8>
 8007092:	4618      	mov	r0, r3
 8007094:	e7ec      	b.n	8007070 <strstr+0x6>
	...

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	@ (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20000244 	.word	0x20000244

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	2600      	movs	r6, #0
 80070a8:	4d0c      	ldr	r5, [pc, #48]	@ (80070dc <__libc_init_array+0x38>)
 80070aa:	4c0d      	ldr	r4, [pc, #52]	@ (80070e0 <__libc_init_array+0x3c>)
 80070ac:	1b64      	subs	r4, r4, r5
 80070ae:	10a4      	asrs	r4, r4, #2
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	f000 fc78 	bl	80079a8 <_init>
 80070b8:	2600      	movs	r6, #0
 80070ba:	4d0a      	ldr	r5, [pc, #40]	@ (80070e4 <__libc_init_array+0x40>)
 80070bc:	4c0a      	ldr	r4, [pc, #40]	@ (80070e8 <__libc_init_array+0x44>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	080086cc 	.word	0x080086cc
 80070e0:	080086cc 	.word	0x080086cc
 80070e4:	080086cc 	.word	0x080086cc
 80070e8:	080086d0 	.word	0x080086d0

080070ec <__retarget_lock_acquire_recursive>:
 80070ec:	4770      	bx	lr

080070ee <__retarget_lock_release_recursive>:
 80070ee:	4770      	bx	lr

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d040      	beq.n	800717a <_free_r+0x8a>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f000 f8de 	bl	80072c4 <__malloc_lock>
 8007108:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <_free_r+0x8c>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x2c>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007118:	f000 b8da 	b.w	80072d0 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x42>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x1e>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x4c>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x42>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1850      	adds	r0, r2, r1
 8007140:	42a0      	cmp	r0, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x6c>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	4401      	add	r1, r0
 8007148:	1850      	adds	r0, r2, r1
 800714a:	4283      	cmp	r3, r0
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x22>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4408      	add	r0, r1
 8007156:	6010      	str	r0, [r2, #0]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	e7da      	b.n	8007112 <_free_r+0x22>
 800715c:	d902      	bls.n	8007164 <_free_r+0x74>
 800715e:	230c      	movs	r3, #12
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x22>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf01      	itttt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	1809      	addeq	r1, r1, r0
 8007172:	6021      	streq	r1, [r4, #0]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	6054      	str	r4, [r2, #4]
 8007178:	e7cb      	b.n	8007112 <_free_r+0x22>
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000af4 	.word	0x20000af4

08007180 <sbrk_aligned>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4e0f      	ldr	r6, [pc, #60]	@ (80071c0 <sbrk_aligned+0x40>)
 8007184:	460c      	mov	r4, r1
 8007186:	6831      	ldr	r1, [r6, #0]
 8007188:	4605      	mov	r5, r0
 800718a:	b911      	cbnz	r1, 8007192 <sbrk_aligned+0x12>
 800718c:	f000 fbaa 	bl	80078e4 <_sbrk_r>
 8007190:	6030      	str	r0, [r6, #0]
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 fba5 	bl	80078e4 <_sbrk_r>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d103      	bne.n	80071a6 <sbrk_aligned+0x26>
 800719e:	f04f 34ff 	mov.w	r4, #4294967295
 80071a2:	4620      	mov	r0, r4
 80071a4:	bd70      	pop	{r4, r5, r6, pc}
 80071a6:	1cc4      	adds	r4, r0, #3
 80071a8:	f024 0403 	bic.w	r4, r4, #3
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d0f8      	beq.n	80071a2 <sbrk_aligned+0x22>
 80071b0:	1a21      	subs	r1, r4, r0
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 fb96 	bl	80078e4 <_sbrk_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d1f2      	bne.n	80071a2 <sbrk_aligned+0x22>
 80071bc:	e7ef      	b.n	800719e <sbrk_aligned+0x1e>
 80071be:	bf00      	nop
 80071c0:	20000af0 	.word	0x20000af0

080071c4 <_malloc_r>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	1ccd      	adds	r5, r1, #3
 80071ca:	f025 0503 	bic.w	r5, r5, #3
 80071ce:	3508      	adds	r5, #8
 80071d0:	2d0c      	cmp	r5, #12
 80071d2:	bf38      	it	cc
 80071d4:	250c      	movcc	r5, #12
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	4606      	mov	r6, r0
 80071da:	db01      	blt.n	80071e0 <_malloc_r+0x1c>
 80071dc:	42a9      	cmp	r1, r5
 80071de:	d904      	bls.n	80071ea <_malloc_r+0x26>
 80071e0:	230c      	movs	r3, #12
 80071e2:	6033      	str	r3, [r6, #0]
 80071e4:	2000      	movs	r0, #0
 80071e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072c0 <_malloc_r+0xfc>
 80071ee:	f000 f869 	bl	80072c4 <__malloc_lock>
 80071f2:	f8d8 3000 	ldr.w	r3, [r8]
 80071f6:	461c      	mov	r4, r3
 80071f8:	bb44      	cbnz	r4, 800724c <_malloc_r+0x88>
 80071fa:	4629      	mov	r1, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7ff ffbf 	bl	8007180 <sbrk_aligned>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	4604      	mov	r4, r0
 8007206:	d158      	bne.n	80072ba <_malloc_r+0xf6>
 8007208:	f8d8 4000 	ldr.w	r4, [r8]
 800720c:	4627      	mov	r7, r4
 800720e:	2f00      	cmp	r7, #0
 8007210:	d143      	bne.n	800729a <_malloc_r+0xd6>
 8007212:	2c00      	cmp	r4, #0
 8007214:	d04b      	beq.n	80072ae <_malloc_r+0xea>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	4639      	mov	r1, r7
 800721a:	4630      	mov	r0, r6
 800721c:	eb04 0903 	add.w	r9, r4, r3
 8007220:	f000 fb60 	bl	80078e4 <_sbrk_r>
 8007224:	4581      	cmp	r9, r0
 8007226:	d142      	bne.n	80072ae <_malloc_r+0xea>
 8007228:	6821      	ldr	r1, [r4, #0]
 800722a:	4630      	mov	r0, r6
 800722c:	1a6d      	subs	r5, r5, r1
 800722e:	4629      	mov	r1, r5
 8007230:	f7ff ffa6 	bl	8007180 <sbrk_aligned>
 8007234:	3001      	adds	r0, #1
 8007236:	d03a      	beq.n	80072ae <_malloc_r+0xea>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	442b      	add	r3, r5
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	f8d8 3000 	ldr.w	r3, [r8]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	bb62      	cbnz	r2, 80072a0 <_malloc_r+0xdc>
 8007246:	f8c8 7000 	str.w	r7, [r8]
 800724a:	e00f      	b.n	800726c <_malloc_r+0xa8>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	1b52      	subs	r2, r2, r5
 8007250:	d420      	bmi.n	8007294 <_malloc_r+0xd0>
 8007252:	2a0b      	cmp	r2, #11
 8007254:	d917      	bls.n	8007286 <_malloc_r+0xc2>
 8007256:	1961      	adds	r1, r4, r5
 8007258:	42a3      	cmp	r3, r4
 800725a:	6025      	str	r5, [r4, #0]
 800725c:	bf18      	it	ne
 800725e:	6059      	strne	r1, [r3, #4]
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	bf08      	it	eq
 8007264:	f8c8 1000 	streq.w	r1, [r8]
 8007268:	5162      	str	r2, [r4, r5]
 800726a:	604b      	str	r3, [r1, #4]
 800726c:	4630      	mov	r0, r6
 800726e:	f000 f82f 	bl	80072d0 <__malloc_unlock>
 8007272:	f104 000b 	add.w	r0, r4, #11
 8007276:	1d23      	adds	r3, r4, #4
 8007278:	f020 0007 	bic.w	r0, r0, #7
 800727c:	1ac2      	subs	r2, r0, r3
 800727e:	bf1c      	itt	ne
 8007280:	1a1b      	subne	r3, r3, r0
 8007282:	50a3      	strne	r3, [r4, r2]
 8007284:	e7af      	b.n	80071e6 <_malloc_r+0x22>
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	42a3      	cmp	r3, r4
 800728a:	bf0c      	ite	eq
 800728c:	f8c8 2000 	streq.w	r2, [r8]
 8007290:	605a      	strne	r2, [r3, #4]
 8007292:	e7eb      	b.n	800726c <_malloc_r+0xa8>
 8007294:	4623      	mov	r3, r4
 8007296:	6864      	ldr	r4, [r4, #4]
 8007298:	e7ae      	b.n	80071f8 <_malloc_r+0x34>
 800729a:	463c      	mov	r4, r7
 800729c:	687f      	ldr	r7, [r7, #4]
 800729e:	e7b6      	b.n	800720e <_malloc_r+0x4a>
 80072a0:	461a      	mov	r2, r3
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	d1fb      	bne.n	80072a0 <_malloc_r+0xdc>
 80072a8:	2300      	movs	r3, #0
 80072aa:	6053      	str	r3, [r2, #4]
 80072ac:	e7de      	b.n	800726c <_malloc_r+0xa8>
 80072ae:	230c      	movs	r3, #12
 80072b0:	4630      	mov	r0, r6
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	f000 f80c 	bl	80072d0 <__malloc_unlock>
 80072b8:	e794      	b.n	80071e4 <_malloc_r+0x20>
 80072ba:	6005      	str	r5, [r0, #0]
 80072bc:	e7d6      	b.n	800726c <_malloc_r+0xa8>
 80072be:	bf00      	nop
 80072c0:	20000af4 	.word	0x20000af4

080072c4 <__malloc_lock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	@ (80072cc <__malloc_lock+0x8>)
 80072c6:	f7ff bf11 	b.w	80070ec <__retarget_lock_acquire_recursive>
 80072ca:	bf00      	nop
 80072cc:	20000aec 	.word	0x20000aec

080072d0 <__malloc_unlock>:
 80072d0:	4801      	ldr	r0, [pc, #4]	@ (80072d8 <__malloc_unlock+0x8>)
 80072d2:	f7ff bf0c 	b.w	80070ee <__retarget_lock_release_recursive>
 80072d6:	bf00      	nop
 80072d8:	20000aec 	.word	0x20000aec

080072dc <__ssputs_r>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	461f      	mov	r7, r3
 80072e2:	688e      	ldr	r6, [r1, #8]
 80072e4:	4682      	mov	sl, r0
 80072e6:	42be      	cmp	r6, r7
 80072e8:	460c      	mov	r4, r1
 80072ea:	4690      	mov	r8, r2
 80072ec:	680b      	ldr	r3, [r1, #0]
 80072ee:	d82d      	bhi.n	800734c <__ssputs_r+0x70>
 80072f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072f8:	d026      	beq.n	8007348 <__ssputs_r+0x6c>
 80072fa:	6965      	ldr	r5, [r4, #20]
 80072fc:	6909      	ldr	r1, [r1, #16]
 80072fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007302:	eba3 0901 	sub.w	r9, r3, r1
 8007306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800730a:	1c7b      	adds	r3, r7, #1
 800730c:	444b      	add	r3, r9
 800730e:	106d      	asrs	r5, r5, #1
 8007310:	429d      	cmp	r5, r3
 8007312:	bf38      	it	cc
 8007314:	461d      	movcc	r5, r3
 8007316:	0553      	lsls	r3, r2, #21
 8007318:	d527      	bpl.n	800736a <__ssputs_r+0x8e>
 800731a:	4629      	mov	r1, r5
 800731c:	f7ff ff52 	bl	80071c4 <_malloc_r>
 8007320:	4606      	mov	r6, r0
 8007322:	b360      	cbz	r0, 800737e <__ssputs_r+0xa2>
 8007324:	464a      	mov	r2, r9
 8007326:	6921      	ldr	r1, [r4, #16]
 8007328:	f000 fafa 	bl	8007920 <memcpy>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	6126      	str	r6, [r4, #16]
 800733a:	444e      	add	r6, r9
 800733c:	6026      	str	r6, [r4, #0]
 800733e:	463e      	mov	r6, r7
 8007340:	6165      	str	r5, [r4, #20]
 8007342:	eba5 0509 	sub.w	r5, r5, r9
 8007346:	60a5      	str	r5, [r4, #8]
 8007348:	42be      	cmp	r6, r7
 800734a:	d900      	bls.n	800734e <__ssputs_r+0x72>
 800734c:	463e      	mov	r6, r7
 800734e:	4632      	mov	r2, r6
 8007350:	4641      	mov	r1, r8
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	f000 faac 	bl	80078b0 <memmove>
 8007358:	2000      	movs	r0, #0
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	1b9b      	subs	r3, r3, r6
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4433      	add	r3, r6
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736a:	462a      	mov	r2, r5
 800736c:	f000 fae6 	bl	800793c <_realloc_r>
 8007370:	4606      	mov	r6, r0
 8007372:	2800      	cmp	r0, #0
 8007374:	d1e0      	bne.n	8007338 <__ssputs_r+0x5c>
 8007376:	4650      	mov	r0, sl
 8007378:	6921      	ldr	r1, [r4, #16]
 800737a:	f7ff feb9 	bl	80070f0 <_free_r>
 800737e:	230c      	movs	r3, #12
 8007380:	f8ca 3000 	str.w	r3, [sl]
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	e7e9      	b.n	8007366 <__ssputs_r+0x8a>
	...

08007394 <_svfiprintf_r>:
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	4698      	mov	r8, r3
 800739a:	898b      	ldrh	r3, [r1, #12]
 800739c:	4607      	mov	r7, r0
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	460d      	mov	r5, r1
 80073a2:	4614      	mov	r4, r2
 80073a4:	b09d      	sub	sp, #116	@ 0x74
 80073a6:	d510      	bpl.n	80073ca <_svfiprintf_r+0x36>
 80073a8:	690b      	ldr	r3, [r1, #16]
 80073aa:	b973      	cbnz	r3, 80073ca <_svfiprintf_r+0x36>
 80073ac:	2140      	movs	r1, #64	@ 0x40
 80073ae:	f7ff ff09 	bl	80071c4 <_malloc_r>
 80073b2:	6028      	str	r0, [r5, #0]
 80073b4:	6128      	str	r0, [r5, #16]
 80073b6:	b930      	cbnz	r0, 80073c6 <_svfiprintf_r+0x32>
 80073b8:	230c      	movs	r3, #12
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	b01d      	add	sp, #116	@ 0x74
 80073c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c6:	2340      	movs	r3, #64	@ 0x40
 80073c8:	616b      	str	r3, [r5, #20]
 80073ca:	2300      	movs	r3, #0
 80073cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ce:	2320      	movs	r3, #32
 80073d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073d4:	2330      	movs	r3, #48	@ 0x30
 80073d6:	f04f 0901 	mov.w	r9, #1
 80073da:	f8cd 800c 	str.w	r8, [sp, #12]
 80073de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007578 <_svfiprintf_r+0x1e4>
 80073e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e6:	4623      	mov	r3, r4
 80073e8:	469a      	mov	sl, r3
 80073ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ee:	b10a      	cbz	r2, 80073f4 <_svfiprintf_r+0x60>
 80073f0:	2a25      	cmp	r2, #37	@ 0x25
 80073f2:	d1f9      	bne.n	80073e8 <_svfiprintf_r+0x54>
 80073f4:	ebba 0b04 	subs.w	fp, sl, r4
 80073f8:	d00b      	beq.n	8007412 <_svfiprintf_r+0x7e>
 80073fa:	465b      	mov	r3, fp
 80073fc:	4622      	mov	r2, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff ff6b 	bl	80072dc <__ssputs_r>
 8007406:	3001      	adds	r0, #1
 8007408:	f000 80a7 	beq.w	800755a <_svfiprintf_r+0x1c6>
 800740c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800740e:	445a      	add	r2, fp
 8007410:	9209      	str	r2, [sp, #36]	@ 0x24
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 809f 	beq.w	800755a <_svfiprintf_r+0x1c6>
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007426:	f10a 0a01 	add.w	sl, sl, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007432:	931a      	str	r3, [sp, #104]	@ 0x68
 8007434:	4654      	mov	r4, sl
 8007436:	2205      	movs	r2, #5
 8007438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743c:	484e      	ldr	r0, [pc, #312]	@ (8007578 <_svfiprintf_r+0x1e4>)
 800743e:	f000 fa61 	bl	8007904 <memchr>
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	b9d8      	cbnz	r0, 800747e <_svfiprintf_r+0xea>
 8007446:	06d0      	lsls	r0, r2, #27
 8007448:	bf44      	itt	mi
 800744a:	2320      	movmi	r3, #32
 800744c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007450:	0711      	lsls	r1, r2, #28
 8007452:	bf44      	itt	mi
 8007454:	232b      	movmi	r3, #43	@ 0x2b
 8007456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745a:	f89a 3000 	ldrb.w	r3, [sl]
 800745e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007460:	d015      	beq.n	800748e <_svfiprintf_r+0xfa>
 8007462:	4654      	mov	r4, sl
 8007464:	2000      	movs	r0, #0
 8007466:	f04f 0c0a 	mov.w	ip, #10
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	4621      	mov	r1, r4
 800746e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007472:	3b30      	subs	r3, #48	@ 0x30
 8007474:	2b09      	cmp	r3, #9
 8007476:	d94b      	bls.n	8007510 <_svfiprintf_r+0x17c>
 8007478:	b1b0      	cbz	r0, 80074a8 <_svfiprintf_r+0x114>
 800747a:	9207      	str	r2, [sp, #28]
 800747c:	e014      	b.n	80074a8 <_svfiprintf_r+0x114>
 800747e:	eba0 0308 	sub.w	r3, r0, r8
 8007482:	fa09 f303 	lsl.w	r3, r9, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	46a2      	mov	sl, r4
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	e7d2      	b.n	8007434 <_svfiprintf_r+0xa0>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	1d19      	adds	r1, r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9103      	str	r1, [sp, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfbb      	ittet	lt
 800749a:	425b      	neglt	r3, r3
 800749c:	f042 0202 	orrlt.w	r2, r2, #2
 80074a0:	9307      	strge	r3, [sp, #28]
 80074a2:	9307      	strlt	r3, [sp, #28]
 80074a4:	bfb8      	it	lt
 80074a6:	9204      	strlt	r2, [sp, #16]
 80074a8:	7823      	ldrb	r3, [r4, #0]
 80074aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ac:	d10a      	bne.n	80074c4 <_svfiprintf_r+0x130>
 80074ae:	7863      	ldrb	r3, [r4, #1]
 80074b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b2:	d132      	bne.n	800751a <_svfiprintf_r+0x186>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	3402      	adds	r4, #2
 80074b8:	1d1a      	adds	r2, r3, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	9203      	str	r2, [sp, #12]
 80074be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c2:	9305      	str	r3, [sp, #20]
 80074c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800757c <_svfiprintf_r+0x1e8>
 80074c8:	2203      	movs	r2, #3
 80074ca:	4650      	mov	r0, sl
 80074cc:	7821      	ldrb	r1, [r4, #0]
 80074ce:	f000 fa19 	bl	8007904 <memchr>
 80074d2:	b138      	cbz	r0, 80074e4 <_svfiprintf_r+0x150>
 80074d4:	2240      	movs	r2, #64	@ 0x40
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	eba0 000a 	sub.w	r0, r0, sl
 80074dc:	4082      	lsls	r2, r0
 80074de:	4313      	orrs	r3, r2
 80074e0:	3401      	adds	r4, #1
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e8:	2206      	movs	r2, #6
 80074ea:	4825      	ldr	r0, [pc, #148]	@ (8007580 <_svfiprintf_r+0x1ec>)
 80074ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f0:	f000 fa08 	bl	8007904 <memchr>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d036      	beq.n	8007566 <_svfiprintf_r+0x1d2>
 80074f8:	4b22      	ldr	r3, [pc, #136]	@ (8007584 <_svfiprintf_r+0x1f0>)
 80074fa:	bb1b      	cbnz	r3, 8007544 <_svfiprintf_r+0x1b0>
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	3307      	adds	r3, #7
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	3308      	adds	r3, #8
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750a:	4433      	add	r3, r6
 800750c:	9309      	str	r3, [sp, #36]	@ 0x24
 800750e:	e76a      	b.n	80073e6 <_svfiprintf_r+0x52>
 8007510:	460c      	mov	r4, r1
 8007512:	2001      	movs	r0, #1
 8007514:	fb0c 3202 	mla	r2, ip, r2, r3
 8007518:	e7a8      	b.n	800746c <_svfiprintf_r+0xd8>
 800751a:	2300      	movs	r3, #0
 800751c:	f04f 0c0a 	mov.w	ip, #10
 8007520:	4619      	mov	r1, r3
 8007522:	3401      	adds	r4, #1
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4620      	mov	r0, r4
 8007528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752c:	3a30      	subs	r2, #48	@ 0x30
 800752e:	2a09      	cmp	r2, #9
 8007530:	d903      	bls.n	800753a <_svfiprintf_r+0x1a6>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0c6      	beq.n	80074c4 <_svfiprintf_r+0x130>
 8007536:	9105      	str	r1, [sp, #20]
 8007538:	e7c4      	b.n	80074c4 <_svfiprintf_r+0x130>
 800753a:	4604      	mov	r4, r0
 800753c:	2301      	movs	r3, #1
 800753e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007542:	e7f0      	b.n	8007526 <_svfiprintf_r+0x192>
 8007544:	ab03      	add	r3, sp, #12
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	462a      	mov	r2, r5
 800754a:	4638      	mov	r0, r7
 800754c:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <_svfiprintf_r+0x1f4>)
 800754e:	a904      	add	r1, sp, #16
 8007550:	f3af 8000 	nop.w
 8007554:	1c42      	adds	r2, r0, #1
 8007556:	4606      	mov	r6, r0
 8007558:	d1d6      	bne.n	8007508 <_svfiprintf_r+0x174>
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	065b      	lsls	r3, r3, #25
 800755e:	f53f af2d 	bmi.w	80073bc <_svfiprintf_r+0x28>
 8007562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007564:	e72c      	b.n	80073c0 <_svfiprintf_r+0x2c>
 8007566:	ab03      	add	r3, sp, #12
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	462a      	mov	r2, r5
 800756c:	4638      	mov	r0, r7
 800756e:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <_svfiprintf_r+0x1f4>)
 8007570:	a904      	add	r1, sp, #16
 8007572:	f000 f87d 	bl	8007670 <_printf_i>
 8007576:	e7ed      	b.n	8007554 <_svfiprintf_r+0x1c0>
 8007578:	0800868e 	.word	0x0800868e
 800757c:	08008694 	.word	0x08008694
 8007580:	08008698 	.word	0x08008698
 8007584:	00000000 	.word	0x00000000
 8007588:	080072dd 	.word	0x080072dd

0800758c <_printf_common>:
 800758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	4616      	mov	r6, r2
 8007592:	4698      	mov	r8, r3
 8007594:	688a      	ldr	r2, [r1, #8]
 8007596:	690b      	ldr	r3, [r1, #16]
 8007598:	4607      	mov	r7, r0
 800759a:	4293      	cmp	r3, r2
 800759c:	bfb8      	it	lt
 800759e:	4613      	movlt	r3, r2
 80075a0:	6033      	str	r3, [r6, #0]
 80075a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075a6:	460c      	mov	r4, r1
 80075a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075ac:	b10a      	cbz	r2, 80075b2 <_printf_common+0x26>
 80075ae:	3301      	adds	r3, #1
 80075b0:	6033      	str	r3, [r6, #0]
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	0699      	lsls	r1, r3, #26
 80075b6:	bf42      	ittt	mi
 80075b8:	6833      	ldrmi	r3, [r6, #0]
 80075ba:	3302      	addmi	r3, #2
 80075bc:	6033      	strmi	r3, [r6, #0]
 80075be:	6825      	ldr	r5, [r4, #0]
 80075c0:	f015 0506 	ands.w	r5, r5, #6
 80075c4:	d106      	bne.n	80075d4 <_printf_common+0x48>
 80075c6:	f104 0a19 	add.w	sl, r4, #25
 80075ca:	68e3      	ldr	r3, [r4, #12]
 80075cc:	6832      	ldr	r2, [r6, #0]
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	dc2b      	bgt.n	800762c <_printf_common+0xa0>
 80075d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	3b00      	subs	r3, #0
 80075dc:	bf18      	it	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	0692      	lsls	r2, r2, #26
 80075e2:	d430      	bmi.n	8007646 <_printf_common+0xba>
 80075e4:	4641      	mov	r1, r8
 80075e6:	4638      	mov	r0, r7
 80075e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075ec:	47c8      	blx	r9
 80075ee:	3001      	adds	r0, #1
 80075f0:	d023      	beq.n	800763a <_printf_common+0xae>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	f003 0306 	and.w	r3, r3, #6
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	bf14      	ite	ne
 80075fe:	2500      	movne	r5, #0
 8007600:	6833      	ldreq	r3, [r6, #0]
 8007602:	f04f 0600 	mov.w	r6, #0
 8007606:	bf08      	it	eq
 8007608:	68e5      	ldreq	r5, [r4, #12]
 800760a:	f104 041a 	add.w	r4, r4, #26
 800760e:	bf08      	it	eq
 8007610:	1aed      	subeq	r5, r5, r3
 8007612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007616:	bf08      	it	eq
 8007618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800761c:	4293      	cmp	r3, r2
 800761e:	bfc4      	itt	gt
 8007620:	1a9b      	subgt	r3, r3, r2
 8007622:	18ed      	addgt	r5, r5, r3
 8007624:	42b5      	cmp	r5, r6
 8007626:	d11a      	bne.n	800765e <_printf_common+0xd2>
 8007628:	2000      	movs	r0, #0
 800762a:	e008      	b.n	800763e <_printf_common+0xb2>
 800762c:	2301      	movs	r3, #1
 800762e:	4652      	mov	r2, sl
 8007630:	4641      	mov	r1, r8
 8007632:	4638      	mov	r0, r7
 8007634:	47c8      	blx	r9
 8007636:	3001      	adds	r0, #1
 8007638:	d103      	bne.n	8007642 <_printf_common+0xb6>
 800763a:	f04f 30ff 	mov.w	r0, #4294967295
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	3501      	adds	r5, #1
 8007644:	e7c1      	b.n	80075ca <_printf_common+0x3e>
 8007646:	2030      	movs	r0, #48	@ 0x30
 8007648:	18e1      	adds	r1, r4, r3
 800764a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007654:	4422      	add	r2, r4
 8007656:	3302      	adds	r3, #2
 8007658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800765c:	e7c2      	b.n	80075e4 <_printf_common+0x58>
 800765e:	2301      	movs	r3, #1
 8007660:	4622      	mov	r2, r4
 8007662:	4641      	mov	r1, r8
 8007664:	4638      	mov	r0, r7
 8007666:	47c8      	blx	r9
 8007668:	3001      	adds	r0, #1
 800766a:	d0e6      	beq.n	800763a <_printf_common+0xae>
 800766c:	3601      	adds	r6, #1
 800766e:	e7d9      	b.n	8007624 <_printf_common+0x98>

08007670 <_printf_i>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	7e0f      	ldrb	r7, [r1, #24]
 8007676:	4691      	mov	r9, r2
 8007678:	2f78      	cmp	r7, #120	@ 0x78
 800767a:	4680      	mov	r8, r0
 800767c:	460c      	mov	r4, r1
 800767e:	469a      	mov	sl, r3
 8007680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007686:	d807      	bhi.n	8007698 <_printf_i+0x28>
 8007688:	2f62      	cmp	r7, #98	@ 0x62
 800768a:	d80a      	bhi.n	80076a2 <_printf_i+0x32>
 800768c:	2f00      	cmp	r7, #0
 800768e:	f000 80d3 	beq.w	8007838 <_printf_i+0x1c8>
 8007692:	2f58      	cmp	r7, #88	@ 0x58
 8007694:	f000 80ba 	beq.w	800780c <_printf_i+0x19c>
 8007698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800769c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a0:	e03a      	b.n	8007718 <_printf_i+0xa8>
 80076a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076a6:	2b15      	cmp	r3, #21
 80076a8:	d8f6      	bhi.n	8007698 <_printf_i+0x28>
 80076aa:	a101      	add	r1, pc, #4	@ (adr r1, 80076b0 <_printf_i+0x40>)
 80076ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b0:	08007709 	.word	0x08007709
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	08007699 	.word	0x08007699
 80076bc:	08007699 	.word	0x08007699
 80076c0:	08007699 	.word	0x08007699
 80076c4:	08007699 	.word	0x08007699
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007699 	.word	0x08007699
 80076d0:	08007699 	.word	0x08007699
 80076d4:	08007699 	.word	0x08007699
 80076d8:	08007699 	.word	0x08007699
 80076dc:	0800781f 	.word	0x0800781f
 80076e0:	08007747 	.word	0x08007747
 80076e4:	080077d9 	.word	0x080077d9
 80076e8:	08007699 	.word	0x08007699
 80076ec:	08007699 	.word	0x08007699
 80076f0:	08007841 	.word	0x08007841
 80076f4:	08007699 	.word	0x08007699
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007699 	.word	0x08007699
 8007700:	08007699 	.word	0x08007699
 8007704:	080077e1 	.word	0x080077e1
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6032      	str	r2, [r6, #0]
 8007710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007718:	2301      	movs	r3, #1
 800771a:	e09e      	b.n	800785a <_printf_i+0x1ea>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	6820      	ldr	r0, [r4, #0]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	6031      	str	r1, [r6, #0]
 8007724:	0606      	lsls	r6, r0, #24
 8007726:	d501      	bpl.n	800772c <_printf_i+0xbc>
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	e003      	b.n	8007734 <_printf_i+0xc4>
 800772c:	0645      	lsls	r5, r0, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0xb8>
 8007730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007734:	2d00      	cmp	r5, #0
 8007736:	da03      	bge.n	8007740 <_printf_i+0xd0>
 8007738:	232d      	movs	r3, #45	@ 0x2d
 800773a:	426d      	negs	r5, r5
 800773c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007740:	230a      	movs	r3, #10
 8007742:	4859      	ldr	r0, [pc, #356]	@ (80078a8 <_printf_i+0x238>)
 8007744:	e011      	b.n	800776a <_printf_i+0xfa>
 8007746:	6821      	ldr	r1, [r4, #0]
 8007748:	6833      	ldr	r3, [r6, #0]
 800774a:	0608      	lsls	r0, r1, #24
 800774c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007750:	d402      	bmi.n	8007758 <_printf_i+0xe8>
 8007752:	0649      	lsls	r1, r1, #25
 8007754:	bf48      	it	mi
 8007756:	b2ad      	uxthmi	r5, r5
 8007758:	2f6f      	cmp	r7, #111	@ 0x6f
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	bf14      	ite	ne
 800775e:	230a      	movne	r3, #10
 8007760:	2308      	moveq	r3, #8
 8007762:	4851      	ldr	r0, [pc, #324]	@ (80078a8 <_printf_i+0x238>)
 8007764:	2100      	movs	r1, #0
 8007766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800776a:	6866      	ldr	r6, [r4, #4]
 800776c:	2e00      	cmp	r6, #0
 800776e:	bfa8      	it	ge
 8007770:	6821      	ldrge	r1, [r4, #0]
 8007772:	60a6      	str	r6, [r4, #8]
 8007774:	bfa4      	itt	ge
 8007776:	f021 0104 	bicge.w	r1, r1, #4
 800777a:	6021      	strge	r1, [r4, #0]
 800777c:	b90d      	cbnz	r5, 8007782 <_printf_i+0x112>
 800777e:	2e00      	cmp	r6, #0
 8007780:	d04b      	beq.n	800781a <_printf_i+0x1aa>
 8007782:	4616      	mov	r6, r2
 8007784:	fbb5 f1f3 	udiv	r1, r5, r3
 8007788:	fb03 5711 	mls	r7, r3, r1, r5
 800778c:	5dc7      	ldrb	r7, [r0, r7]
 800778e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007792:	462f      	mov	r7, r5
 8007794:	42bb      	cmp	r3, r7
 8007796:	460d      	mov	r5, r1
 8007798:	d9f4      	bls.n	8007784 <_printf_i+0x114>
 800779a:	2b08      	cmp	r3, #8
 800779c:	d10b      	bne.n	80077b6 <_printf_i+0x146>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	07df      	lsls	r7, r3, #31
 80077a2:	d508      	bpl.n	80077b6 <_printf_i+0x146>
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	6861      	ldr	r1, [r4, #4]
 80077a8:	4299      	cmp	r1, r3
 80077aa:	bfde      	ittt	le
 80077ac:	2330      	movle	r3, #48	@ 0x30
 80077ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077b6:	1b92      	subs	r2, r2, r6
 80077b8:	6122      	str	r2, [r4, #16]
 80077ba:	464b      	mov	r3, r9
 80077bc:	4621      	mov	r1, r4
 80077be:	4640      	mov	r0, r8
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	aa03      	add	r2, sp, #12
 80077c6:	f7ff fee1 	bl	800758c <_printf_common>
 80077ca:	3001      	adds	r0, #1
 80077cc:	d14a      	bne.n	8007864 <_printf_i+0x1f4>
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295
 80077d2:	b004      	add	sp, #16
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	f043 0320 	orr.w	r3, r3, #32
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	2778      	movs	r7, #120	@ 0x78
 80077e2:	4832      	ldr	r0, [pc, #200]	@ (80078ac <_printf_i+0x23c>)
 80077e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	6831      	ldr	r1, [r6, #0]
 80077ec:	061f      	lsls	r7, r3, #24
 80077ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f2:	d402      	bmi.n	80077fa <_printf_i+0x18a>
 80077f4:	065f      	lsls	r7, r3, #25
 80077f6:	bf48      	it	mi
 80077f8:	b2ad      	uxthmi	r5, r5
 80077fa:	6031      	str	r1, [r6, #0]
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	bf44      	itt	mi
 8007800:	f043 0320 	orrmi.w	r3, r3, #32
 8007804:	6023      	strmi	r3, [r4, #0]
 8007806:	b11d      	cbz	r5, 8007810 <_printf_i+0x1a0>
 8007808:	2310      	movs	r3, #16
 800780a:	e7ab      	b.n	8007764 <_printf_i+0xf4>
 800780c:	4826      	ldr	r0, [pc, #152]	@ (80078a8 <_printf_i+0x238>)
 800780e:	e7e9      	b.n	80077e4 <_printf_i+0x174>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	e7f6      	b.n	8007808 <_printf_i+0x198>
 800781a:	4616      	mov	r6, r2
 800781c:	e7bd      	b.n	800779a <_printf_i+0x12a>
 800781e:	6833      	ldr	r3, [r6, #0]
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	1d18      	adds	r0, r3, #4
 8007824:	6961      	ldr	r1, [r4, #20]
 8007826:	6030      	str	r0, [r6, #0]
 8007828:	062e      	lsls	r6, r5, #24
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	d501      	bpl.n	8007832 <_printf_i+0x1c2>
 800782e:	6019      	str	r1, [r3, #0]
 8007830:	e002      	b.n	8007838 <_printf_i+0x1c8>
 8007832:	0668      	lsls	r0, r5, #25
 8007834:	d5fb      	bpl.n	800782e <_printf_i+0x1be>
 8007836:	8019      	strh	r1, [r3, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	4616      	mov	r6, r2
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	e7bc      	b.n	80077ba <_printf_i+0x14a>
 8007840:	6833      	ldr	r3, [r6, #0]
 8007842:	2100      	movs	r1, #0
 8007844:	1d1a      	adds	r2, r3, #4
 8007846:	6032      	str	r2, [r6, #0]
 8007848:	681e      	ldr	r6, [r3, #0]
 800784a:	6862      	ldr	r2, [r4, #4]
 800784c:	4630      	mov	r0, r6
 800784e:	f000 f859 	bl	8007904 <memchr>
 8007852:	b108      	cbz	r0, 8007858 <_printf_i+0x1e8>
 8007854:	1b80      	subs	r0, r0, r6
 8007856:	6060      	str	r0, [r4, #4]
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	6123      	str	r3, [r4, #16]
 800785c:	2300      	movs	r3, #0
 800785e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007862:	e7aa      	b.n	80077ba <_printf_i+0x14a>
 8007864:	4632      	mov	r2, r6
 8007866:	4649      	mov	r1, r9
 8007868:	4640      	mov	r0, r8
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	47d0      	blx	sl
 800786e:	3001      	adds	r0, #1
 8007870:	d0ad      	beq.n	80077ce <_printf_i+0x15e>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	079b      	lsls	r3, r3, #30
 8007876:	d413      	bmi.n	80078a0 <_printf_i+0x230>
 8007878:	68e0      	ldr	r0, [r4, #12]
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	4298      	cmp	r0, r3
 800787e:	bfb8      	it	lt
 8007880:	4618      	movlt	r0, r3
 8007882:	e7a6      	b.n	80077d2 <_printf_i+0x162>
 8007884:	2301      	movs	r3, #1
 8007886:	4632      	mov	r2, r6
 8007888:	4649      	mov	r1, r9
 800788a:	4640      	mov	r0, r8
 800788c:	47d0      	blx	sl
 800788e:	3001      	adds	r0, #1
 8007890:	d09d      	beq.n	80077ce <_printf_i+0x15e>
 8007892:	3501      	adds	r5, #1
 8007894:	68e3      	ldr	r3, [r4, #12]
 8007896:	9903      	ldr	r1, [sp, #12]
 8007898:	1a5b      	subs	r3, r3, r1
 800789a:	42ab      	cmp	r3, r5
 800789c:	dcf2      	bgt.n	8007884 <_printf_i+0x214>
 800789e:	e7eb      	b.n	8007878 <_printf_i+0x208>
 80078a0:	2500      	movs	r5, #0
 80078a2:	f104 0619 	add.w	r6, r4, #25
 80078a6:	e7f5      	b.n	8007894 <_printf_i+0x224>
 80078a8:	0800869f 	.word	0x0800869f
 80078ac:	080086b0 	.word	0x080086b0

080078b0 <memmove>:
 80078b0:	4288      	cmp	r0, r1
 80078b2:	b510      	push	{r4, lr}
 80078b4:	eb01 0402 	add.w	r4, r1, r2
 80078b8:	d902      	bls.n	80078c0 <memmove+0x10>
 80078ba:	4284      	cmp	r4, r0
 80078bc:	4623      	mov	r3, r4
 80078be:	d807      	bhi.n	80078d0 <memmove+0x20>
 80078c0:	1e43      	subs	r3, r0, #1
 80078c2:	42a1      	cmp	r1, r4
 80078c4:	d008      	beq.n	80078d8 <memmove+0x28>
 80078c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ce:	e7f8      	b.n	80078c2 <memmove+0x12>
 80078d0:	4601      	mov	r1, r0
 80078d2:	4402      	add	r2, r0
 80078d4:	428a      	cmp	r2, r1
 80078d6:	d100      	bne.n	80078da <memmove+0x2a>
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078e2:	e7f7      	b.n	80078d4 <memmove+0x24>

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	2300      	movs	r3, #0
 80078e8:	4d05      	ldr	r5, [pc, #20]	@ (8007900 <_sbrk_r+0x1c>)
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7fa fb38 	bl	8001f64 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000ae8 	.word	0x20000ae8

08007904 <memchr>:
 8007904:	4603      	mov	r3, r0
 8007906:	b510      	push	{r4, lr}
 8007908:	b2c9      	uxtb	r1, r1
 800790a:	4402      	add	r2, r0
 800790c:	4293      	cmp	r3, r2
 800790e:	4618      	mov	r0, r3
 8007910:	d101      	bne.n	8007916 <memchr+0x12>
 8007912:	2000      	movs	r0, #0
 8007914:	e003      	b.n	800791e <memchr+0x1a>
 8007916:	7804      	ldrb	r4, [r0, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	428c      	cmp	r4, r1
 800791c:	d1f6      	bne.n	800790c <memchr+0x8>
 800791e:	bd10      	pop	{r4, pc}

08007920 <memcpy>:
 8007920:	440a      	add	r2, r1
 8007922:	4291      	cmp	r1, r2
 8007924:	f100 33ff 	add.w	r3, r0, #4294967295
 8007928:	d100      	bne.n	800792c <memcpy+0xc>
 800792a:	4770      	bx	lr
 800792c:	b510      	push	{r4, lr}
 800792e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007932:	4291      	cmp	r1, r2
 8007934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007938:	d1f9      	bne.n	800792e <memcpy+0xe>
 800793a:	bd10      	pop	{r4, pc}

0800793c <_realloc_r>:
 800793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	4680      	mov	r8, r0
 8007942:	4615      	mov	r5, r2
 8007944:	460c      	mov	r4, r1
 8007946:	b921      	cbnz	r1, 8007952 <_realloc_r+0x16>
 8007948:	4611      	mov	r1, r2
 800794a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	f7ff bc39 	b.w	80071c4 <_malloc_r>
 8007952:	b92a      	cbnz	r2, 8007960 <_realloc_r+0x24>
 8007954:	f7ff fbcc 	bl	80070f0 <_free_r>
 8007958:	2400      	movs	r4, #0
 800795a:	4620      	mov	r0, r4
 800795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007960:	f000 f81a 	bl	8007998 <_malloc_usable_size_r>
 8007964:	4285      	cmp	r5, r0
 8007966:	4606      	mov	r6, r0
 8007968:	d802      	bhi.n	8007970 <_realloc_r+0x34>
 800796a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800796e:	d8f4      	bhi.n	800795a <_realloc_r+0x1e>
 8007970:	4629      	mov	r1, r5
 8007972:	4640      	mov	r0, r8
 8007974:	f7ff fc26 	bl	80071c4 <_malloc_r>
 8007978:	4607      	mov	r7, r0
 800797a:	2800      	cmp	r0, #0
 800797c:	d0ec      	beq.n	8007958 <_realloc_r+0x1c>
 800797e:	42b5      	cmp	r5, r6
 8007980:	462a      	mov	r2, r5
 8007982:	4621      	mov	r1, r4
 8007984:	bf28      	it	cs
 8007986:	4632      	movcs	r2, r6
 8007988:	f7ff ffca 	bl	8007920 <memcpy>
 800798c:	4621      	mov	r1, r4
 800798e:	4640      	mov	r0, r8
 8007990:	f7ff fbae 	bl	80070f0 <_free_r>
 8007994:	463c      	mov	r4, r7
 8007996:	e7e0      	b.n	800795a <_realloc_r+0x1e>

08007998 <_malloc_usable_size_r>:
 8007998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799c:	1f18      	subs	r0, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfbc      	itt	lt
 80079a2:	580b      	ldrlt	r3, [r1, r0]
 80079a4:	18c0      	addlt	r0, r0, r3
 80079a6:	4770      	bx	lr

080079a8 <_init>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr

080079b4 <_fini>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr
