
modbus_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  0800a9f0  0800a9f0  0000b9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ec  0800b7ec  0000d2a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7ec  0800b7ec  0000c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f4  0800b7f4  0000d2a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a4  20000000  0800b7fc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f4  200002a4  0800baa0  0000d2a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002498  0800baa0  0000d498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d2a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf26  00000000  00000000  0000d2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e81  00000000  00000000  000291f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001192  00000000  00000000  0002f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b735  00000000  00000000  000308ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff48  00000000  00000000  0004bfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bb9  00000000  00000000  0006bf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdb00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  000fdb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00103a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a4 	.word	0x200002a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9d8 	.word	0x0800a9d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a8 	.word	0x200002a8
 800014c:	0800a9d8 	.word	0x0800a9d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_at_response_error_check>:
char tx_buff[AT_TX_BUFF_SIZE] = "";
uint16_t RxLen;



at_state_t _at_response_error_check(char* rx_buff){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if(find_substr(rx_buff, "ERROR")){
 8000168:	4906      	ldr	r1, [pc, #24]	@ (8000184 <_at_response_error_check+0x24>)
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f000 f80c 	bl	8000188 <find_substr>
 8000170:	4603      	mov	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	d001      	beq.n	800017a <_at_response_error_check+0x1a>
		return AT_STATE_ERROR;
 8000176:	2300      	movs	r3, #0
 8000178:	e000      	b.n	800017c <_at_response_error_check+0x1c>
	}
	return AT_STATE_OK;
 800017a:	2301      	movs	r3, #1
}
 800017c:	4618      	mov	r0, r3
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	0800a9f0 	.word	0x0800a9f0

08000188 <find_substr>:


bool find_substr(char* str, char* substr){
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	6039      	str	r1, [r7, #0]
	char* pch = strstr(str, substr);
 8000192:	6839      	ldr	r1, [r7, #0]
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	f009 ff78 	bl	800a08a <strstr>
 800019a:	60f8      	str	r0, [r7, #12]
		if(pch != NULL){
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <find_substr+0x1e>
			return true;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e000      	b.n	80001a8 <find_substr+0x20>
		}
		return false;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <flush_buff>:


void flush_buff(char* buffer){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	memset(buffer,0,strlen(buffer));
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f7ff ffc9 	bl	8000150 <strlen>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	2100      	movs	r1, #0
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f009 ff49 	bl	800a05c <memset>
	strcpy(buffer, "");
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <at_read>:



at_state_t at_read(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af02      	add	r7, sp, #8
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
 80001e4:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 80001e6:	68b8      	ldr	r0, [r7, #8]
 80001e8:	f7ff ffe2 	bl	80001b0 <flush_buff>
	strcpy(tx_buff, "AT+");
 80001ec:	4b19      	ldr	r3, [pc, #100]	@ (8000254 <at_read+0x7c>)
 80001ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000258 <at_read+0x80>)
 80001f0:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80001f2:	6879      	ldr	r1, [r7, #4]
 80001f4:	4817      	ldr	r0, [pc, #92]	@ (8000254 <at_read+0x7c>)
 80001f6:	f009 ff39 	bl	800a06c <strcat>
	strcat(tx_buff, "?\r\n");
 80001fa:	4816      	ldr	r0, [pc, #88]	@ (8000254 <at_read+0x7c>)
 80001fc:	f7ff ffa8 	bl	8000150 <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	461a      	mov	r2, r3
 8000204:	4b13      	ldr	r3, [pc, #76]	@ (8000254 <at_read+0x7c>)
 8000206:	4413      	add	r3, r2
 8000208:	4a14      	ldr	r2, [pc, #80]	@ (800025c <at_read+0x84>)
 800020a:	6810      	ldr	r0, [r2, #0]
 800020c:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 800020e:	4811      	ldr	r0, [pc, #68]	@ (8000254 <at_read+0x7c>)
 8000210:	f7ff ff9e 	bl	8000150 <strlen>
 8000214:	4603      	mov	r3, r0
 8000216:	b2db      	uxtb	r3, r3
 8000218:	3301      	adds	r3, #1
 800021a:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 800021c:	7dfb      	ldrb	r3, [r7, #23]
 800021e:	b29b      	uxth	r3, r3
 8000220:	461a      	mov	r2, r3
 8000222:	490c      	ldr	r1, [pc, #48]	@ (8000254 <at_read+0x7c>)
 8000224:	68f8      	ldr	r0, [r7, #12]
 8000226:	f005 ffb4 	bl	8006192 <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 800022a:	887b      	ldrh	r3, [r7, #2]
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <at_read+0x88>)
 8000230:	2232      	movs	r2, #50	@ 0x32
 8000232:	68b9      	ldr	r1, [r7, #8]
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f005 ffe1 	bl	80061fc <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 800023a:	68b8      	ldr	r0, [r7, #8]
 800023c:	f7ff ff90 	bl	8000160 <_at_response_error_check>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <at_read+0x72>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000246:	2301      	movs	r3, #1
 8000248:	e000      	b.n	800024c <at_read+0x74>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 800024a:	2300      	movs	r3, #0
}
 800024c:	4618      	mov	r0, r3
 800024e:	3718      	adds	r7, #24
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200002c0 	.word	0x200002c0
 8000258:	002b5441 	.word	0x002b5441
 800025c:	0800a9f8 	.word	0x0800a9f8
 8000260:	200002f2 	.word	0x200002f2

08000264 <at_write>:



at_state_t at_write(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	@ 0x28
 8000268:	af02      	add	r7, sp, #8
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 8000272:	68b8      	ldr	r0, [r7, #8]
 8000274:	f7ff ff9c 	bl	80001b0 <flush_buff>
	strcpy(tx_buff, "AT+");
 8000278:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <at_write+0xd4>)
 800027a:	4a30      	ldr	r2, [pc, #192]	@ (800033c <at_write+0xd8>)
 800027c:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	482d      	ldr	r0, [pc, #180]	@ (8000338 <at_write+0xd4>)
 8000282:	f009 fef3 	bl	800a06c <strcat>
	strcat(tx_buff, "=");
 8000286:	482c      	ldr	r0, [pc, #176]	@ (8000338 <at_write+0xd4>)
 8000288:	f7ff ff62 	bl	8000150 <strlen>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b29      	ldr	r3, [pc, #164]	@ (8000338 <at_write+0xd4>)
 8000292:	4413      	add	r3, r2
 8000294:	492a      	ldr	r1, [pc, #168]	@ (8000340 <at_write+0xdc>)
 8000296:	461a      	mov	r2, r3
 8000298:	460b      	mov	r3, r1
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 800029e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80002a2:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80002a4:	2300      	movs	r3, #0
 80002a6:	61fb      	str	r3, [r7, #28]
 80002a8:	e00a      	b.n	80002c0 <at_write+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	1d1a      	adds	r2, r3, #4
 80002ae:	617a      	str	r2, [r7, #20]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4820      	ldr	r0, [pc, #128]	@ (8000338 <at_write+0xd4>)
 80002b6:	f009 fed9 	bl	800a06c <strcat>
	for(int i=0;i<argc;i++){
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	3301      	adds	r3, #1
 80002be:	61fb      	str	r3, [r7, #28]
 80002c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80002c4:	69fa      	ldr	r2, [r7, #28]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	dbef      	blt.n	80002aa <at_write+0x46>
	}
	strcat(tx_buff, "\r\n");
 80002ca:	481b      	ldr	r0, [pc, #108]	@ (8000338 <at_write+0xd4>)
 80002cc:	f7ff ff40 	bl	8000150 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <at_write+0xd4>)
 80002d6:	4413      	add	r3, r2
 80002d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <at_write+0xe0>)
 80002da:	8811      	ldrh	r1, [r2, #0]
 80002dc:	7892      	ldrb	r2, [r2, #2]
 80002de:	8019      	strh	r1, [r3, #0]
 80002e0:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 80002e2:	4815      	ldr	r0, [pc, #84]	@ (8000338 <at_write+0xd4>)
 80002e4:	f7ff ff34 	bl	8000150 <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	3301      	adds	r3, #1
 80002ee:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80002f0:	7efb      	ldrb	r3, [r7, #27]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	4910      	ldr	r1, [pc, #64]	@ (8000338 <at_write+0xd4>)
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	f005 ff4a 	bl	8006192 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <at_write+0xe4>)
 8000304:	2232      	movs	r2, #50	@ 0x32
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	68f8      	ldr	r0, [r7, #12]
 800030a:	f005 ff77 	bl	80061fc <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f7ff ff26 	bl	8000160 <_at_response_error_check>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <at_write+0xc8>
		if(find_substr(rx_buff, AT_OK)){
 800031a:	490c      	ldr	r1, [pc, #48]	@ (800034c <at_write+0xe8>)
 800031c:	68b8      	ldr	r0, [r7, #8]
 800031e:	f7ff ff33 	bl	8000188 <find_substr>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <at_write+0xc8>
			return AT_STATE_OK;
 8000328:	2301      	movs	r3, #1
 800032a:	e000      	b.n	800032e <at_write+0xca>
	}
	else{

	}

	return AT_STATE_ERROR;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200002c0 	.word	0x200002c0
 800033c:	002b5441 	.word	0x002b5441
 8000340:	0800a9fc 	.word	0x0800a9fc
 8000344:	0800aa00 	.word	0x0800aa00
 8000348:	200002f2 	.word	0x200002f2
 800034c:	0800aa04 	.word	0x0800aa04

08000350 <at_execute>:



at_state_t at_execute(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af02      	add	r7, sp, #8
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800035e:	68b8      	ldr	r0, [r7, #8]
 8000360:	f7ff ff26 	bl	80001b0 <flush_buff>
	if(strlen(cmd) > 0){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <at_execute+0x24>
		strcpy(tx_buff, "AT+");
 800036c:	4b22      	ldr	r3, [pc, #136]	@ (80003f8 <at_execute+0xa8>)
 800036e:	4a23      	ldr	r2, [pc, #140]	@ (80003fc <at_execute+0xac>)
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	e007      	b.n	8000384 <at_execute+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 8000374:	4b20      	ldr	r3, [pc, #128]	@ (80003f8 <at_execute+0xa8>)
 8000376:	4a22      	ldr	r2, [pc, #136]	@ (8000400 <at_execute+0xb0>)
 8000378:	6812      	ldr	r2, [r2, #0]
 800037a:	4611      	mov	r1, r2
 800037c:	8019      	strh	r1, [r3, #0]
 800037e:	3302      	adds	r3, #2
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	481c      	ldr	r0, [pc, #112]	@ (80003f8 <at_execute+0xa8>)
 8000388:	f009 fe70 	bl	800a06c <strcat>
	strcat(tx_buff, "\r\n");
 800038c:	481a      	ldr	r0, [pc, #104]	@ (80003f8 <at_execute+0xa8>)
 800038e:	f7ff fedf 	bl	8000150 <strlen>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <at_execute+0xa8>)
 8000398:	4413      	add	r3, r2
 800039a:	4a1a      	ldr	r2, [pc, #104]	@ (8000404 <at_execute+0xb4>)
 800039c:	8811      	ldrh	r1, [r2, #0]
 800039e:	7892      	ldrb	r2, [r2, #2]
 80003a0:	8019      	strh	r1, [r3, #0]
 80003a2:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80003a4:	4814      	ldr	r0, [pc, #80]	@ (80003f8 <at_execute+0xa8>)
 80003a6:	f7ff fed3 	bl	8000150 <strlen>
 80003aa:	4603      	mov	r3, r0
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	3301      	adds	r3, #1
 80003b0:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	490f      	ldr	r1, [pc, #60]	@ (80003f8 <at_execute+0xa8>)
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	f005 fee9 	bl	8006192 <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80003c0:	887b      	ldrh	r3, [r7, #2]
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <at_execute+0xb8>)
 80003c6:	2232      	movs	r2, #50	@ 0x32
 80003c8:	68b9      	ldr	r1, [r7, #8]
 80003ca:	68f8      	ldr	r0, [r7, #12]
 80003cc:	f005 ff16 	bl	80061fc <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 80003d0:	68b8      	ldr	r0, [r7, #8]
 80003d2:	f7ff fec5 	bl	8000160 <_at_response_error_check>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <at_execute+0x9e>
		if(find_substr(rx_buff, AT_OK)){
 80003dc:	490b      	ldr	r1, [pc, #44]	@ (800040c <at_execute+0xbc>)
 80003de:	68b8      	ldr	r0, [r7, #8]
 80003e0:	f7ff fed2 	bl	8000188 <find_substr>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <at_execute+0x9e>
			return AT_STATE_OK;
 80003ea:	2301      	movs	r3, #1
 80003ec:	e000      	b.n	80003f0 <at_execute+0xa0>
		}
	}
	return AT_STATE_ERROR;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200002c0 	.word	0x200002c0
 80003fc:	002b5441 	.word	0x002b5441
 8000400:	0800aa08 	.word	0x0800aa08
 8000404:	0800aa00 	.word	0x0800aa00
 8000408:	200002f2 	.word	0x200002f2
 800040c:	0800aa04 	.word	0x0800aa04

08000410 <at_read_blocking>:





at_state_t at_read_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800041e:	68b8      	ldr	r0, [r7, #8]
 8000420:	f7ff fec6 	bl	80001b0 <flush_buff>
	strcpy(tx_buff, "AT+");
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <at_read_blocking+0x78>)
 8000426:	4a19      	ldr	r2, [pc, #100]	@ (800048c <at_read_blocking+0x7c>)
 8000428:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	4816      	ldr	r0, [pc, #88]	@ (8000488 <at_read_blocking+0x78>)
 800042e:	f009 fe1d 	bl	800a06c <strcat>
	strcat(tx_buff, "?\r\n");
 8000432:	4815      	ldr	r0, [pc, #84]	@ (8000488 <at_read_blocking+0x78>)
 8000434:	f7ff fe8c 	bl	8000150 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <at_read_blocking+0x78>)
 800043e:	4413      	add	r3, r2
 8000440:	4a13      	ldr	r2, [pc, #76]	@ (8000490 <at_read_blocking+0x80>)
 8000442:	6810      	ldr	r0, [r2, #0]
 8000444:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 8000446:	4810      	ldr	r0, [pc, #64]	@ (8000488 <at_read_blocking+0x78>)
 8000448:	f7ff fe82 	bl	8000150 <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b2db      	uxtb	r3, r3
 8000450:	3301      	adds	r3, #1
 8000452:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	b29b      	uxth	r3, r3
 8000458:	461a      	mov	r2, r3
 800045a:	490b      	ldr	r1, [pc, #44]	@ (8000488 <at_read_blocking+0x78>)
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f005 fe98 	bl	8006192 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	2232      	movs	r2, #50	@ 0x32
 8000466:	68b9      	ldr	r1, [r7, #8]
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f005 fe00 	bl	800606e <HAL_UART_Receive>
//	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
	if(_at_response_error_check(rx_buff)){
 800046e:	68b8      	ldr	r0, [r7, #8]
 8000470:	f7ff fe76 	bl	8000160 <_at_response_error_check>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <at_read_blocking+0x6e>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 800047a:	2301      	movs	r3, #1
 800047c:	e000      	b.n	8000480 <at_read_blocking+0x70>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 800047e:	2300      	movs	r3, #0

}
 8000480:	4618      	mov	r0, r3
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200002c0 	.word	0x200002c0
 800048c:	002b5441 	.word	0x002b5441
 8000490:	0800a9f8 	.word	0x0800a9f8

08000494 <at_write_blocking>:





at_state_t at_write_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 80004a2:	68b8      	ldr	r0, [r7, #8]
 80004a4:	f7ff fe84 	bl	80001b0 <flush_buff>
	strcpy(tx_buff, "AT+");
 80004a8:	4b32      	ldr	r3, [pc, #200]	@ (8000574 <at_write_blocking+0xe0>)
 80004aa:	4a33      	ldr	r2, [pc, #204]	@ (8000578 <at_write_blocking+0xe4>)
 80004ac:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	4830      	ldr	r0, [pc, #192]	@ (8000574 <at_write_blocking+0xe0>)
 80004b2:	f009 fddb 	bl	800a06c <strcat>
	strcat(tx_buff, "=");
 80004b6:	482f      	ldr	r0, [pc, #188]	@ (8000574 <at_write_blocking+0xe0>)
 80004b8:	f7ff fe4a 	bl	8000150 <strlen>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000574 <at_write_blocking+0xe0>)
 80004c2:	4413      	add	r3, r2
 80004c4:	492d      	ldr	r1, [pc, #180]	@ (800057c <at_write_blocking+0xe8>)
 80004c6:	461a      	mov	r2, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 80004ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004d2:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
 80004d8:	e00a      	b.n	80004f0 <at_write_blocking+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	1d1a      	adds	r2, r3, #4
 80004de:	617a      	str	r2, [r7, #20]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	4823      	ldr	r0, [pc, #140]	@ (8000574 <at_write_blocking+0xe0>)
 80004e6:	f009 fdc1 	bl	800a06c <strcat>
	for(int i=0;i<argc;i++){
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3301      	adds	r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80004f4:	69fa      	ldr	r2, [r7, #28]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbef      	blt.n	80004da <at_write_blocking+0x46>
	}
	strcat(tx_buff, "\r\n");
 80004fa:	481e      	ldr	r0, [pc, #120]	@ (8000574 <at_write_blocking+0xe0>)
 80004fc:	f7ff fe28 	bl	8000150 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <at_write_blocking+0xe0>)
 8000506:	4413      	add	r3, r2
 8000508:	4a1d      	ldr	r2, [pc, #116]	@ (8000580 <at_write_blocking+0xec>)
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	7892      	ldrb	r2, [r2, #2]
 800050e:	8019      	strh	r1, [r3, #0]
 8000510:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 8000512:	4818      	ldr	r0, [pc, #96]	@ (8000574 <at_write_blocking+0xe0>)
 8000514:	f7ff fe1c 	bl	8000150 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	3301      	adds	r3, #1
 800051e:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000520:	7efb      	ldrb	r3, [r7, #27]
 8000522:	b29b      	uxth	r3, r3
 8000524:	461a      	mov	r2, r3
 8000526:	4913      	ldr	r1, [pc, #76]	@ (8000574 <at_write_blocking+0xe0>)
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f005 fe32 	bl	8006192 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	2232      	movs	r2, #50	@ 0x32
 8000532:	68b9      	ldr	r1, [r7, #8]
 8000534:	68f8      	ldr	r0, [r7, #12]
 8000536:	f005 fd9a 	bl	800606e <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 800053a:	68b8      	ldr	r0, [r7, #8]
 800053c:	f7ff fe10 	bl	8000160 <_at_response_error_check>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d011      	beq.n	800056a <at_write_blocking+0xd6>
		if(find_substr(rx_buff, AT_OK)){
 8000546:	490f      	ldr	r1, [pc, #60]	@ (8000584 <at_write_blocking+0xf0>)
 8000548:	68b8      	ldr	r0, [r7, #8]
 800054a:	f7ff fe1d 	bl	8000188 <find_substr>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <at_write_blocking+0xc4>
			return AT_STATE_OK;
 8000554:	2301      	movs	r3, #1
 8000556:	e009      	b.n	800056c <at_write_blocking+0xd8>
		}
		if(find_substr(rx_buff, ">")){
 8000558:	490b      	ldr	r1, [pc, #44]	@ (8000588 <at_write_blocking+0xf4>)
 800055a:	68b8      	ldr	r0, [r7, #8]
 800055c:	f7ff fe14 	bl	8000188 <find_substr>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <at_write_blocking+0xd6>
			return AT_STATE_ENTER_INPUT;
 8000566:	2302      	movs	r3, #2
 8000568:	e000      	b.n	800056c <at_write_blocking+0xd8>
	}
	else{

	}

	return AT_STATE_ERROR;
 800056a:	2300      	movs	r3, #0

}
 800056c:	4618      	mov	r0, r3
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200002c0 	.word	0x200002c0
 8000578:	002b5441 	.word	0x002b5441
 800057c:	0800a9fc 	.word	0x0800a9fc
 8000580:	0800aa00 	.word	0x0800aa00
 8000584:	0800aa04 	.word	0x0800aa04
 8000588:	0800aa0c 	.word	0x0800aa0c

0800058c <at_execute_blocking>:





at_state_t at_execute_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800059a:	68b8      	ldr	r0, [r7, #8]
 800059c:	f7ff fe08 	bl	80001b0 <flush_buff>
	if(strlen(cmd) > 0){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d003      	beq.n	80005b0 <at_execute_blocking+0x24>
		strcpy(tx_buff, "AT+");
 80005a8:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <at_execute_blocking+0xa4>)
 80005aa:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <at_execute_blocking+0xa8>)
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e007      	b.n	80005c0 <at_execute_blocking+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <at_execute_blocking+0xa4>)
 80005b2:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <at_execute_blocking+0xac>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	4611      	mov	r1, r2
 80005b8:	8019      	strh	r1, [r3, #0]
 80005ba:	3302      	adds	r3, #2
 80005bc:	0c12      	lsrs	r2, r2, #16
 80005be:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	481b      	ldr	r0, [pc, #108]	@ (8000630 <at_execute_blocking+0xa4>)
 80005c4:	f009 fd52 	bl	800a06c <strcat>
	strcat(tx_buff, "\r\n");
 80005c8:	4819      	ldr	r0, [pc, #100]	@ (8000630 <at_execute_blocking+0xa4>)
 80005ca:	f7ff fdc1 	bl	8000150 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <at_execute_blocking+0xa4>)
 80005d4:	4413      	add	r3, r2
 80005d6:	4a19      	ldr	r2, [pc, #100]	@ (800063c <at_execute_blocking+0xb0>)
 80005d8:	8811      	ldrh	r1, [r2, #0]
 80005da:	7892      	ldrb	r2, [r2, #2]
 80005dc:	8019      	strh	r1, [r3, #0]
 80005de:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <at_execute_blocking+0xa4>)
 80005e2:	f7ff fdb5 	bl	8000150 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3301      	adds	r3, #1
 80005ec:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	490e      	ldr	r1, [pc, #56]	@ (8000630 <at_execute_blocking+0xa4>)
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f005 fdcb 	bl	8006192 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	2232      	movs	r2, #50	@ 0x32
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f005 fd33 	bl	800606e <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000608:	68b8      	ldr	r0, [r7, #8]
 800060a:	f7ff fda9 	bl	8000160 <_at_response_error_check>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <at_execute_blocking+0x9a>
		if(find_substr(rx_buff, AT_OK)){
 8000614:	490a      	ldr	r1, [pc, #40]	@ (8000640 <at_execute_blocking+0xb4>)
 8000616:	68b8      	ldr	r0, [r7, #8]
 8000618:	f7ff fdb6 	bl	8000188 <find_substr>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <at_execute_blocking+0x9a>
			return AT_STATE_OK;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <at_execute_blocking+0x9c>
		}
	}
	return AT_STATE_ERROR;
 8000626:	2300      	movs	r3, #0

}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200002c0 	.word	0x200002c0
 8000634:	002b5441 	.word	0x002b5441
 8000638:	0800aa08 	.word	0x0800aa08
 800063c:	0800aa00 	.word	0x0800aa00
 8000640:	0800aa04 	.word	0x0800aa04

08000644 <CRC16>:


#include "crc16.h"

uint16_t CRC16(uint8_t *puchMsg, unsigned short usDataLen ) /* quantity of bytes in message */
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
	uint8_t uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	@ 0xff
 8000652:	73fb      	strb	r3, [r7, #15]
	uint8_t uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000654:	23ff      	movs	r3, #255	@ 0xff
 8000656:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--){
 8000658:	e013      	b.n	8000682 <CRC16+0x3e>
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	4053      	eors	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <CRC16+0x64>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4413      	add	r3, r2
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	4053      	eors	r3, r2
 8000676:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <CRC16+0x68>)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--){
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	807a      	strh	r2, [r7, #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1e6      	bne.n	800065a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	b21b      	sxth	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b21b      	sxth	r3, r3
 800069a:	b29b      	uxth	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000100 	.word	0x20000100

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2105      	movs	r1, #5
 80006d2:	2010      	movs	r0, #16
 80006d4:	f002 f8ba 	bl	800284c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d8:	2010      	movs	r0, #16
 80006da:	f002 f8e3 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <MX_FREERTOS_Init+0x18>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_FREERTOS_Init+0x1c>)
 80006f6:	f006 fe53 	bl	80073a0 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <MX_FREERTOS_Init+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	0800b730 	.word	0x0800b730
 8000708:	08000711 	.word	0x08000711
 800070c:	200002f4 	.word	0x200002f4

08000710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f006 feeb 	bl	80074f4 <osDelay>
 800071e:	e7fb      	b.n	8000718 <StartDefaultTask+0x8>

08000720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_GPIO_Init+0xbc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2102      	movs	r1, #2
 8000798:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <MX_GPIO_Init+0xc0>)
 800079a:	f002 fe6b 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <MX_GPIO_Init+0xc0>)
 80007b6:	f002 fbef 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0xc4>)
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_GPIO_Init+0xc8>)
 80007d0:	f002 fbe2 	bl	8002f98 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	10210000 	.word	0x10210000
 80007e8:	40010c00 	.word	0x40010c00

080007ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f002 fe67 	bl	80034fc <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fb70 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200002f8 	.word	0x200002f8
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a15      	ldr	r2, [pc, #84]	@ (80008b8 <HAL_I2C_MspInit+0x70>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d123      	bne.n	80008b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000880:	23c0      	movs	r3, #192	@ 0xc0
 8000882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000884:	2312      	movs	r3, #18
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <HAL_I2C_MspInit+0x78>)
 8000894:	f002 fb80 	bl	8002f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 800089e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a2:	61d3      	str	r3, [r2, #28]
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <HAL_I2C_MspInit+0x74>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	rtc_set_alarm_seconds_it(hrtc, REPEAT_DELAY);
 80008cc:	210a      	movs	r1, #10
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 ff56 	bl	8001780 <rtc_set_alarm_seconds_it>
//	repeative_task();
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);

}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008ec:	d109      	bne.n	8000902 <HAL_GPIO_EXTI_Callback+0x26>
		if(sim_reboot(&sim)){
 80008ee:	4807      	ldr	r0, [pc, #28]	@ (800090c <HAL_GPIO_EXTI_Callback+0x30>)
 80008f0:	f001 f816 	bl	8001920 <sim_reboot>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_EXTI_Callback+0x26>
			oled_printl(&oled, "sim reboot");
 80008fa:	4905      	ldr	r1, [pc, #20]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x34>)
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x38>)
 80008fe:	f000 fe49 	bl	8001594 <oled_printl>
		}
	}

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000354 	.word	0x20000354
 8000910:	0800aa70 	.word	0x0800aa70
 8000914:	20000368 	.word	0x20000368

08000918 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_UART_TxCpltCallback+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d103      	bne.n	8000936 <HAL_UART_TxCpltCallback+0x1e>
		oled_printl(&oled, "modbus req sent");
 800092e:	4905      	ldr	r1, [pc, #20]	@ (8000944 <HAL_UART_TxCpltCallback+0x2c>)
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <HAL_UART_TxCpltCallback+0x30>)
 8000932:	f000 fe2f 	bl	8001594 <oled_printl>
	}

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000020c 	.word	0x2000020c
 8000944:	0800aa7c 	.word	0x0800aa7c
 8000948:	20000368 	.word	0x20000368

0800094c <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){

	}
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <HAL_UARTEx_RxEventCallback>:





void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
	oled_printl(&oled, "rx event");
 800096c:	4940      	ldr	r1, [pc, #256]	@ (8000a70 <HAL_UARTEx_RxEventCallback+0x110>)
 800096e:	4841      	ldr	r0, [pc, #260]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 8000970:	f000 fe10 	bl	8001594 <oled_printl>
	if(huart->Instance == PHUART_MODBUS->Instance){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <HAL_UARTEx_RxEventCallback+0x118>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	d171      	bne.n	8000a66 <HAL_UARTEx_RxEventCallback+0x106>
		oled_printl(&oled, "modbus response");
 8000982:	493e      	ldr	r1, [pc, #248]	@ (8000a7c <HAL_UARTEx_RxEventCallback+0x11c>)
 8000984:	483b      	ldr	r0, [pc, #236]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 8000986:	f000 fe05 	bl	8001594 <oled_printl>
		MODBUS_MASTER_res normal_res = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
		MODBUS_MASTER_exception exception = {0};
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	809a      	strh	r2, [r3, #4]

		if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_OK){
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	f107 0210 	add.w	r2, r7, #16
 80009a8:	2139      	movs	r1, #57	@ 0x39
 80009aa:	4835      	ldr	r0, [pc, #212]	@ (8000a80 <HAL_UARTEx_RxEventCallback+0x120>)
 80009ac:	f000 fb3a 	bl	8001024 <MODBUS_MASTER_response_handler>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d13d      	bne.n	8000a32 <HAL_UARTEx_RxEventCallback+0xd2>
			uint8_t* register_data = normal_res.register_data;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	61fb      	str	r3, [r7, #28]
			if(!register_data){
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <HAL_UARTEx_RxEventCallback+0x6a>
				oled_printl(&oled, "register NULL");
 80009c0:	4930      	ldr	r1, [pc, #192]	@ (8000a84 <HAL_UARTEx_RxEventCallback+0x124>)
 80009c2:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 80009c4:	f000 fde6 	bl	8001594 <oled_printl>


	}


}
 80009c8:	e04d      	b.n	8000a66 <HAL_UARTEx_RxEventCallback+0x106>
				if(normal_res.function_code == 1){
 80009ca:	7c7b      	ldrb	r3, [r7, #17]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d103      	bne.n	80009d8 <HAL_UARTEx_RxEventCallback+0x78>
					coil_ready_to_send = true;
 80009d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <HAL_UARTEx_RxEventCallback+0x128>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e013      	b.n	8000a00 <HAL_UARTEx_RxEventCallback+0xa0>
				else if(normal_res.function_code == 2){
 80009d8:	7c7b      	ldrb	r3, [r7, #17]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d103      	bne.n	80009e6 <HAL_UARTEx_RxEventCallback+0x86>
					discrete_in_ready_to_send = true;
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <HAL_UARTEx_RxEventCallback+0x12c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e00c      	b.n	8000a00 <HAL_UARTEx_RxEventCallback+0xa0>
				else if(normal_res.function_code == 3){
 80009e6:	7c7b      	ldrb	r3, [r7, #17]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d103      	bne.n	80009f4 <HAL_UARTEx_RxEventCallback+0x94>
					holding_reg_ready_to_send = true;
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <HAL_UARTEx_RxEventCallback+0x130>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e005      	b.n	8000a00 <HAL_UARTEx_RxEventCallback+0xa0>
				else if(normal_res.function_code == 4){
 80009f4:	7c7b      	ldrb	r3, [r7, #17]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d102      	bne.n	8000a00 <HAL_UARTEx_RxEventCallback+0xa0>
					input_reg_ready_to_send = true;
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <HAL_UARTEx_RxEventCallback+0x134>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
				modbus_res = &normal_res;
 8000a00:	4a25      	ldr	r2, [pc, #148]	@ (8000a98 <HAL_UARTEx_RxEventCallback+0x138>)
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	6013      	str	r3, [r2, #0]
				sprintf(mqtt_payload_buff, "%04X", (uint16_t)((register_data[0]<<8) | register_data[1]));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	491e      	ldr	r1, [pc, #120]	@ (8000a9c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000a22:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <HAL_UARTEx_RxEventCallback+0x140>)
 8000a24:	f009 fafa 	bl	800a01c <siprintf>
				oled_printl(&oled, "MODBUS_RES_OK");
 8000a28:	491e      	ldr	r1, [pc, #120]	@ (8000aa4 <HAL_UARTEx_RxEventCallback+0x144>)
 8000a2a:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 8000a2c:	f000 fdb2 	bl	8001594 <oled_printl>
}
 8000a30:	e019      	b.n	8000a66 <HAL_UARTEx_RxEventCallback+0x106>
		else if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_EXCEPTION){
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	f107 0210 	add.w	r2, r7, #16
 8000a3a:	2139      	movs	r1, #57	@ 0x39
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <HAL_UARTEx_RxEventCallback+0x120>)
 8000a3e:	f000 faf1 	bl	8001024 <MODBUS_MASTER_response_handler>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10a      	bne.n	8000a5e <HAL_UARTEx_RxEventCallback+0xfe>
			oled_printl(&oled, "MODBUS_RES_EXCEPTION");
 8000a48:	4917      	ldr	r1, [pc, #92]	@ (8000aa8 <HAL_UARTEx_RxEventCallback+0x148>)
 8000a4a:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 8000a4c:	f000 fda2 	bl	8001594 <oled_printl>
			sprintf(oled_buff, "exception 0x%X", (uint16_t) exception.exception_code);
 8000a50:	7abb      	ldrb	r3, [r7, #10]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4915      	ldr	r1, [pc, #84]	@ (8000aac <HAL_UARTEx_RxEventCallback+0x14c>)
 8000a56:	4816      	ldr	r0, [pc, #88]	@ (8000ab0 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a58:	f009 fae0 	bl	800a01c <siprintf>
}
 8000a5c:	e003      	b.n	8000a66 <HAL_UARTEx_RxEventCallback+0x106>
			oled_printl(&oled, "UNKNOWN RESPONSE!");
 8000a5e:	4915      	ldr	r1, [pc, #84]	@ (8000ab4 <HAL_UARTEx_RxEventCallback+0x154>)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x114>)
 8000a62:	f000 fd97 	bl	8001594 <oled_printl>
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	0800aa8c 	.word	0x0800aa8c
 8000a74:	20000368 	.word	0x20000368
 8000a78:	2000020c 	.word	0x2000020c
 8000a7c:	0800aa98 	.word	0x0800aa98
 8000a80:	20000390 	.word	0x20000390
 8000a84:	0800aaa8 	.word	0x0800aaa8
 8000a88:	2000043b 	.word	0x2000043b
 8000a8c:	2000043c 	.word	0x2000043c
 8000a90:	2000043e 	.word	0x2000043e
 8000a94:	2000043d 	.word	0x2000043d
 8000a98:	20000440 	.word	0x20000440
 8000a9c:	0800aab8 	.word	0x0800aab8
 8000aa0:	200003e4 	.word	0x200003e4
 8000aa4:	0800aac0 	.word	0x0800aac0
 8000aa8:	0800aad0 	.word	0x0800aad0
 8000aac:	0800aae8 	.word	0x0800aae8
 8000ab0:	2000042c 	.word	0x2000042c
 8000ab4:	0800aaf8 	.word	0x0800aaf8

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f001 fd53 	bl	8002568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f889 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f7ff fe2b 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f7ff fdf1 	bl	80006b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ace:	f7ff fe8d 	bl	80007ec <MX_I2C1_Init>
  MX_RTC_Init();
 8000ad2:	f000 fdc7 	bl	8001664 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ad6:	f001 fc0f 	bl	80022f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ada:	f001 fc37 	bl	800234c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  oled_init(&oled, &hi2c1);
 8000ade:	4928      	ldr	r1, [pc, #160]	@ (8000b80 <main+0xc8>)
 8000ae0:	4828      	ldr	r0, [pc, #160]	@ (8000b84 <main+0xcc>)
 8000ae2:	f000 fd99 	bl	8001618 <oled_init>
  sim_init(&sim, PHUART_SIM, "mtnirancell", "", "");
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <main+0xd0>)
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <main+0xd4>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <main+0xd4>)
 8000af0:	4a27      	ldr	r2, [pc, #156]	@ (8000b90 <main+0xd8>)
 8000af2:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <main+0xdc>)
 8000af4:	f000 fe94 	bl	8001820 <sim_init>
  mqtt_init(&mqtt_conn, &sim, "stm32", "185.165.30.166", "1883", "", "", MQTT_KEEPTIME);
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <main+0xe0>)
 8000afa:	9303      	str	r3, [sp, #12]
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <main+0xd4>)
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <main+0xd4>)
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <main+0xe4>)
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <main+0xe8>)
 8000b0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <main+0xec>)
 8000b0c:	4921      	ldr	r1, [pc, #132]	@ (8000b94 <main+0xdc>)
 8000b0e:	4826      	ldr	r0, [pc, #152]	@ (8000ba8 <main+0xf0>)
 8000b10:	f000 fb1a 	bl	8001148 <mqtt_init>
  MODBUS_MASTER_init(&master, PHUART_MODBUS, modbus_tx_buff, modbus_rx_buff);
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <main+0xf4>)
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <main+0xf8>)
 8000b1a:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <main+0xfc>)
 8000b1c:	4826      	ldr	r0, [pc, #152]	@ (8000bb8 <main+0x100>)
 8000b1e:	f000 fa0b 	bl	8000f38 <MODBUS_MASTER_init>


setup:
  if(setup()){
 8000b22:	f000 f91d 	bl	8000d60 <setup>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d01e      	beq.n	8000b6a <main+0xb2>
	  mqtt_publish_string(&mqtt_conn, "0", "0", "stm32", "connected");
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <main+0x104>)
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <main+0xec>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	@ (8000bc0 <main+0x108>)
 8000b34:	4922      	ldr	r1, [pc, #136]	@ (8000bc0 <main+0x108>)
 8000b36:	481c      	ldr	r0, [pc, #112]	@ (8000ba8 <main+0xf0>)
 8000b38:	f000 fbb4 	bl	80012a4 <mqtt_publish_string>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b3c:	f006 fbca 	bl	80072d4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b40:	f7ff fdd4 	bl	80006ec <MX_FREERTOS_Init>

  mySemHandle = osSemaphoreNew(1, 1, NULL);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f006 fd01 	bl	8007550 <osSemaphoreNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <main+0x10c>)
 8000b52:	6013      	str	r3, [r2, #0]
  repeativeTaskHandle = osThreadNew(repeative_task, NULL, &repeativeTask_attributes);
 8000b54:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <main+0x110>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <main+0x114>)
 8000b5a:	f006 fc21 	bl	80073a0 <osThreadNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <main+0x118>)
 8000b62:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000b64:	f006 fbe8 	bl	8007338 <osKernelStart>
 8000b68:	e007      	b.n	8000b7a <main+0xc2>
	  oled_printl(&oled, "sim reboot");
 8000b6a:	491a      	ldr	r1, [pc, #104]	@ (8000bd4 <main+0x11c>)
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <main+0xcc>)
 8000b6e:	f000 fd11 	bl	8001594 <oled_printl>
	  sim_reboot(&sim);
 8000b72:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <main+0xdc>)
 8000b74:	f000 fed4 	bl	8001920 <sim_reboot>
	  goto setup;
 8000b78:	e7d3      	b.n	8000b22 <main+0x6a>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <main+0xc2>
 8000b7e:	bf00      	nop
 8000b80:	200002f8 	.word	0x200002f8
 8000b84:	20000368 	.word	0x20000368
 8000b88:	20000208 	.word	0x20000208
 8000b8c:	0800ab0c 	.word	0x0800ab0c
 8000b90:	0800ab10 	.word	0x0800ab10
 8000b94:	20000354 	.word	0x20000354
 8000b98:	0800ab34 	.word	0x0800ab34
 8000b9c:	0800ab38 	.word	0x0800ab38
 8000ba0:	0800ab1c 	.word	0x0800ab1c
 8000ba4:	0800ab2c 	.word	0x0800ab2c
 8000ba8:	20000370 	.word	0x20000370
 8000bac:	2000020c 	.word	0x2000020c
 8000bb0:	200003a4 	.word	0x200003a4
 8000bb4:	2000039c 	.word	0x2000039c
 8000bb8:	20000390 	.word	0x20000390
 8000bbc:	0800ab44 	.word	0x0800ab44
 8000bc0:	0800ab40 	.word	0x0800ab40
 8000bc4:	20000350 	.word	0x20000350
 8000bc8:	0800b754 	.word	0x0800b754
 8000bcc:	08000c91 	.word	0x08000c91
 8000bd0:	2000034c 	.word	0x2000034c
 8000bd4:	0800aa70 	.word	0x0800aa70

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	@ 0x50
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be2:	2228      	movs	r2, #40	@ 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f009 fa38 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c16:	2301      	movs	r3, #1
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f9a6 	bl	8003f80 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c3a:	f000 f96d 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fcfe 	bl	800465c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c66:	f000 f957 	bl	8000f18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 ff24 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c82:	f000 f949 	bl	8000f18 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	@ 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <repeative_task>:

/* USER CODE BEGIN 4 */


void repeative_task(void *args){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
//			}
//			osDelay(pdMS_TO_TICKS(1000));
//		}
//		modbus_coil_addr = 0;

		MODBUS_MASTER_read_holding_reg(&master, MODBUS_SLAVE_ADDR, modbus_holding_reg_addr, MODBUS_REG_ADDR_STEP);
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <repeative_task+0xa0>)
 8000c9a:	881a      	ldrh	r2, [r3, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2139      	movs	r1, #57	@ 0x39
 8000ca0:	4824      	ldr	r0, [pc, #144]	@ (8000d34 <repeative_task+0xa4>)
 8000ca2:	f000 fa36 	bl	8001112 <MODBUS_MASTER_read_holding_reg>
		for(uint8_t i=0;i<3;i++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e039      	b.n	8000d20 <repeative_task+0x90>
			if(holding_reg_ready_to_send){
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <repeative_task+0xa8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d02e      	beq.n	8000d12 <repeative_task+0x82>
				sprintf(mqtt_topic_buff, "%s%d", topic_holding_reg, modbus_holding_reg_addr);
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <repeative_task+0xac>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <repeative_task+0xa0>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4920      	ldr	r1, [pc, #128]	@ (8000d40 <repeative_task+0xb0>)
 8000cbe:	4821      	ldr	r0, [pc, #132]	@ (8000d44 <repeative_task+0xb4>)
 8000cc0:	f009 f9ac 	bl	800a01c <siprintf>
				if(!mqtt_publish_hex(&mqtt_conn, "0", "0", mqtt_topic_buff, mqtt_payload_buff)){
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <repeative_task+0xb8>)
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <repeative_task+0xb4>)
 8000cca:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <repeative_task+0xbc>)
 8000ccc:	491f      	ldr	r1, [pc, #124]	@ (8000d4c <repeative_task+0xbc>)
 8000cce:	4820      	ldr	r0, [pc, #128]	@ (8000d50 <repeative_task+0xc0>)
 8000cd0:	f000 fb92 	bl	80013f8 <mqtt_publish_hex>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f083 0301 	eor.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <repeative_task+0x5a>
					oled_printl(&oled, "Failed to publish");
 8000ce0:	491c      	ldr	r1, [pc, #112]	@ (8000d54 <repeative_task+0xc4>)
 8000ce2:	481d      	ldr	r0, [pc, #116]	@ (8000d58 <repeative_task+0xc8>)
 8000ce4:	f000 fc56 	bl	8001594 <oled_printl>
 8000ce8:	e010      	b.n	8000d0c <repeative_task+0x7c>
				}
				else{
					oled_printl(&oled, "published");
 8000cea:	491c      	ldr	r1, [pc, #112]	@ (8000d5c <repeative_task+0xcc>)
 8000cec:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <repeative_task+0xc8>)
 8000cee:	f000 fc51 	bl	8001594 <oled_printl>
					modbus_holding_reg_addr += MODBUS_REG_ADDR_STEP;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <repeative_task+0xa0>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <repeative_task+0xa0>)
 8000cfc:	801a      	strh	r2, [r3, #0]
					MODBUS_MASTER_read_holding_reg(&master, MODBUS_SLAVE_ADDR, modbus_holding_reg_addr, MODBUS_REG_ADDR_STEP);
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <repeative_task+0xa0>)
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	2139      	movs	r1, #57	@ 0x39
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <repeative_task+0xa4>)
 8000d08:	f000 fa03 	bl	8001112 <MODBUS_MASTER_read_holding_reg>
				}
				holding_reg_ready_to_send = false;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <repeative_task+0xa8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
			}
			osDelay(pdMS_TO_TICKS(1000));
 8000d12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d16:	f006 fbed 	bl	80074f4 <osDelay>
		for(uint8_t i=0;i<3;i++){
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d9c2      	bls.n	8000cac <repeative_task+0x1c>
		}
		modbus_holding_reg_addr = 4097;
 8000d26:	4b02      	ldr	r3, [pc, #8]	@ (8000d30 <repeative_task+0xa0>)
 8000d28:	f241 0201 	movw	r2, #4097	@ 0x1001
 8000d2c:	801a      	strh	r2, [r3, #0]
		MODBUS_MASTER_read_holding_reg(&master, MODBUS_SLAVE_ADDR, modbus_holding_reg_addr, MODBUS_REG_ADDR_STEP);
 8000d2e:	e7b3      	b.n	8000c98 <repeative_task+0x8>
 8000d30:	20000214 	.word	0x20000214
 8000d34:	20000390 	.word	0x20000390
 8000d38:	2000043e 	.word	0x2000043e
 8000d3c:	20000210 	.word	0x20000210
 8000d40:	0800ab50 	.word	0x0800ab50
 8000d44:	200003f8 	.word	0x200003f8
 8000d48:	200003e4 	.word	0x200003e4
 8000d4c:	0800ab40 	.word	0x0800ab40
 8000d50:	20000370 	.word	0x20000370
 8000d54:	0800ab58 	.word	0x0800ab58
 8000d58:	20000368 	.word	0x20000368
 8000d5c:	0800ab6c 	.word	0x0800ab6c

08000d60 <setup>:
}




bool setup(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	  oled_printl(&oled, "Please wait");
 8000d66:	495b      	ldr	r1, [pc, #364]	@ (8000ed4 <setup+0x174>)
 8000d68:	485b      	ldr	r0, [pc, #364]	@ (8000ed8 <setup+0x178>)
 8000d6a:	f000 fc13 	bl	8001594 <oled_printl>
//	  HAL_Delay(15000);
	  oled_printl(&oled, "sending AT..");
 8000d6e:	495b      	ldr	r1, [pc, #364]	@ (8000edc <setup+0x17c>)
 8000d70:	4859      	ldr	r0, [pc, #356]	@ (8000ed8 <setup+0x178>)
 8000d72:	f000 fc0f 	bl	8001594 <oled_printl>
	  if(sim_test_at(&sim)){
 8000d76:	485a      	ldr	r0, [pc, #360]	@ (8000ee0 <setup+0x180>)
 8000d78:	f000 fdb0 	bl	80018dc <sim_test_at>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <setup+0x32>
		  oled_printl(&oled, "AT OK!");
 8000d82:	4958      	ldr	r1, [pc, #352]	@ (8000ee4 <setup+0x184>)
 8000d84:	4854      	ldr	r0, [pc, #336]	@ (8000ed8 <setup+0x178>)
 8000d86:	f000 fc05 	bl	8001594 <oled_printl>
	  }
	  while(sim.state < SIM_STATE_AT_OK){
 8000d8a:	e002      	b.n	8000d92 <setup+0x32>
		  sim_test_at(&sim);
 8000d8c:	4854      	ldr	r0, [pc, #336]	@ (8000ee0 <setup+0x180>)
 8000d8e:	f000 fda5 	bl	80018dc <sim_test_at>
	  while(sim.state < SIM_STATE_AT_OK){
 8000d92:	4b53      	ldr	r3, [pc, #332]	@ (8000ee0 <setup+0x180>)
 8000d94:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dbf7      	blt.n	8000d8c <setup+0x2c>
	  }
	  if(sim_report_error_enable(&sim)){
 8000d9c:	4850      	ldr	r0, [pc, #320]	@ (8000ee0 <setup+0x180>)
 8000d9e:	f000 fdf1 	bl	8001984 <sim_report_error_enable>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <setup+0x50>
		  oled_printl(&oled, "+CMEE=2");
 8000da8:	494f      	ldr	r1, [pc, #316]	@ (8000ee8 <setup+0x188>)
 8000daa:	484b      	ldr	r0, [pc, #300]	@ (8000ed8 <setup+0x178>)
 8000dac:	f000 fbf2 	bl	8001594 <oled_printl>
	  }
	  while(sim.state < SIM_STATE_REPORT_ERROR_ENABLED){}
 8000db0:	bf00      	nop
 8000db2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <setup+0x180>)
 8000db4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	ddfa      	ble.n	8000db2 <setup+0x52>
	  if(sim_is_ready(&sim)){
 8000dbc:	4848      	ldr	r0, [pc, #288]	@ (8000ee0 <setup+0x180>)
 8000dbe:	f000 fe07 	bl	80019d0 <sim_is_ready>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <setup+0x70>
		  oled_printl(&oled, "ready");
 8000dc8:	4948      	ldr	r1, [pc, #288]	@ (8000eec <setup+0x18c>)
 8000dca:	4843      	ldr	r0, [pc, #268]	@ (8000ed8 <setup+0x178>)
 8000dcc:	f000 fbe2 	bl	8001594 <oled_printl>
	  }
	  while(sim.state < SIM_STATE_PIN_READY){}
 8000dd0:	bf00      	nop
 8000dd2:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <setup+0x180>)
 8000dd4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	ddfa      	ble.n	8000dd2 <setup+0x72>
	  if(sim_registered(&sim)){
 8000ddc:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <setup+0x180>)
 8000dde:	f000 fe47 	bl	8001a70 <sim_registered>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <setup+0x90>
		  oled_printl(&oled, "registered");
 8000de8:	4941      	ldr	r1, [pc, #260]	@ (8000ef0 <setup+0x190>)
 8000dea:	483b      	ldr	r0, [pc, #236]	@ (8000ed8 <setup+0x178>)
 8000dec:	f000 fbd2 	bl	8001594 <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CREG_OK){}
 8000df0:	bf00      	nop
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <setup+0x180>)
 8000df4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	ddfa      	ble.n	8000df2 <setup+0x92>
	  if(sim_gprs_registered(&sim)){
 8000dfc:	4838      	ldr	r0, [pc, #224]	@ (8000ee0 <setup+0x180>)
 8000dfe:	f000 fe65 	bl	8001acc <sim_gprs_registered>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <setup+0xb0>
		  oled_printl(&oled, "gprs registered");
 8000e08:	493a      	ldr	r1, [pc, #232]	@ (8000ef4 <setup+0x194>)
 8000e0a:	4833      	ldr	r0, [pc, #204]	@ (8000ed8 <setup+0x178>)
 8000e0c:	f000 fbc2 	bl	8001594 <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CGREG_OK){}
 8000e10:	bf00      	nop
 8000e12:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <setup+0x180>)
 8000e14:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	ddfa      	ble.n	8000e12 <setup+0xb2>

	  //mqtt disconnect
	  if(!mqtt_disconnect(&mqtt_conn)){
 8000e1c:	4836      	ldr	r0, [pc, #216]	@ (8000ef8 <setup+0x198>)
 8000e1e:	f000 fa21 	bl	8001264 <mqtt_disconnect>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f083 0301 	eor.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <setup+0xd6>
	  	  oled_printl(&oled, "broker disconnect error!");
 8000e2e:	4933      	ldr	r1, [pc, #204]	@ (8000efc <setup+0x19c>)
 8000e30:	4829      	ldr	r0, [pc, #164]	@ (8000ed8 <setup+0x178>)
 8000e32:	f000 fbaf 	bl	8001594 <oled_printl>
	   }


	  // gprs disconnect
	  if(!sim_gprs_disconnect(&sim)){
 8000e36:	482a      	ldr	r0, [pc, #168]	@ (8000ee0 <setup+0x180>)
 8000e38:	f000 feb0 	bl	8001b9c <sim_gprs_disconnect>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f083 0301 	eor.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <setup+0xf0>
		  oled_printl(&oled, "gprs disconnected already!");
 8000e48:	492d      	ldr	r1, [pc, #180]	@ (8000f00 <setup+0x1a0>)
 8000e4a:	4823      	ldr	r0, [pc, #140]	@ (8000ed8 <setup+0x178>)
 8000e4c:	f000 fba2 	bl	8001594 <oled_printl>
	  }

//	  HAL_Delay(5000);
	  if(sim_gprs_connect(&sim)){
 8000e50:	4823      	ldr	r0, [pc, #140]	@ (8000ee0 <setup+0x180>)
 8000e52:	f000 fe69 	bl	8001b28 <sim_gprs_connect>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d030      	beq.n	8000ebe <setup+0x15e>
	//	  sim_event_listen_once(&sim);
		  uint8_t i = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
		  oled_printl(&oled, "activatin app network");
 8000e60:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <setup+0x1a4>)
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <setup+0x178>)
 8000e64:	f000 fb96 	bl	8001594 <oled_printl>
		  while(!(sim.app_network)){
 8000e68:	e012      	b.n	8000e90 <setup+0x130>
			  i++;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
			  HAL_Delay(5000);
 8000e70:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e74:	f001 fbda 	bl	800262c <HAL_Delay>
			  oled_printl(&oled, "retrying app net");
 8000e78:	4923      	ldr	r1, [pc, #140]	@ (8000f08 <setup+0x1a8>)
 8000e7a:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <setup+0x178>)
 8000e7c:	f000 fb8a 	bl	8001594 <oled_printl>
			  sim_gprs_connect(&sim);
 8000e80:	4817      	ldr	r0, [pc, #92]	@ (8000ee0 <setup+0x180>)
 8000e82:	f000 fe51 	bl	8001b28 <sim_gprs_connect>

			  if(i>3){
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d901      	bls.n	8000e90 <setup+0x130>
				  return false;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e01d      	b.n	8000ecc <setup+0x16c>
		  while(!(sim.app_network)){
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <setup+0x180>)
 8000e92:	7c5b      	ldrb	r3, [r3, #17]
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1e5      	bne.n	8000e6a <setup+0x10a>
			  }
		  }
	//	  HAL_UART_AbortReceive_IT(sim.huart);

		  oled_printl(&oled, "Connecting to broker");
 8000e9e:	491b      	ldr	r1, [pc, #108]	@ (8000f0c <setup+0x1ac>)
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <setup+0x178>)
 8000ea2:	f000 fb77 	bl	8001594 <oled_printl>
		  if(mqtt_connect(&mqtt_conn)){
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <setup+0x198>)
 8000ea8:	f000 f976 	bl	8001198 <mqtt_connect>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <setup+0x16a>
			  oled_printl(&oled, "Connected to broker");
 8000eb2:	4917      	ldr	r1, [pc, #92]	@ (8000f10 <setup+0x1b0>)
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <setup+0x178>)
 8000eb6:	f000 fb6d 	bl	8001594 <oled_printl>
			  return true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e006      	b.n	8000ecc <setup+0x16c>
		  }
	  }
	  else{
	  	  oled_printl(&oled, "app network FAILED");
 8000ebe:	4915      	ldr	r1, [pc, #84]	@ (8000f14 <setup+0x1b4>)
 8000ec0:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <setup+0x178>)
 8000ec2:	f000 fb67 	bl	8001594 <oled_printl>
	  	  return false;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <setup+0x16c>
	  }
	  return false;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	0800ab78 	.word	0x0800ab78
 8000ed8:	20000368 	.word	0x20000368
 8000edc:	0800ab84 	.word	0x0800ab84
 8000ee0:	20000354 	.word	0x20000354
 8000ee4:	0800ab94 	.word	0x0800ab94
 8000ee8:	0800ab9c 	.word	0x0800ab9c
 8000eec:	0800aba4 	.word	0x0800aba4
 8000ef0:	0800abac 	.word	0x0800abac
 8000ef4:	0800abb8 	.word	0x0800abb8
 8000ef8:	20000370 	.word	0x20000370
 8000efc:	0800abc8 	.word	0x0800abc8
 8000f00:	0800abe4 	.word	0x0800abe4
 8000f04:	0800ac00 	.word	0x0800ac00
 8000f08:	0800ac18 	.word	0x0800ac18
 8000f0c:	0800ac2c 	.word	0x0800ac2c
 8000f10:	0800ac44 	.word	0x0800ac44
 8000f14:	0800ac58 	.word	0x0800ac58

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <MODBUS_MASTER_init>:
void MODBUS_MASTER_init(
		MODBUS_MASTER_InitTypeDef *master,
		UART_HandleTypeDef *huart,
		uint8_t *pchTxBuffer,
		uint8_t *pchRxBuffer)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
	master->huart = huart;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
	master->pchRxBuffer = pchRxBuffer;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	609a      	str	r2, [r3, #8]
	master->pchTxBuffer = pchTxBuffer;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	605a      	str	r2, [r3, #4]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <MODBUS_MASTER_request>:


void MODBUS_MASTER_request(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint8_t function_code, uint16_t register_addr, uint16_t number_of_points){
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	70fb      	strb	r3, [r7, #3]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70bb      	strb	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	803b      	strh	r3, [r7, #0]
	uint16_t rx_size = number_of_points * 2 + 5;
 8000f7c:	8b3b      	ldrh	r3, [r7, #24]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3305      	adds	r3, #5
 8000f84:	81fb      	strh	r3, [r7, #14]


	pMaster->pchTxBuffer[0] = slave_addr;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[1] = function_code;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[2] = register_addr>>8;
 8000f98:	883b      	ldrh	r3, [r7, #0]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[3] = register_addr;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	3303      	adds	r3, #3
 8000fae:	883a      	ldrh	r2, [r7, #0]
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[4] = number_of_points>>8;
 8000fb4:	8b3b      	ldrh	r3, [r7, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[5] = number_of_points;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	3305      	adds	r3, #5
 8000fca:	8b3a      	ldrh	r2, [r7, #24]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
	uint16_t crc = CRC16(pMaster->pchTxBuffer, 6);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2106      	movs	r1, #6
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fb34 	bl	8000644 <CRC16>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	81bb      	strh	r3, [r7, #12]
	pMaster->pchTxBuffer[6] = crc&0xff;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	3306      	adds	r3, #6
 8000fe6:	89ba      	ldrh	r2, [r7, #12]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[7] = (crc>>8)&0xff;
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	3307      	adds	r3, #7
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]


	HAL_UART_Transmit_IT(pMaster->huart, pMaster->pchTxBuffer, TX_SIZE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2208      	movs	r2, #8
 8001006:	4619      	mov	r1, r3
 8001008:	f005 f8c3 	bl	8006192 <HAL_UART_Transmit_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(pMaster->huart, pMaster->pchRxBuffer, rx_size);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	4619      	mov	r1, r3
 8001018:	f005 f9c4 	bl	80063a4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <MODBUS_MASTER_response_handler>:
		MODBUS_MASTER_InitTypeDef *pMaster,
		uint8_t slave_addr,
		MODBUS_MASTER_res *pNormalRes,
		MODBUS_MASTER_exception *pException
		)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_size = strlen(pMaster->pchRxBuffer);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f889 	bl	8000150 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
	if(pMaster->pchRxBuffer[0] == slave_addr){
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	7afa      	ldrb	r2, [r7, #11]
 800104a:	429a      	cmp	r2, r3
 800104c:	d15c      	bne.n	8001108 <MODBUS_MASTER_response_handler+0xe4>

		if(pMaster->pchRxBuffer[1] >= 0x80){
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	da22      	bge.n	80010a2 <MODBUS_MASTER_response_handler+0x7e>
			// Exception
			pNormalRes = NULL;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
			pException->slave_addr = pMaster->pchRxBuffer[0];
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	701a      	strb	r2, [r3, #0]
			pException->function_code = pMaster->pchRxBuffer[1];
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	785a      	ldrb	r2, [r3, #1]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	705a      	strb	r2, [r3, #1]
			pException->exception_code = pMaster->pchRxBuffer[2];
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	789a      	ldrb	r2, [r3, #2]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	709a      	strb	r2, [r3, #2]
			pException->crc = (pMaster->pchRxBuffer[3] >> 8) | (pMaster->pchRxBuffer[4]);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	3303      	adds	r3, #3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	121b      	asrs	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	3304      	adds	r3, #4
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	b29a      	uxth	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	809a      	strh	r2, [r3, #4]

			return MODBUS_RES_EXCEPTION;
 800109e:	2301      	movs	r3, #1
 80010a0:	e033      	b.n	800110a <MODBUS_MASTER_response_handler+0xe6>
		}

		else{
			pException = NULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
			pNormalRes->slave_addr = pMaster->pchRxBuffer[0];
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	701a      	strb	r2, [r3, #0]
			pNormalRes->function_code = pMaster->pchRxBuffer[1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	785a      	ldrb	r2, [r3, #1]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	705a      	strb	r2, [r3, #1]
			pNormalRes->byte_count = pMaster->pchRxBuffer[2];
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	789a      	ldrb	r2, [r3, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	709a      	strb	r2, [r3, #2]

			uint8_t byte_cnt = pNormalRes->byte_count;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	789b      	ldrb	r3, [r3, #2]
 80010c8:	75bb      	strb	r3, [r7, #22]
			pNormalRes->crc = pMaster->pchRxBuffer + 3 + byte_cnt;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	3303      	adds	r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	811a      	strh	r2, [r3, #8]
			memset(pMaster->pchRxBuffer+3+byte_cnt, 0, strlen(pNormalRes->crc));	// remove crc from rxBuff
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	3303      	adds	r3, #3
 80010e2:	18d4      	adds	r4, r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	891b      	ldrh	r3, [r3, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f831 	bl	8000150 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	4620      	mov	r0, r4
 80010f6:	f008 ffb1 	bl	800a05c <memset>

			pNormalRes->register_data = pMaster->pchRxBuffer+3;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	1cda      	adds	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	605a      	str	r2, [r3, #4]


			//clear crc from response


			return MODBUS_RES_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e000      	b.n	800110a <MODBUS_MASTER_response_handler+0xe6>
		}
	}
	else{
		return MODBUS_RES_UNKNOWN;
 8001108:	2302      	movs	r3, #2
	}
}
 800110a:	4618      	mov	r0, r3
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}

08001112 <MODBUS_MASTER_read_holding_reg>:
void MODBUS_MASTER_read_holding_reg(
		MODBUS_MASTER_InitTypeDef* pMaster,
		uint8_t slave_addr,
		uint16_t register_addr,
		uint16_t number_of_points)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af02      	add	r7, sp, #8
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	4608      	mov	r0, r1
 800111c:	4611      	mov	r1, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4603      	mov	r3, r0
 8001122:	72fb      	strb	r3, [r7, #11]
 8001124:	460b      	mov	r3, r1
 8001126:	813b      	strh	r3, [r7, #8]
 8001128:	4613      	mov	r3, r2
 800112a:	80fb      	strh	r3, [r7, #6]
	MODBUS_MASTER_request(pMaster, slave_addr, 3, register_addr, number_of_points);
 800112c:	893a      	ldrh	r2, [r7, #8]
 800112e:	7af9      	ldrb	r1, [r7, #11]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4613      	mov	r3, r2
 8001136:	2203      	movs	r2, #3
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff ff12 	bl	8000f62 <MODBUS_MASTER_request>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <mqtt_init>:
	char* url,
	char* port,
	char* username,
	char* password,
	char* keep_time)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	pMqttConn->sim = pSim;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	601a      	str	r2, [r3, #0]
	pMqttConn->client_id = client_id;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
	pMqttConn->url = url;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	609a      	str	r2, [r3, #8]
	pMqttConn->port = port;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	60da      	str	r2, [r3, #12]
	pMqttConn->username = username;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	611a      	str	r2, [r3, #16]
	pMqttConn->password = password;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a3a      	ldr	r2, [r7, #32]
 8001178:	615a      	str	r2, [r3, #20]
	pMqttConn->keep_time = keep_time;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117e:	619a      	str	r2, [r3, #24]
	pMqttConn->connected = false;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	771a      	strb	r2, [r3, #28]
	flush_buff(mqtt_rx_buff);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <mqtt_init+0x4c>)
 8001188:	f7ff f812 	bl	80001b0 <flush_buff>


}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000444 	.word	0x20000444

08001198 <mqtt_connect>:



bool mqtt_connect(mqtt_conn_t* pMqttConn){
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
	if(pMqttConn->sim->app_network){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	7c5b      	ldrb	r3, [r3, #17]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d045      	beq.n	8001236 <mqtt_connect+0x9e>
		if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 5, "\"URL\",\"", pMqttConn->url, "\",\"", pMqttConn->port, "\"")){
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <mqtt_connect+0xb0>)
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68d2      	ldr	r2, [r2, #12]
 80011bc:	4c23      	ldr	r4, [pc, #140]	@ (800124c <mqtt_connect+0xb4>)
 80011be:	9405      	str	r4, [sp, #20]
 80011c0:	9204      	str	r2, [sp, #16]
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <mqtt_connect+0xb8>)
 80011c4:	9203      	str	r2, [sp, #12]
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <mqtt_connect+0xbc>)
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2305      	movs	r3, #5
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011d4:	460a      	mov	r2, r1
 80011d6:	4920      	ldr	r1, [pc, #128]	@ (8001258 <mqtt_connect+0xc0>)
 80011d8:	f7ff f844 	bl	8000264 <at_write>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02c      	beq.n	800123c <mqtt_connect+0xa4>
			if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 2, "\"KEEPTIME\",", pMqttConn->keep_time)){
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <mqtt_connect+0xb0>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <mqtt_connect+0xc4>)
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2302      	movs	r3, #2
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011fe:	4916      	ldr	r1, [pc, #88]	@ (8001258 <mqtt_connect+0xc0>)
 8001200:	f7ff f830 	bl	8000264 <at_write>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d018      	beq.n	800123c <mqtt_connect+0xa4>

				HAL_Delay(2000);
 800120a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800120e:	f001 fa0d 	bl	800262c <HAL_Delay>
				if(at_execute_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smconn, 20000)>0){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <mqtt_connect+0xc8>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001220:	490d      	ldr	r1, [pc, #52]	@ (8001258 <mqtt_connect+0xc0>)
 8001222:	f7ff f9b3 	bl	800058c <at_execute_blocking>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <mqtt_connect+0xa4>
					pMqttConn->connected = true;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	771a      	strb	r2, [r3, #28]
					return true;
 8001232:	2301      	movs	r3, #1
 8001234:	e003      	b.n	800123e <mqtt_connect+0xa6>
				}
			}
		}
	}
	else{
		pMqttConn->connected = false;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	771a      	strb	r2, [r3, #28]
	}
	return false;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	20000218 	.word	0x20000218
 800124c:	0800aca0 	.word	0x0800aca0
 8001250:	0800aca4 	.word	0x0800aca4
 8001254:	0800aca8 	.word	0x0800aca8
 8001258:	20000444 	.word	0x20000444
 800125c:	0800acb0 	.word	0x0800acb0
 8001260:	2000021c 	.word	0x2000021c

08001264 <mqtt_disconnect>:




bool mqtt_disconnect(mqtt_conn_t* pMqttConn){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if(at_execute(pMqttConn->sim->huart, mqtt_rx_buff, smdisc, 5000)){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <mqtt_disconnect+0x38>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800127a:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <mqtt_disconnect+0x3c>)
 800127c:	f7ff f868 	bl	8000350 <at_execute>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <mqtt_disconnect+0x2c>
		pMqttConn->connected = false;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
		return true;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <mqtt_disconnect+0x2e>
	}
	return false;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000224 	.word	0x20000224
 80012a0:	20000444 	.word	0x20000444

080012a4 <mqtt_publish_string>:





bool mqtt_publish_string(mqtt_conn_t* pMqttConn, char* qos, char* retain, char* topic, char* payload){
 80012a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a8:	b095      	sub	sp, #84	@ 0x54
 80012aa:	af0a      	add	r7, sp, #40	@ 0x28
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
	if(pMqttConn->connected){
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	7f1b      	ldrb	r3, [r3, #28]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8084 	beq.w	80013c6 <mqtt_publish_string+0x122>
		uint8_t content_length = strlen(payload);
 80012be:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80012c0:	f7fe ff46 	bl	8000150 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		char content_len[5];
		sprintf(content_len, "%d", content_length);
 80012ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4940      	ldr	r1, [pc, #256]	@ (80013d4 <mqtt_publish_string+0x130>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fea1 	bl	800a01c <siprintf>
		if(pMqttConn->connected){
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	7f1b      	ldrb	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d071      	beq.n	80013c6 <mqtt_publish_string+0x122>
			if(at_write_blocking(
					pMqttConn->sim->huart,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
			if(at_write_blocking(
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <mqtt_publish_string+0x134>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	9308      	str	r3, [sp, #32]
 80012f0:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <mqtt_publish_string+0x138>)
 80012f2:	9307      	str	r3, [sp, #28]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	9306      	str	r3, [sp, #24]
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <mqtt_publish_string+0x13c>)
 80012fa:	9305      	str	r3, [sp, #20]
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <mqtt_publish_string+0x140>)
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <mqtt_publish_string+0x144>)
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	2308      	movs	r3, #8
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001316:	4935      	ldr	r1, [pc, #212]	@ (80013ec <mqtt_publish_string+0x148>)
 8001318:	f7ff f8bc 	bl	8000494 <at_write_blocking>
 800131c:	4603      	mov	r3, r0
 800131e:	2b02      	cmp	r3, #2
 8001320:	d151      	bne.n	80013c6 <mqtt_publish_string+0x122>
					content_len,
					"\",",
					qos,
					",",
					retain) == AT_STATE_ENTER_INPUT)
			{
 8001322:	466b      	mov	r3, sp
 8001324:	461e      	mov	r6, r3
				char msg[content_length+5];
 8001326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800132a:	1d59      	adds	r1, r3, #5
 800132c:	1e4b      	subs	r3, r1, #1
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	460a      	mov	r2, r1
 8001332:	2300      	movs	r3, #0
 8001334:	4690      	mov	r8, r2
 8001336:	4699      	mov	r9, r3
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001344:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001348:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800134c:	460a      	mov	r2, r1
 800134e:	2300      	movs	r3, #0
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	00eb      	lsls	r3, r5, #3
 800135e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001362:	00e2      	lsls	r2, r4, #3
 8001364:	460b      	mov	r3, r1
 8001366:	3307      	adds	r3, #7
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	ebad 0d03 	sub.w	sp, sp, r3
 8001370:	ab0a      	add	r3, sp, #40	@ 0x28
 8001372:	3300      	adds	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
//				sprintf(msg, "%s\x1A\r\n", payload);
				sprintf(msg, "%s", payload);
 8001376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001378:	491d      	ldr	r1, [pc, #116]	@ (80013f0 <mqtt_publish_string+0x14c>)
 800137a:	69f8      	ldr	r0, [r7, #28]
 800137c:	f008 fe4e 	bl	800a01c <siprintf>
				HAL_UART_Transmit(pMqttConn->sim->huart, msg , strlen(msg), MQTT_AT_MIN_TIMEOUT);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681c      	ldr	r4, [r3, #0]
 8001386:	69f8      	ldr	r0, [r7, #28]
 8001388:	f7fe fee2 	bl	8000150 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001394:	69f9      	ldr	r1, [r7, #28]
 8001396:	4620      	mov	r0, r4
 8001398:	f004 fde6 	bl	8005f68 <HAL_UART_Transmit>
				sprintf(msg, "%c", (char) 26);
 800139c:	221a      	movs	r2, #26
 800139e:	4915      	ldr	r1, [pc, #84]	@ (80013f4 <mqtt_publish_string+0x150>)
 80013a0:	69f8      	ldr	r0, [r7, #28]
 80013a2:	f008 fe3b 	bl	800a01c <siprintf>
				HAL_UART_Transmit_IT(pMqttConn->sim->huart, msg , strlen(msg));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	69f8      	ldr	r0, [r7, #28]
 80013ae:	f7fe fecf 	bl	8000150 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	69f9      	ldr	r1, [r7, #28]
 80013ba:	4620      	mov	r0, r4
 80013bc:	f004 fee9 	bl	8006192 <HAL_UART_Transmit_IT>
				return true;
 80013c0:	2301      	movs	r3, #1
 80013c2:	46b5      	mov	sp, r6
 80013c4:	e000      	b.n	80013c8 <mqtt_publish_string+0x124>
			}
		}
	}
	return false;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	372c      	adds	r7, #44	@ 0x2c
 80013cc:	46bd      	mov	sp, r7
 80013ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d2:	bf00      	nop
 80013d4:	0800acbc 	.word	0x0800acbc
 80013d8:	20000220 	.word	0x20000220
 80013dc:	0800acc0 	.word	0x0800acc0
 80013e0:	0800acc4 	.word	0x0800acc4
 80013e4:	0800aca4 	.word	0x0800aca4
 80013e8:	0800aca0 	.word	0x0800aca0
 80013ec:	20000444 	.word	0x20000444
 80013f0:	0800acc8 	.word	0x0800acc8
 80013f4:	0800accc 	.word	0x0800accc

080013f8 <mqtt_publish_hex>:




bool mqtt_publish_hex(mqtt_conn_t* pMqttConn, char* qos, char* retain, char* topic, char* payload){
 80013f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013fc:	b093      	sub	sp, #76	@ 0x4c
 80013fe:	af0a      	add	r7, sp, #40	@ 0x28
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	603b      	str	r3, [r7, #0]
	if(pMqttConn->connected){
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7f1b      	ldrb	r3, [r3, #28]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a4 	beq.w	800155a <mqtt_publish_hex+0x162>
		if(at_write_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smpubhex, MQTT_AT_MIN_TIMEOUT, 1, "1")){
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <mqtt_publish_hex+0x170>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b53      	ldr	r3, [pc, #332]	@ (800156c <mqtt_publish_hex+0x174>)
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2301      	movs	r3, #1
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001428:	4951      	ldr	r1, [pc, #324]	@ (8001570 <mqtt_publish_hex+0x178>)
 800142a:	f7ff f833 	bl	8000494 <at_write_blocking>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8092 	beq.w	800155a <mqtt_publish_hex+0x162>
 8001436:	466b      	mov	r3, sp
 8001438:	461e      	mov	r6, r3
			uint8_t content_length = strlen(payload);
 800143a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800143c:	f7fe fe88 	bl	8000150 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	77fb      	strb	r3, [r7, #31]
			char true_payload[content_length+1];
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	1e4b      	subs	r3, r1, #1
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	460a      	mov	r2, r1
 800144e:	2300      	movs	r3, #0
 8001450:	4690      	mov	r8, r2
 8001452:	4699      	mov	r9, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001460:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001464:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001468:	460a      	mov	r2, r1
 800146a:	2300      	movs	r3, #0
 800146c:	4614      	mov	r4, r2
 800146e:	461d      	mov	r5, r3
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	00eb      	lsls	r3, r5, #3
 800147a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800147e:	00e2      	lsls	r2, r4, #3
 8001480:	460b      	mov	r3, r1
 8001482:	3307      	adds	r3, #7
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	ebad 0d03 	sub.w	sp, sp, r3
 800148c:	ab0a      	add	r3, sp, #40	@ 0x28
 800148e:	3300      	adds	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
			char byte_size[4];
			if(content_length % 2 != 0){
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d011      	beq.n	80014c2 <mqtt_publish_hex+0xca>
				sprintf(true_payload, "%s0", payload);
 800149e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014a0:	4934      	ldr	r1, [pc, #208]	@ (8001574 <mqtt_publish_hex+0x17c>)
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f008 fdba 	bl	800a01c <siprintf>
				sprintf(byte_size, "%d", (content_length+1)/2);
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	3301      	adds	r3, #1
 80014ac:	0fda      	lsrs	r2, r3, #31
 80014ae:	4413      	add	r3, r2
 80014b0:	105b      	asrs	r3, r3, #1
 80014b2:	461a      	mov	r2, r3
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	492f      	ldr	r1, [pc, #188]	@ (8001578 <mqtt_publish_hex+0x180>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 fdae 	bl	800a01c <siprintf>
 80014c0:	e00d      	b.n	80014de <mqtt_publish_hex+0xe6>
			}
			else{
				strcpy(true_payload, payload);
 80014c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f008 fe23 	bl	800a110 <strcpy>
				sprintf(byte_size, "%d", content_length/2);
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4928      	ldr	r1, [pc, #160]	@ (8001578 <mqtt_publish_hex+0x180>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fd9f 	bl	800a01c <siprintf>
			}

			if(pMqttConn->connected){
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d038      	beq.n	8001558 <mqtt_publish_hex+0x160>
				if(at_write_blocking(
						pMqttConn->sim->huart,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
				if(at_write_blocking(
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	4b23      	ldr	r3, [pc, #140]	@ (800157c <mqtt_publish_hex+0x184>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	9308      	str	r3, [sp, #32]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <mqtt_publish_hex+0x188>)
 80014f6:	9307      	str	r3, [sp, #28]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	9306      	str	r3, [sp, #24]
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <mqtt_publish_hex+0x18c>)
 80014fe:	9305      	str	r3, [sp, #20]
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	9304      	str	r3, [sp, #16]
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <mqtt_publish_hex+0x190>)
 8001508:	9303      	str	r3, [sp, #12]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <mqtt_publish_hex+0x194>)
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2308      	movs	r3, #8
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800151a:	4915      	ldr	r1, [pc, #84]	@ (8001570 <mqtt_publish_hex+0x178>)
 800151c:	f7fe ffba 	bl	8000494 <at_write_blocking>
 8001520:	4603      	mov	r3, r0
 8001522:	2b02      	cmp	r3, #2
 8001524:	d118      	bne.n	8001558 <mqtt_publish_hex+0x160>
						",",
						retain) == AT_STATE_ENTER_INPUT)
				{


					HAL_UART_Transmit(pMqttConn->sim->huart, true_payload , strlen(true_payload), MQTT_AT_MIN_TIMEOUT);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7fe fe0f 	bl	8000150 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	4620      	mov	r0, r4
 800153e:	f004 fd13 	bl	8005f68 <HAL_UART_Transmit>
					HAL_UART_Transmit(pMqttConn->sim->huart, "\n" , 1, 200);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	23c8      	movs	r3, #200	@ 0xc8
 800154a:	2201      	movs	r2, #1
 800154c:	4910      	ldr	r1, [pc, #64]	@ (8001590 <mqtt_publish_hex+0x198>)
 800154e:	f004 fd0b 	bl	8005f68 <HAL_UART_Transmit>
					return true;
 8001552:	2301      	movs	r3, #1
 8001554:	46b5      	mov	sp, r6
 8001556:	e001      	b.n	800155c <mqtt_publish_hex+0x164>
 8001558:	46b5      	mov	sp, r6
				}
			}
		}
	}
	return false;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
 8001568:	20000228 	.word	0x20000228
 800156c:	0800acd0 	.word	0x0800acd0
 8001570:	20000444 	.word	0x20000444
 8001574:	0800acd4 	.word	0x0800acd4
 8001578:	0800acbc 	.word	0x0800acbc
 800157c:	20000220 	.word	0x20000220
 8001580:	0800acc0 	.word	0x0800acc0
 8001584:	0800acc4 	.word	0x0800acc4
 8001588:	0800aca4 	.word	0x0800aca4
 800158c:	0800aca0 	.word	0x0800aca0
 8001590:	0800acd8 	.word	0x0800acd8

08001594 <oled_printl>:
	ssd1306_UpdateScreen(pOled->pHi2c);
}



void oled_printl(oled_t *pOled, const char* str){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	if(pOled->current_line < 6){
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d81d      	bhi.n	80015e2 <oled_printl+0x4e>
		uint8_t y = pOled->current_line * 10;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	461a      	mov	r2, r3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(0, y);
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fdaf 	bl	800211c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <oled_printl+0x80>)
 80015c0:	2301      	movs	r3, #1
 80015c2:	ca06      	ldmia	r2, {r1, r2}
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f000 fd83 	bl	80020d0 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fc6c 	bl	8001eac <ssd1306_UpdateScreen>
		pOled->current_line++;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	711a      	strb	r2, [r3, #4]
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString(str, Font_7x10, White);
		ssd1306_UpdateScreen(pOled->pHi2c);
		pOled->current_line = 1;
	}
}
 80015e0:	e014      	b.n	800160c <oled_printl+0x78>
		ssd1306_Fill(Black);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 fc40 	bl	8001e68 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fd96 	bl	800211c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80015f0:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <oled_printl+0x80>)
 80015f2:	2301      	movs	r3, #1
 80015f4:	ca06      	ldmia	r2, {r1, r2}
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 fd6a 	bl	80020d0 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fc53 	bl	8001eac <ssd1306_UpdateScreen>
		pOled->current_line = 1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	711a      	strb	r2, [r3, #4]
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000200 	.word	0x20000200

08001618 <oled_init>:


void oled_init(oled_t *pOled, I2C_HandleTypeDef *pHi2c){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	 ssd1306_Init(pHi2c);
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f000 fb00 	bl	8001c28 <ssd1306_Init>
	 ssd1306_Fill(Black);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fc1d 	bl	8001e68 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fd73 	bl	800211c <ssd1306_SetCursor>
	 ssd1306_WriteString("Loading...", Font_7x10, White);
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <oled_init+0x44>)
 8001638:	2301      	movs	r3, #1
 800163a:	ca06      	ldmia	r2, {r1, r2}
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <oled_init+0x48>)
 800163e:	f000 fd47 	bl	80020d0 <ssd1306_WriteString>
	 ssd1306_UpdateScreen(pOled->pHi2c);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fc30 	bl	8001eac <ssd1306_UpdateScreen>
	 pOled->pHi2c = pHi2c;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000200 	.word	0x20000200
 8001660:	0800acf4 	.word	0x0800acf4

08001664 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2100      	movs	r1, #0
 8001670:	460a      	mov	r2, r1
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	460a      	mov	r2, r1
 8001676:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_RTC_Init+0xac>)
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <MX_RTC_Init+0xb0>)
 8001688:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <MX_RTC_Init+0xac>)
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_RTC_Init+0xac>)
 8001694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001698:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800169a:	481d      	ldr	r0, [pc, #116]	@ (8001710 <MX_RTC_Init+0xac>)
 800169c:	f003 fbe8 	bl	8004e70 <HAL_RTC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80016a6:	f7ff fc37 	bl	8000f18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2201      	movs	r2, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	4814      	ldr	r0, [pc, #80]	@ (8001710 <MX_RTC_Init+0xac>)
 80016c0:	f003 fc96 	bl	8004ff0 <HAL_RTC_SetTime>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80016ca:	f7ff fc25 	bl	8000f18 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016ce:	2301      	movs	r3, #1
 80016d0:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80016d2:	2301      	movs	r3, #1
 80016d4:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80016da:	2300      	movs	r3, #0
 80016dc:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2201      	movs	r2, #1
 80016e4:	4619      	mov	r1, r3
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <MX_RTC_Init+0xac>)
 80016e8:	f003 fe4e 	bl	8005388 <HAL_RTC_SetDate>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80016f2:	f7ff fc11 	bl	8000f18 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
//  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200004a8 	.word	0x200004a8
 8001714:	40002800 	.word	0x40002800

08001718 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <HAL_RTC_MspInit+0x5c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d120      	bne.n	800176c <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800172a:	f002 fc1d 	bl	8003f68 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_RTC_MspInit+0x60>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_RTC_MspInit+0x60>)
 8001734:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_RTC_MspInit+0x60>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_RTC_MspInit+0x64>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2105      	movs	r1, #5
 8001750:	2003      	movs	r0, #3
 8001752:	f001 f87b 	bl	800284c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001756:	2003      	movs	r0, #3
 8001758:	f001 f8a4 	bl	80028a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2105      	movs	r1, #5
 8001760:	2029      	movs	r0, #41	@ 0x29
 8001762:	f001 f873 	bl	800284c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001766:	2029      	movs	r0, #41	@ 0x29
 8001768:	f001 f89c 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40002800 	.word	0x40002800
 8001778:	40021000 	.word	0x40021000
 800177c:	4242043c 	.word	0x4242043c

08001780 <rtc_set_alarm_seconds_it>:

#include "rtc_delay.h"



void rtc_set_alarm_seconds_it(RTC_HandleTypeDef* hrtc, uint16_t seconds){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
	RTC_AlarmTypeDef sAlarm;

	    // Get the current time
	    RTC_TimeTypeDef sTime;
	    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f003 fd11 	bl	80051bc <HAL_RTC_GetTime>

	    // Calculate alarm time (current time + period)
	    sAlarm.AlarmTime.Seconds = sTime.Seconds + seconds;
 800179a:	7bba      	ldrb	r2, [r7, #14]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	74bb      	strb	r3, [r7, #18]
	    sAlarm.AlarmTime.Minutes = sTime.Minutes;
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	747b      	strb	r3, [r7, #17]
	    sAlarm.AlarmTime.Hours = sTime.Hours;
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	743b      	strb	r3, [r7, #16]

	    // Normalize alarm time
	    if (sAlarm.AlarmTime.Seconds >= 60) {
 80017ae:	7cbb      	ldrb	r3, [r7, #18]
 80017b0:	2b3b      	cmp	r3, #59	@ 0x3b
 80017b2:	d907      	bls.n	80017c4 <rtc_set_alarm_seconds_it+0x44>
	        sAlarm.AlarmTime.Seconds -= 60;
 80017b4:	7cbb      	ldrb	r3, [r7, #18]
 80017b6:	3b3c      	subs	r3, #60	@ 0x3c
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	74bb      	strb	r3, [r7, #18]
	        sAlarm.AlarmTime.Minutes++;
 80017bc:	7c7b      	ldrb	r3, [r7, #17]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	747b      	strb	r3, [r7, #17]
	    }
	    if (sAlarm.AlarmTime.Minutes >= 60) {
 80017c4:	7c7b      	ldrb	r3, [r7, #17]
 80017c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80017c8:	d907      	bls.n	80017da <rtc_set_alarm_seconds_it+0x5a>
	        sAlarm.AlarmTime.Minutes -= 60;
 80017ca:	7c7b      	ldrb	r3, [r7, #17]
 80017cc:	3b3c      	subs	r3, #60	@ 0x3c
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	747b      	strb	r3, [r7, #17]
	        sAlarm.AlarmTime.Hours++;
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	743b      	strb	r3, [r7, #16]
	    }
	    if (sAlarm.AlarmTime.Hours >= 24) {
 80017da:	7c3b      	ldrb	r3, [r7, #16]
 80017dc:	2b17      	cmp	r3, #23
 80017de:	d903      	bls.n	80017e8 <rtc_set_alarm_seconds_it+0x68>
	        sAlarm.AlarmTime.Hours -= 24;
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	3b18      	subs	r3, #24
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	743b      	strb	r3, [r7, #16]
	    }

	    sAlarm.Alarm = RTC_ALARM_A;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

	    if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f003 fee5 	bl	80055c4 <HAL_RTC_SetAlarm_IT>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <rtc_set_alarm_seconds_it+0x84>
	        Error_Handler();
 8001800:	f7ff fb8a 	bl	8000f18 <Error_Handler>
	    }

}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_sim_finish_operation>:
char sim_event_buff[SIM_EVENT_BUFF_SIZE];
uint16_t sim_event_rx_len;



bool _sim_finish_operation(){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	flush_buff(sim_rx_buff);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <_sim_finish_operation+0x10>)
 8001812:	f7fe fccd 	bl	80001b0 <flush_buff>
	return true;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200004bc 	.word	0x200004bc

08001820 <sim_init>:


void sim_init(sim_t* psim, UART_HandleTypeDef* huart, char* apn, char* username, char* password){
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
	psim->huart = huart;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	601a      	str	r2, [r3, #0]
	psim->apn = apn;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	605a      	str	r2, [r3, #4]
	psim->username = username;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	609a      	str	r2, [r3, #8]
	psim->password = password;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	60da      	str	r2, [r3, #12]
	psim->app_network = false;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	745a      	strb	r2, [r3, #17]


}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <sim_event_poll_once>:
}




void sim_event_poll_once(sim_t* psim, uint32_t timeout){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
//	HAL_UARTEx_ReceiveToIdle(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, &sim_event_rx_len, timeout);
	HAL_UART_Receive(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, timeout);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2232      	movs	r2, #50	@ 0x32
 800186a:	4903      	ldr	r1, [pc, #12]	@ (8001878 <sim_event_poll_once+0x20>)
 800186c:	f004 fbff 	bl	800606e <HAL_UART_Receive>

}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200004f0 	.word	0x200004f0

0800187c <sim_event_handler>:




void sim_event_handler(sim_t* psim, char* event_buff){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]

	if(strlen(event_buff) > 0){
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01b      	beq.n	80018c6 <sim_event_handler+0x4a>
		if(find_substr(event_buff, "+APP")){
 800188e:	4910      	ldr	r1, [pc, #64]	@ (80018d0 <sim_event_handler+0x54>)
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7fe fc79 	bl	8000188 <find_substr>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d014      	beq.n	80018c6 <sim_event_handler+0x4a>
			if(find_substr(event_buff, "ACTIVE")){
 800189c:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <sim_event_handler+0x58>)
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f7fe fc72 	bl	8000188 <find_substr>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <sim_event_handler+0x36>
				psim->app_network = true;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	745a      	strb	r2, [r3, #17]
			else if(find_substr(event_buff, "DEACTIVE")){
				psim->app_network = false;
			}
		}
	}
}
 80018b0:	e009      	b.n	80018c6 <sim_event_handler+0x4a>
			else if(find_substr(event_buff, "DEACTIVE")){
 80018b2:	4909      	ldr	r1, [pc, #36]	@ (80018d8 <sim_event_handler+0x5c>)
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f7fe fc67 	bl	8000188 <find_substr>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <sim_event_handler+0x4a>
				psim->app_network = false;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	745a      	strb	r2, [r3, #17]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	0800ad64 	.word	0x0800ad64
 80018d4:	0800ad6c 	.word	0x0800ad6c
 80018d8:	0800ad74 	.word	0x0800ad74

080018dc <sim_test_at>:





bool sim_test_at(sim_t* psim){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if(at_execute(psim->huart, sim_rx_buff, "", SIM_AT_MIN_TIMEOUT)){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <sim_test_at+0x3c>)
 80018ee:	490b      	ldr	r1, [pc, #44]	@ (800191c <sim_test_at+0x40>)
 80018f0:	f7fe fd2e 	bl	8000350 <at_execute>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <sim_test_at+0x2c>
			psim->state = SIM_STATE_AT_OK;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	741a      	strb	r2, [r3, #16]
			return _sim_finish_operation();
 8001900:	f7ff ff84 	bl	800180c <_sim_finish_operation>
 8001904:	4603      	mov	r3, r0
 8001906:	e003      	b.n	8001910 <sim_test_at+0x34>
	}
	else{
		psim->state = SIM_STATE_OFF;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	22ff      	movs	r2, #255	@ 0xff
 800190c:	741a      	strb	r2, [r3, #16]
	}
	return false;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800ad80 	.word	0x0800ad80
 800191c:	200004bc 	.word	0x200004bc

08001920 <sim_reboot>:



bool sim_reboot(sim_t* psim){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
 8001926:	6078      	str	r0, [r7, #4]
	sim_init(psim, psim->huart, psim->apn, psim->username, psim->password);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6898      	ldr	r0, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4603      	mov	r3, r0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff6f 	bl	8001820 <sim_init>
	if(at_write_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT, 2, "1,", "1")){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <sim_reboot+0x54>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <sim_reboot+0x58>)
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <sim_reboot+0x5c>)
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2302      	movs	r3, #2
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800195a:	4909      	ldr	r1, [pc, #36]	@ (8001980 <sim_reboot+0x60>)
 800195c:	f7fe fd9a 	bl	8000494 <at_write_blocking>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <sim_reboot+0x4a>
		return true;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <sim_reboot+0x4c>
	}
	return false;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000022c 	.word	0x2000022c
 8001978:	0800ad84 	.word	0x0800ad84
 800197c:	0800ad88 	.word	0x0800ad88
 8001980:	200004bc 	.word	0x200004bc

08001984 <sim_report_error_enable>:



bool sim_report_error_enable(sim_t* psim){
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
	if(at_write(psim->huart, sim_rx_buff, cmee, 5000, 1, "2")){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <sim_report_error_enable+0x40>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <sim_report_error_enable+0x44>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2301      	movs	r3, #1
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019a0:	490a      	ldr	r1, [pc, #40]	@ (80019cc <sim_report_error_enable+0x48>)
 80019a2:	f7fe fc5f 	bl	8000264 <at_write>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <sim_report_error_enable+0x36>
		psim->state = SIM_STATE_REPORT_ERROR_ENABLED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	741a      	strb	r2, [r3, #16]
		return _sim_finish_operation();
 80019b2:	f7ff ff2b 	bl	800180c <_sim_finish_operation>
 80019b6:	4603      	mov	r3, r0
 80019b8:	e000      	b.n	80019bc <sim_report_error_enable+0x38>
	}
	return false;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000234 	.word	0x20000234
 80019c8:	0800ad8c 	.word	0x0800ad8c
 80019cc:	200004bc 	.word	0x200004bc

080019d0 <sim_is_ready>:




bool sim_is_ready(sim_t* psim){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	if(psim->state >= SIM_STATE_AT_OK){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db36      	blt.n	8001a50 <sim_is_ready+0x80>
		if(at_read_blocking(psim->huart, sim_rx_buff, cpin, SIM_AT_MIN_TIMEOUT)){
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <sim_is_ready+0x8c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019ee:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <sim_is_ready+0x90>)
 80019f0:	f7fe fd0e 	bl	8000410 <at_read_blocking>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <sim_is_ready+0x3e>
			if(find_substr(sim_rx_buff, "READY")){
 80019fa:	491a      	ldr	r1, [pc, #104]	@ (8001a64 <sim_is_ready+0x94>)
 80019fc:	4818      	ldr	r0, [pc, #96]	@ (8001a60 <sim_is_ready+0x90>)
 80019fe:	f7fe fbc3 	bl	8000188 <find_substr>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <sim_is_ready+0x3e>
				psim->state = SIM_STATE_PIN_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	741a      	strb	r2, [r3, #16]
			}
			else{

			}
		}
		if(psim->state == SIM_STATE_PIN_READY){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d119      	bne.n	8001a4c <sim_is_ready+0x7c>
			if(at_read_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT)){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <sim_is_ready+0x98>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <sim_is_ready+0x90>)
 8001a26:	f7fe fcf3 	bl	8000410 <at_read_blocking>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00d      	beq.n	8001a4c <sim_is_ready+0x7c>
				if(find_substr(sim_rx_buff, "+CFUN: 1")){
 8001a30:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <sim_is_ready+0x9c>)
 8001a32:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <sim_is_ready+0x90>)
 8001a34:	f7fe fba8 	bl	8000188 <find_substr>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <sim_is_ready+0x7c>
					psim->state = SIM_STATE_FULL_FUNC;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	741a      	strb	r2, [r3, #16]
					return _sim_finish_operation();
 8001a44:	f7ff fee2 	bl	800180c <_sim_finish_operation>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e002      	b.n	8001a52 <sim_is_ready+0x82>
				else{

				}
			}
		}
		return false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <sim_is_ready+0x82>
	}
	return false;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000230 	.word	0x20000230
 8001a60:	200004bc 	.word	0x200004bc
 8001a64:	0800ad90 	.word	0x0800ad90
 8001a68:	2000022c 	.word	0x2000022c
 8001a6c:	0800ad98 	.word	0x0800ad98

08001a70 <sim_registered>:


bool sim_registered(sim_t* psim){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_FULL_FUNC){
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d119      	bne.n	8001ab6 <sim_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, creg, 5000)){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <sim_registered+0x50>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <sim_registered+0x54>)
 8001a90:	f7fe fba2 	bl	80001d8 <at_read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <sim_registered+0x46>
			if(find_substr(sim_rx_buff, "+CREG: 0,1")){
 8001a9a:	490b      	ldr	r1, [pc, #44]	@ (8001ac8 <sim_registered+0x58>)
 8001a9c:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <sim_registered+0x54>)
 8001a9e:	f7fe fb73 	bl	8000188 <find_substr>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <sim_registered+0x46>
				psim->state = SIM_STATE_CREG_OK;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001aae:	f7ff fead 	bl	800180c <_sim_finish_operation>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	e000      	b.n	8001ab8 <sim_registered+0x48>
			else{

			}
		}
	}
	return false;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000238 	.word	0x20000238
 8001ac4:	200004bc 	.word	0x200004bc
 8001ac8:	0800ada4 	.word	0x0800ada4

08001acc <sim_gprs_registered>:



bool sim_gprs_registered(sim_t* psim){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CREG_OK){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d119      	bne.n	8001b12 <sim_gprs_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, cgreg, 5000)){
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <sim_gprs_registered+0x50>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <sim_gprs_registered+0x54>)
 8001aec:	f7fe fb74 	bl	80001d8 <at_read>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <sim_gprs_registered+0x46>
			if(find_substr(sim_rx_buff, "+CGREG: 0,1")){
 8001af6:	490b      	ldr	r1, [pc, #44]	@ (8001b24 <sim_gprs_registered+0x58>)
 8001af8:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <sim_gprs_registered+0x54>)
 8001afa:	f7fe fb45 	bl	8000188 <find_substr>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <sim_gprs_registered+0x46>
				psim->state = SIM_STATE_CGREG_OK;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2205      	movs	r2, #5
 8001b08:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001b0a:	f7ff fe7f 	bl	800180c <_sim_finish_operation>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	e000      	b.n	8001b14 <sim_gprs_registered+0x48>

			}
		}
	}

	return false;
 8001b12:	2300      	movs	r3, #0

}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000023c 	.word	0x2000023c
 8001b20:	200004bc 	.word	0x200004bc
 8001b24:	0800adb0 	.word	0x0800adb0

08001b28 <sim_gprs_connect>:



bool sim_gprs_connect(sim_t* psim){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d11d      	bne.n	8001b76 <sim_gprs_connect+0x4e>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 100, 2, "1,",SIM_APN_MTN) > 0){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <sim_gprs_connect+0x60>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <sim_gprs_connect+0x64>)
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <sim_gprs_connect+0x68>)
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2364      	movs	r3, #100	@ 0x64
 8001b50:	4910      	ldr	r1, [pc, #64]	@ (8001b94 <sim_gprs_connect+0x6c>)
 8001b52:	f7fe fc9f 	bl	8000494 <at_write_blocking>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	dd0c      	ble.n	8001b76 <sim_gprs_connect+0x4e>
//			sim_event_handler(psim);
			sim_event_poll_once(psim, 10000);
 8001b5c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fe79 	bl	8001858 <sim_event_poll_once>
			sim_event_handler(psim, sim_event_buff);
 8001b66:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <sim_gprs_connect+0x70>)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fe87 	bl	800187c <sim_event_handler>
			return _sim_finish_operation();
 8001b6e:	f7ff fe4d 	bl	800180c <_sim_finish_operation>
 8001b72:	4603      	mov	r3, r0
 8001b74:	e003      	b.n	8001b7e <sim_gprs_connect+0x56>
		}

	}
	flush_buff(sim_rx_buff);
 8001b76:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <sim_gprs_connect+0x6c>)
 8001b78:	f7fe fb1a 	bl	80001b0 <flush_buff>
	return false;
 8001b7c:	2300      	movs	r3, #0

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000240 	.word	0x20000240
 8001b8c:	0800adbc 	.word	0x0800adbc
 8001b90:	0800ad88 	.word	0x0800ad88
 8001b94:	200004bc 	.word	0x200004bc
 8001b98:	200004f0 	.word	0x200004f0

08001b9c <sim_gprs_disconnect>:



bool sim_gprs_disconnect(sim_t* psim){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d116      	bne.n	8001bdc <sim_gprs_disconnect+0x40>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 5000, 1, "0") > 0){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <sim_gprs_disconnect+0x50>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <sim_gprs_disconnect+0x54>)
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bc2:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <sim_gprs_disconnect+0x58>)
 8001bc4:	f7fe fc66 	bl	8000494 <at_write_blocking>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	dd06      	ble.n	8001bdc <sim_gprs_disconnect+0x40>
			psim->app_network = false;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	745a      	strb	r2, [r3, #17]
//			sim_event_handler(psim);
//			sim_event_poll_once(psim, 60000);
//			sim_event_handler(psim);
			return _sim_finish_operation();
 8001bd4:	f7ff fe1a 	bl	800180c <_sim_finish_operation>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	e003      	b.n	8001be4 <sim_gprs_disconnect+0x48>
		}

	}
	flush_buff(sim_rx_buff);
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <sim_gprs_disconnect+0x58>)
 8001bde:	f7fe fae7 	bl	80001b0 <flush_buff>
	return false;
 8001be2:	2300      	movs	r3, #0

}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000240 	.word	0x20000240
 8001bf0:	0800adcc 	.word	0x0800adcc
 8001bf4:	200004bc 	.word	0x200004bc

08001bf8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001c04:	230a      	movs	r3, #10
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	1cfb      	adds	r3, r7, #3
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	2200      	movs	r2, #0
 8001c14:	2178      	movs	r1, #120	@ 0x78
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f001 fe32 	bl	8003880 <HAL_I2C_Mem_Write>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001c30:	2064      	movs	r0, #100	@ 0x64
 8001c32:	f000 fcfb 	bl	800262c <HAL_Delay>
    int status = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001c3a:	21ae      	movs	r1, #174	@ 0xae
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffdb 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffd2 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001c5e:	2110      	movs	r1, #16
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffc9 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001c70:	21b0      	movs	r1, #176	@ 0xb0
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffc0 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001c82:	21c8      	movs	r1, #200	@ 0xc8
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffb7 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffae 	bl	8001bf8 <ssd1306_WriteCommand>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffa5 	bl	8001bf8 <ssd1306_WriteCommand>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001cb8:	2140      	movs	r1, #64	@ 0x40
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff9c 	bl	8001bf8 <ssd1306_WriteCommand>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001cca:	2181      	movs	r1, #129	@ 0x81
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff93 	bl	8001bf8 <ssd1306_WriteCommand>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001cdc:	21ff      	movs	r1, #255	@ 0xff
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff8a 	bl	8001bf8 <ssd1306_WriteCommand>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001cee:	21a1      	movs	r1, #161	@ 0xa1
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff81 	bl	8001bf8 <ssd1306_WriteCommand>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001d00:	21a6      	movs	r1, #166	@ 0xa6
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff78 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001d12:	21a8      	movs	r1, #168	@ 0xa8
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff6f 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001d24:	213f      	movs	r1, #63	@ 0x3f
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff66 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d36:	21a4      	movs	r1, #164	@ 0xa4
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff5d 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001d48:	21d3      	movs	r1, #211	@ 0xd3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff54 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff4b 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001d6c:	21d5      	movs	r1, #213	@ 0xd5
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff42 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001d7e:	21f0      	movs	r1, #240	@ 0xf0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff39 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001d90:	21d9      	movs	r1, #217	@ 0xd9
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff30 	bl	8001bf8 <ssd1306_WriteCommand>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001da2:	2122      	movs	r1, #34	@ 0x22
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff27 	bl	8001bf8 <ssd1306_WriteCommand>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001db4:	21da      	movs	r1, #218	@ 0xda
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff1e 	bl	8001bf8 <ssd1306_WriteCommand>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001dc6:	2112      	movs	r1, #18
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff15 	bl	8001bf8 <ssd1306_WriteCommand>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001dd8:	21db      	movs	r1, #219	@ 0xdb
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff0c 	bl	8001bf8 <ssd1306_WriteCommand>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001dea:	2120      	movs	r1, #32
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff03 	bl	8001bf8 <ssd1306_WriteCommand>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001dfc:	218d      	movs	r1, #141	@ 0x8d
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fefa 	bl	8001bf8 <ssd1306_WriteCommand>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001e0e:	2114      	movs	r1, #20
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fef1 	bl	8001bf8 <ssd1306_WriteCommand>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001e20:	21af      	movs	r1, #175	@ 0xaf
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fee8 	bl	8001bf8 <ssd1306_WriteCommand>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <ssd1306_Init+0x214>
        return 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e00f      	b.n	8001e5c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f813 	bl	8001e68 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f832 	bl	8001eac <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <ssd1306_Init+0x23c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <ssd1306_Init+0x23c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <ssd1306_Init+0x23c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	715a      	strb	r2, [r3, #5]

    return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000924 	.word	0x20000924

08001e68 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00d      	b.n	8001e94 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <ssd1306_Fill+0x1a>
 8001e7e:	2100      	movs	r1, #0
 8001e80:	e000      	b.n	8001e84 <ssd1306_Fill+0x1c>
 8001e82:	21ff      	movs	r1, #255	@ 0xff
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <ssd1306_Fill+0x40>)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	460a      	mov	r2, r1
 8001e8c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9a:	d3ed      	bcc.n	8001e78 <ssd1306_Fill+0x10>
    }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000524 	.word	0x20000524

08001eac <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e020      	b.n	8001efc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3b50      	subs	r3, #80	@ 0x50
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe98 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe94 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fe90 	bl	8001bf8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	4a0b      	ldr	r2, [pc, #44]	@ (8001f0c <ssd1306_UpdateScreen+0x60>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	2264      	movs	r2, #100	@ 0x64
 8001ee2:	9202      	str	r2, [sp, #8]
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	2240      	movs	r2, #64	@ 0x40
 8001eee:	2178      	movs	r1, #120	@ 0x78
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f001 fcc5 	bl	8003880 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	d9db      	bls.n	8001eba <ssd1306_UpdateScreen+0xe>
    }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000524 	.word	0x20000524

08001f10 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	71bb      	strb	r3, [r7, #6]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db48      	blt.n	8001fbc <ssd1306_DrawPixel+0xac>
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f2e:	d845      	bhi.n	8001fbc <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <ssd1306_DrawPixel+0xb8>)
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001f46:	797b      	ldrb	r3, [r7, #5]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11a      	bne.n	8001f82 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	b2d8      	uxtb	r0, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	01db      	lsls	r3, r3, #7
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <ssd1306_DrawPixel+0xbc>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	b25a      	sxtb	r2, r3
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b259      	sxtb	r1, r3
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	4603      	mov	r3, r0
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <ssd1306_DrawPixel+0xbc>)
 8001f7e:	54d1      	strb	r1, [r2, r3]
 8001f80:	e01d      	b.n	8001fbe <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	b2d8      	uxtb	r0, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	01db      	lsls	r3, r3, #7
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <ssd1306_DrawPixel+0xbc>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	b25a      	sxtb	r2, r3
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b259      	sxtb	r1, r3
 8001fac:	79fa      	ldrb	r2, [r7, #7]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	01db      	lsls	r3, r3, #7
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2c9      	uxtb	r1, r1
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <ssd1306_DrawPixel+0xbc>)
 8001fb8:	54d1      	strb	r1, [r2, r3]
 8001fba:	e000      	b.n	8001fbe <ssd1306_DrawPixel+0xae>
        return;
 8001fbc:	bf00      	nop
    }
}
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000924 	.word	0x20000924
 8001fcc:	20000524 	.word	0x20000524

08001fd0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	1d38      	adds	r0, r7, #4
 8001fda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4623      	mov	r3, r4
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fe8:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	793b      	ldrb	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ff4:	dc06      	bgt.n	8002004 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001ff6:	4b35      	ldr	r3, [pc, #212]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 8001ff8:	885b      	ldrh	r3, [r3, #2]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002000:	2b3f      	cmp	r3, #63	@ 0x3f
 8002002:	dd01      	ble.n	8002008 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002004:	2300      	movs	r3, #0
 8002006:	e05c      	b.n	80020c2 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	e04c      	b.n	80020a8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3b20      	subs	r3, #32
 8002014:	7979      	ldrb	r1, [r7, #5]
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4619      	mov	r1, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	440b      	add	r3, r1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	e034      	b.n	8002098 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	b2d8      	uxtb	r0, r3
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 800204e:	885b      	ldrh	r3, [r3, #2]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4413      	add	r3, r2
 8002058:	b2db      	uxtb	r3, r3
 800205a:	7bba      	ldrb	r2, [r7, #14]
 800205c:	4619      	mov	r1, r3
 800205e:	f7ff ff57 	bl	8001f10 <ssd1306_DrawPixel>
 8002062:	e016      	b.n	8002092 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 8002074:	885b      	ldrh	r3, [r3, #2]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4413      	add	r3, r2
 800207e:	b2d9      	uxtb	r1, r3
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	f7ff ff3f 	bl	8001f10 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	3301      	adds	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	793b      	ldrb	r3, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	4293      	cmp	r3, r2
 80020a0:	d3c5      	bcc.n	800202e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	797b      	ldrb	r3, [r7, #5]
 80020aa:	461a      	mov	r2, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d3ad      	bcc.n	800200e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	793a      	ldrb	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <ssd1306_WriteChar+0xfc>)
 80020be:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000924 	.word	0x20000924

080020d0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	1d38      	adds	r0, r7, #4
 80020da:	e880 0006 	stmia.w	r0, {r1, r2}
 80020de:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80020e0:	e012      	b.n	8002108 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	7818      	ldrb	r0, [r3, #0]
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	1d3a      	adds	r2, r7, #4
 80020ea:	ca06      	ldmia	r2, {r1, r2}
 80020ec:	f7ff ff70 	bl	8001fd0 <ssd1306_WriteChar>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d002      	beq.n	8002102 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	e008      	b.n	8002114 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e8      	bne.n	80020e2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	781b      	ldrb	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	460a      	mov	r2, r1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	4613      	mov	r3, r2
 800212a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <ssd1306_SetCursor+0x2c>)
 8002132:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <ssd1306_SetCursor+0x2c>)
 800213a:	805a      	strh	r2, [r3, #2]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000924 	.word	0x20000924

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_MspInit+0x68>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_MspInit+0x68>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_MspInit+0x68>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_MspInit+0x68>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a11      	ldr	r2, [pc, #68]	@ (80021b4 <HAL_MspInit+0x68>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_MspInit+0x68>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	210f      	movs	r1, #15
 8002186:	f06f 0001 	mvn.w	r0, #1
 800218a:	f000 fb5f 	bl	800284c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_MspInit+0x6c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_MspInit+0x6c>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <NMI_Handler+0x4>

080021c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <MemManage_Handler+0x4>

080021d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f000 f9fe 	bl	80025f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80021f8:	f006 ff40 	bl	800907c <xTaskGetSchedulerState>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002202:	f007 fca9 	bl	8009b58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <RTC_IRQHandler+0x10>)
 8002212:	f003 fdb3 	bl	8005d7c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200004a8 	.word	0x200004a8

08002220 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <DMA1_Channel6_IRQHandler+0x10>)
 8002226:	f000 fd83 	bl	8002d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200009c0 	.word	0x200009c0

08002234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <USART1_IRQHandler+0x10>)
 800223a:	f004 f911 	bl	8006460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000930 	.word	0x20000930

08002248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <USART2_IRQHandler+0x10>)
 800224e:	f004 f907 	bl	8006460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000978 	.word	0x20000978

0800225c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <RTC_Alarm_IRQHandler+0x10>)
 8002262:	f003 fabf 	bl	80057e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200004a8 	.word	0x200004a8

08002270 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002274:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002278:	f001 f928 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f007 ff02 	bl	800a0b8 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20005000 	.word	0x20005000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	2000092c 	.word	0x2000092c
 80022e8:	20002498 	.word	0x20002498

080022ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <MX_USART1_UART_Init+0x50>)
 8002300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 8002304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <MX_USART1_UART_Init+0x4c>)
 8002330:	f003 fd6e 	bl	8005e10 <HAL_UART_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800233a:	f7fe fded 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000930 	.word	0x20000930
 8002348:	40013800 	.word	0x40013800

0800234c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	@ (800239c <MX_USART2_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002384:	f003 fd44 	bl	8005e10 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f7fe fdc3 	bl	8000f18 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000978 	.word	0x20000978
 800239c:	40004400 	.word	0x40004400

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_UART_MspInit+0x164>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d13a      	bne.n	8002436 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c0:	4b51      	ldr	r3, [pc, #324]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a50      	ldr	r2, [pc, #320]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b48      	ldr	r3, [pc, #288]	@ (8002508 <HAL_UART_MspInit+0x168>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	4619      	mov	r1, r3
 8002404:	4841      	ldr	r0, [pc, #260]	@ (800250c <HAL_UART_MspInit+0x16c>)
 8002406:	f000 fdc7 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800240a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0318 	add.w	r3, r7, #24
 800241c:	4619      	mov	r1, r3
 800241e:	483b      	ldr	r0, [pc, #236]	@ (800250c <HAL_UART_MspInit+0x16c>)
 8002420:	f000 fdba 	bl	8002f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	2025      	movs	r0, #37	@ 0x25
 800242a:	f000 fa0f 	bl	800284c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800242e:	2025      	movs	r0, #37	@ 0x25
 8002430:	f000 fa38 	bl	80028a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002434:	e062      	b.n	80024fc <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a35      	ldr	r2, [pc, #212]	@ (8002510 <HAL_UART_MspInit+0x170>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d15d      	bne.n	80024fc <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002440:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <HAL_UART_MspInit+0x168>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	4a30      	ldr	r2, [pc, #192]	@ (8002508 <HAL_UART_MspInit+0x168>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244a:	61d3      	str	r3, [r2, #28]
 800244c:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <HAL_UART_MspInit+0x168>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_UART_MspInit+0x168>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_UART_MspInit+0x168>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_UART_MspInit+0x168>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002470:	2304      	movs	r3, #4
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4619      	mov	r1, r3
 8002482:	4822      	ldr	r0, [pc, #136]	@ (800250c <HAL_UART_MspInit+0x16c>)
 8002484:	f000 fd88 	bl	8002f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002488:	2308      	movs	r3, #8
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	4619      	mov	r1, r3
 800249a:	481c      	ldr	r0, [pc, #112]	@ (800250c <HAL_UART_MspInit+0x16c>)
 800249c:	f000 fd7c 	bl	8002f98 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80024a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002518 <HAL_UART_MspInit+0x178>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b8:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024d0:	4810      	ldr	r0, [pc, #64]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024d2:	f000 fa0b 	bl	80028ec <HAL_DMA_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80024dc:	f7fe fd1c 	bl	8000f18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002514 <HAL_UART_MspInit+0x174>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2105      	movs	r1, #5
 80024f0:	2026      	movs	r0, #38	@ 0x26
 80024f2:	f000 f9ab 	bl	800284c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f6:	2026      	movs	r0, #38	@ 0x26
 80024f8:	f000 f9d4 	bl	80028a4 <HAL_NVIC_EnableIRQ>
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40013800 	.word	0x40013800
 8002508:	40021000 	.word	0x40021000
 800250c:	40010800 	.word	0x40010800
 8002510:	40004400 	.word	0x40004400
 8002514:	200009c0 	.word	0x200009c0
 8002518:	4002006c 	.word	0x4002006c

0800251c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800251c:	f7ff fee6 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002520:	480b      	ldr	r0, [pc, #44]	@ (8002550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002522:	490c      	ldr	r1, [pc, #48]	@ (8002554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002538:	4c09      	ldr	r4, [pc, #36]	@ (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002546:	f007 fdbd 	bl	800a0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254a:	f7fe fab5 	bl	8000ab8 <main>
  bx lr
 800254e:	4770      	bx	lr
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8002558:	0800b7fc 	.word	0x0800b7fc
  ldr r2, =_sbss
 800255c:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8002560:	20002498 	.word	0x20002498

08002564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_2_IRQHandler>
	...

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <HAL_Init+0x28>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <HAL_Init+0x28>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 f947 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fde2 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f98e 	bl	80028d4 <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 f93c 	bl	800284c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000244 	.word	0x20000244
 80025ec:	2000024c 	.word	0x2000024c
 80025f0:	20000248 	.word	0x20000248

080025f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_IncTick+0x1c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_IncTick+0x20>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a03      	ldr	r2, [pc, #12]	@ (8002614 <HAL_IncTick+0x20>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	2000024c 	.word	0x2000024c
 8002614:	20000a04 	.word	0x20000a04

08002618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b02      	ldr	r3, [pc, #8]	@ (8002628 <HAL_GetTick+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000a04 	.word	0x20000a04

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fff0 	bl	8002618 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffe0 	bl	8002618 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000024c 	.word	0x2000024c

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4906      	ldr	r1, [pc, #24]	@ (800270c <__NVIC_EnableIRQ+0x34>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	@ (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff90 	bl	8002710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b07      	cmp	r3, #7
 8002818:	d00f      	beq.n	800283a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d00c      	beq.n	800283a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d009      	beq.n	800283a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d006      	beq.n	800283a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d003      	beq.n	800283a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002832:	2191      	movs	r1, #145	@ 0x91
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002836:	f7fe fb75 	bl	8000f24 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff1a 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	0800addc 	.word	0x0800addc

0800284c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d903      	bls.n	800286c <HAL_NVIC_SetPriority+0x20>
 8002864:	21a9      	movs	r1, #169	@ 0xa9
 8002866:	480e      	ldr	r0, [pc, #56]	@ (80028a0 <HAL_NVIC_SetPriority+0x54>)
 8002868:	f7fe fb5c 	bl	8000f24 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d903      	bls.n	800287a <HAL_NVIC_SetPriority+0x2e>
 8002872:	21aa      	movs	r1, #170	@ 0xaa
 8002874:	480a      	ldr	r0, [pc, #40]	@ (80028a0 <HAL_NVIC_SetPriority+0x54>)
 8002876:	f7fe fb55 	bl	8000f24 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287a:	f7ff ff1f 	bl	80026bc <__NVIC_GetPriorityGrouping>
 800287e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7ff ff6d 	bl	8002764 <NVIC_EncodePriority>
 800288a:	4602      	mov	r2, r0
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff3c 	bl	8002710 <__NVIC_SetPriority>
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800addc 	.word	0x0800addc

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da03      	bge.n	80028be <HAL_NVIC_EnableIRQ+0x1a>
 80028b6:	21bd      	movs	r1, #189	@ 0xbd
 80028b8:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <HAL_NVIC_EnableIRQ+0x2c>)
 80028ba:	f7fe fb33 	bl	8000f24 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff08 	bl	80026d8 <__NVIC_EnableIRQ>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	0800addc 	.word	0x0800addc

080028d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff73 	bl	80027c8 <SysTick_Config>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0da      	b.n	8002ab8 <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac0 <HAL_DMA_Init+0x1d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d021      	beq.n	8002950 <HAL_DMA_Init+0x64>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac4 <HAL_DMA_Init+0x1d8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01c      	beq.n	8002950 <HAL_DMA_Init+0x64>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ac8 <HAL_DMA_Init+0x1dc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d017      	beq.n	8002950 <HAL_DMA_Init+0x64>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a69      	ldr	r2, [pc, #420]	@ (8002acc <HAL_DMA_Init+0x1e0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d012      	beq.n	8002950 <HAL_DMA_Init+0x64>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a68      	ldr	r2, [pc, #416]	@ (8002ad0 <HAL_DMA_Init+0x1e4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_DMA_Init+0x64>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a66      	ldr	r2, [pc, #408]	@ (8002ad4 <HAL_DMA_Init+0x1e8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Init+0x64>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a65      	ldr	r2, [pc, #404]	@ (8002ad8 <HAL_DMA_Init+0x1ec>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <HAL_DMA_Init+0x64>
 8002948:	2199      	movs	r1, #153	@ 0x99
 800294a:	4864      	ldr	r0, [pc, #400]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 800294c:	f7fe faea 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_DMA_Init+0x86>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b10      	cmp	r3, #16
 800295e:	d008      	beq.n	8002972 <HAL_DMA_Init+0x86>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002968:	d003      	beq.n	8002972 <HAL_DMA_Init+0x86>
 800296a:	219a      	movs	r1, #154	@ 0x9a
 800296c:	485b      	ldr	r0, [pc, #364]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 800296e:	f7fe fad9 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b40      	cmp	r3, #64	@ 0x40
 8002978:	d007      	beq.n	800298a <HAL_DMA_Init+0x9e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_DMA_Init+0x9e>
 8002982:	219b      	movs	r1, #155	@ 0x9b
 8002984:	4855      	ldr	r0, [pc, #340]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 8002986:	f7fe facd 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b80      	cmp	r3, #128	@ 0x80
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_Init+0xb6>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_DMA_Init+0xb6>
 800299a:	219c      	movs	r1, #156	@ 0x9c
 800299c:	484f      	ldr	r0, [pc, #316]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 800299e:	f7fe fac1 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_DMA_Init+0xda>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Init+0xda>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d003      	beq.n	80029c6 <HAL_DMA_Init+0xda>
 80029be:	219d      	movs	r1, #157	@ 0x9d
 80029c0:	4846      	ldr	r0, [pc, #280]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 80029c2:	f7fe faaf 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_DMA_Init+0xfe>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Init+0xfe>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e0:	d003      	beq.n	80029ea <HAL_DMA_Init+0xfe>
 80029e2:	219e      	movs	r1, #158	@ 0x9e
 80029e4:	483d      	ldr	r0, [pc, #244]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 80029e6:	f7fe fa9d 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_DMA_Init+0x116>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d003      	beq.n	8002a02 <HAL_DMA_Init+0x116>
 80029fa:	219f      	movs	r1, #159	@ 0x9f
 80029fc:	4837      	ldr	r0, [pc, #220]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 80029fe:	f7fe fa91 	bl	8000f24 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_DMA_Init+0x144>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a12:	d00d      	beq.n	8002a30 <HAL_DMA_Init+0x144>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1c:	d008      	beq.n	8002a30 <HAL_DMA_Init+0x144>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_Init+0x144>
 8002a28:	21a0      	movs	r1, #160	@ 0xa0
 8002a2a:	482c      	ldr	r0, [pc, #176]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 8002a2c:	f7fe fa7a 	bl	8000f24 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae0 <HAL_DMA_Init+0x1f4>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae4 <HAL_DMA_Init+0x1f8>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ae8 <HAL_DMA_Init+0x1fc>)
 8002a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a64:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40020008 	.word	0x40020008
 8002ac4:	4002001c 	.word	0x4002001c
 8002ac8:	40020030 	.word	0x40020030
 8002acc:	40020044 	.word	0x40020044
 8002ad0:	40020058 	.word	0x40020058
 8002ad4:	4002006c 	.word	0x4002006c
 8002ad8:	40020080 	.word	0x40020080
 8002adc:	0800ae18 	.word	0x0800ae18
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_Start_IT+0x20>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0a:	d304      	bcc.n	8002b16 <HAL_DMA_Start_IT+0x2a>
 8002b0c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8002b10:	482c      	ldr	r0, [pc, #176]	@ (8002bc4 <HAL_DMA_Start_IT+0xd8>)
 8002b12:	f7fe fa07 	bl	8000f24 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA_Start_IT+0x38>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e04b      	b.n	8002bbc <HAL_DMA_Start_IT+0xd0>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d13a      	bne.n	8002bae <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f9ed 	bl	8002f3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 020e 	orr.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00f      	b.n	8002b9c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0204 	bic.w	r2, r2, #4
 8002b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 020a 	orr.w	r2, r2, #10
 8002b9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e005      	b.n	8002bba <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	0800ae18 	.word	0x0800ae18

08002bc8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e020      	b.n	8002c34 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 020e 	bic.w	r2, r2, #14
 8002c00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d005      	beq.n	8002c64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e051      	b.n	8002d08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 020e 	bic.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	@ (8002d14 <HAL_DMA_Abort_IT+0xd4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d029      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0xa2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <HAL_DMA_Abort_IT+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_Abort_IT+0x9e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <HAL_DMA_Abort_IT+0xdc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x98>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <HAL_DMA_Abort_IT+0xe0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d012      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x92>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <HAL_DMA_Abort_IT+0xe4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00a      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x8c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1b      	ldr	r2, [pc, #108]	@ (8002d28 <HAL_DMA_Abort_IT+0xe8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_DMA_Abort_IT+0x86>
 8002cc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cc4:	e00e      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002cc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cca:	e00b      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cd0:	e008      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd6:	e005      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cdc:	e002      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002cde:	2310      	movs	r3, #16
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMA_Abort_IT+0xa4>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <HAL_DMA_Abort_IT+0xec>)
 8002ce6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
    } 
  }
  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40020008 	.word	0x40020008
 8002d18:	4002001c 	.word	0x4002001c
 8002d1c:	40020030 	.word	0x40020030
 8002d20:	40020044 	.word	0x40020044
 8002d24:	40020058 	.word	0x40020058
 8002d28:	4002006c 	.word	0x4002006c
 8002d2c:	40020000 	.word	0x40020000

08002d30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d04f      	beq.n	8002df8 <HAL_DMA_IRQHandler+0xc8>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d04a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a66      	ldr	r2, [pc, #408]	@ (8002f20 <HAL_DMA_IRQHandler+0x1f0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d029      	beq.n	8002dde <HAL_DMA_IRQHandler+0xae>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_DMA_IRQHandler+0x1f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_IRQHandler+0xaa>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a63      	ldr	r2, [pc, #396]	@ (8002f28 <HAL_DMA_IRQHandler+0x1f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xa4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a62      	ldr	r2, [pc, #392]	@ (8002f2c <HAL_DMA_IRQHandler+0x1fc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d012      	beq.n	8002dce <HAL_DMA_IRQHandler+0x9e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <HAL_DMA_IRQHandler+0x200>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00a      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x98>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f34 <HAL_DMA_IRQHandler+0x204>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0x92>
 8002dbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dc0:	e00e      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002dc6:	e00b      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002dcc:	e008      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dd2:	e005      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd8:	e002      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dda:	2340      	movs	r3, #64	@ 0x40
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_IRQHandler+0xb0>
 8002dde:	2304      	movs	r3, #4
 8002de0:	4a55      	ldr	r2, [pc, #340]	@ (8002f38 <HAL_DMA_IRQHandler+0x208>)
 8002de2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8094 	beq.w	8002f16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002df6:	e08e      	b.n	8002f16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d056      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x186>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d051      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 020a 	bic.w	r2, r2, #10
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a38      	ldr	r2, [pc, #224]	@ (8002f20 <HAL_DMA_IRQHandler+0x1f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d029      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x166>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a37      	ldr	r2, [pc, #220]	@ (8002f24 <HAL_DMA_IRQHandler+0x1f4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x162>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a35      	ldr	r2, [pc, #212]	@ (8002f28 <HAL_DMA_IRQHandler+0x1f8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x15c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a34      	ldr	r2, [pc, #208]	@ (8002f2c <HAL_DMA_IRQHandler+0x1fc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d012      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x156>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a32      	ldr	r2, [pc, #200]	@ (8002f30 <HAL_DMA_IRQHandler+0x200>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x150>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a31      	ldr	r2, [pc, #196]	@ (8002f34 <HAL_DMA_IRQHandler+0x204>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x14a>
 8002e74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e78:	e00e      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7e:	e00b      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e84:	e008      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e8a:	e005      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e90:	e002      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e92:	2320      	movs	r3, #32
 8002e94:	e000      	b.n	8002e98 <HAL_DMA_IRQHandler+0x168>
 8002e96:	2302      	movs	r3, #2
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <HAL_DMA_IRQHandler+0x208>)
 8002e9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d034      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002eb4:	e02f      	b.n	8002f16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2208      	movs	r2, #8
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d028      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x1e8>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020e 	bic.w	r2, r2, #14
 8002ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
    }
  }
  return;
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
}
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020008 	.word	0x40020008
 8002f24:	4002001c 	.word	0x4002001c
 8002f28:	40020030 	.word	0x40020030
 8002f2c:	40020044 	.word	0x40020044
 8002f30:	40020058 	.word	0x40020058
 8002f34:	4002006c 	.word	0x4002006c
 8002f38:	40020000 	.word	0x40020000

08002f3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f52:	2101      	movs	r1, #1
 8002f54:	fa01 f202 	lsl.w	r2, r1, r2
 8002f58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d108      	bne.n	8002f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f7a:	e007      	b.n	8002f8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	@ 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a96      	ldr	r2, [pc, #600]	@ (8003208 <HAL_GPIO_Init+0x270>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x42>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a95      	ldr	r2, [pc, #596]	@ (800320c <HAL_GPIO_Init+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <HAL_GPIO_Init+0x42>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a94      	ldr	r2, [pc, #592]	@ (8003210 <HAL_GPIO_Init+0x278>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <HAL_GPIO_Init+0x42>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a93      	ldr	r2, [pc, #588]	@ (8003214 <HAL_GPIO_Init+0x27c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x42>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a92      	ldr	r2, [pc, #584]	@ (8003218 <HAL_GPIO_Init+0x280>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x42>
 8002fd2:	21bd      	movs	r1, #189	@ 0xbd
 8002fd4:	4891      	ldr	r0, [pc, #580]	@ (800321c <HAL_GPIO_Init+0x284>)
 8002fd6:	f7fd ffa5 	bl	8000f24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_GPIO_Init+0x56>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fec:	d303      	bcc.n	8002ff6 <HAL_GPIO_Init+0x5e>
 8002fee:	21be      	movs	r1, #190	@ 0xbe
 8002ff0:	488a      	ldr	r0, [pc, #552]	@ (800321c <HAL_GPIO_Init+0x284>)
 8002ff2:	f7fd ff97 	bl	8000f24 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 821d 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	f000 8218 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b11      	cmp	r3, #17
 8003010:	f000 8213 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	f000 820e 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b12      	cmp	r3, #18
 8003024:	f000 8209 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a7c      	ldr	r2, [pc, #496]	@ (8003220 <HAL_GPIO_Init+0x288>)
 800302e:	4293      	cmp	r3, r2
 8003030:	f000 8203 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a7a      	ldr	r2, [pc, #488]	@ (8003224 <HAL_GPIO_Init+0x28c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f000 81fd 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a78      	ldr	r2, [pc, #480]	@ (8003228 <HAL_GPIO_Init+0x290>)
 8003046:	4293      	cmp	r3, r2
 8003048:	f000 81f7 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a76      	ldr	r2, [pc, #472]	@ (800322c <HAL_GPIO_Init+0x294>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f000 81f1 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a74      	ldr	r2, [pc, #464]	@ (8003230 <HAL_GPIO_Init+0x298>)
 800305e:	4293      	cmp	r3, r2
 8003060:	f000 81eb 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a72      	ldr	r2, [pc, #456]	@ (8003234 <HAL_GPIO_Init+0x29c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f000 81e5 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b03      	cmp	r3, #3
 8003076:	f000 81e0 	beq.w	800343a <HAL_GPIO_Init+0x4a2>
 800307a:	21bf      	movs	r1, #191	@ 0xbf
 800307c:	4867      	ldr	r0, [pc, #412]	@ (800321c <HAL_GPIO_Init+0x284>)
 800307e:	f7fd ff51 	bl	8000f24 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e1da      	b.n	800343a <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003084:	2201      	movs	r2, #1
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 81c9 	bne.w	8003434 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_GPIO_Init+0x270>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_GPIO_Init+0x13a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a57      	ldr	r2, [pc, #348]	@ (800320c <HAL_GPIO_Init+0x274>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <HAL_GPIO_Init+0x13a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <HAL_GPIO_Init+0x278>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <HAL_GPIO_Init+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a55      	ldr	r2, [pc, #340]	@ (8003214 <HAL_GPIO_Init+0x27c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x13a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a54      	ldr	r2, [pc, #336]	@ (8003218 <HAL_GPIO_Init+0x280>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x13a>
 80030ca:	21cd      	movs	r1, #205	@ 0xcd
 80030cc:	4853      	ldr	r0, [pc, #332]	@ (800321c <HAL_GPIO_Init+0x284>)
 80030ce:	f7fd ff29 	bl	8000f24 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a57      	ldr	r2, [pc, #348]	@ (8003234 <HAL_GPIO_Init+0x29c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f000 80c2 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
 80030de:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_GPIO_Init+0x29c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f200 80e8 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 80030e6:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <HAL_GPIO_Init+0x290>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	f000 80ba 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
 80030ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003228 <HAL_GPIO_Init+0x290>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	f200 80e0 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 80030f6:	4a4e      	ldr	r2, [pc, #312]	@ (8003230 <HAL_GPIO_Init+0x298>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	f000 80b2 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
 80030fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003230 <HAL_GPIO_Init+0x298>)
 8003100:	4293      	cmp	r3, r2
 8003102:	f200 80d8 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 8003106:	4a47      	ldr	r2, [pc, #284]	@ (8003224 <HAL_GPIO_Init+0x28c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	f000 80aa 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
 800310e:	4a45      	ldr	r2, [pc, #276]	@ (8003224 <HAL_GPIO_Init+0x28c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	f200 80d0 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 8003116:	4a45      	ldr	r2, [pc, #276]	@ (800322c <HAL_GPIO_Init+0x294>)
 8003118:	4293      	cmp	r3, r2
 800311a:	f000 80a2 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
 800311e:	4a43      	ldr	r2, [pc, #268]	@ (800322c <HAL_GPIO_Init+0x294>)
 8003120:	4293      	cmp	r3, r2
 8003122:	f200 80c8 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 8003126:	2b12      	cmp	r3, #18
 8003128:	d82c      	bhi.n	8003184 <HAL_GPIO_Init+0x1ec>
 800312a:	2b12      	cmp	r3, #18
 800312c:	f200 80c3 	bhi.w	80032b6 <HAL_GPIO_Init+0x31e>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_GPIO_Init+0x1a0>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003263 	.word	0x08003263
 800313c:	0800318d 	.word	0x0800318d
 8003140:	080031df 	.word	0x080031df
 8003144:	080032b1 	.word	0x080032b1
 8003148:	080032b7 	.word	0x080032b7
 800314c:	080032b7 	.word	0x080032b7
 8003150:	080032b7 	.word	0x080032b7
 8003154:	080032b7 	.word	0x080032b7
 8003158:	080032b7 	.word	0x080032b7
 800315c:	080032b7 	.word	0x080032b7
 8003160:	080032b7 	.word	0x080032b7
 8003164:	080032b7 	.word	0x080032b7
 8003168:	080032b7 	.word	0x080032b7
 800316c:	080032b7 	.word	0x080032b7
 8003170:	080032b7 	.word	0x080032b7
 8003174:	080032b7 	.word	0x080032b7
 8003178:	080032b7 	.word	0x080032b7
 800317c:	080031b5 	.word	0x080031b5
 8003180:	08003239 	.word	0x08003239
 8003184:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <HAL_GPIO_Init+0x288>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d06b      	beq.n	8003262 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800318a:	e094      	b.n	80032b6 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d00b      	beq.n	80031ac <HAL_GPIO_Init+0x214>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x214>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x214>
 80031a4:	21d5      	movs	r1, #213	@ 0xd5
 80031a6:	481d      	ldr	r0, [pc, #116]	@ (800321c <HAL_GPIO_Init+0x284>)
 80031a8:	f7fd febc 	bl	8000f24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	623b      	str	r3, [r7, #32]
          break;
 80031b2:	e081      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d00b      	beq.n	80031d4 <HAL_GPIO_Init+0x23c>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_GPIO_Init+0x23c>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x23c>
 80031cc:	21dc      	movs	r1, #220	@ 0xdc
 80031ce:	4813      	ldr	r0, [pc, #76]	@ (800321c <HAL_GPIO_Init+0x284>)
 80031d0:	f7fd fea8 	bl	8000f24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	3304      	adds	r3, #4
 80031da:	623b      	str	r3, [r7, #32]
          break;
 80031dc:	e06c      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d00b      	beq.n	80031fe <HAL_GPIO_Init+0x266>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x266>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x266>
 80031f6:	21e3      	movs	r1, #227	@ 0xe3
 80031f8:	4808      	ldr	r0, [pc, #32]	@ (800321c <HAL_GPIO_Init+0x284>)
 80031fa:	f7fd fe93 	bl	8000f24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	3308      	adds	r3, #8
 8003204:	623b      	str	r3, [r7, #32]
          break;
 8003206:	e057      	b.n	80032b8 <HAL_GPIO_Init+0x320>
 8003208:	40010800 	.word	0x40010800
 800320c:	40010c00 	.word	0x40010c00
 8003210:	40011000 	.word	0x40011000
 8003214:	40011400 	.word	0x40011400
 8003218:	40011800 	.word	0x40011800
 800321c:	0800ae50 	.word	0x0800ae50
 8003220:	10110000 	.word	0x10110000
 8003224:	10210000 	.word	0x10210000
 8003228:	10310000 	.word	0x10310000
 800322c:	10120000 	.word	0x10120000
 8003230:	10220000 	.word	0x10220000
 8003234:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d00b      	beq.n	8003258 <HAL_GPIO_Init+0x2c0>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d007      	beq.n	8003258 <HAL_GPIO_Init+0x2c0>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2c0>
 8003250:	21ea      	movs	r1, #234	@ 0xea
 8003252:	4880      	ldr	r0, [pc, #512]	@ (8003454 <HAL_GPIO_Init+0x4bc>)
 8003254:	f7fd fe66 	bl	8000f24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	330c      	adds	r3, #12
 800325e:	623b      	str	r3, [r7, #32]
          break;
 8003260:	e02a      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_GPIO_Init+0x2ea>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x2ea>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2ea>
 800327a:	21f7      	movs	r1, #247	@ 0xf7
 800327c:	4875      	ldr	r0, [pc, #468]	@ (8003454 <HAL_GPIO_Init+0x4bc>)
 800327e:	f7fd fe51 	bl	8000f24 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800328a:	2304      	movs	r3, #4
 800328c:	623b      	str	r3, [r7, #32]
          break;
 800328e:	e013      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003298:	2308      	movs	r3, #8
 800329a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	611a      	str	r2, [r3, #16]
          break;
 80032a2:	e009      	b.n	80032b8 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a4:	2308      	movs	r3, #8
 80032a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	615a      	str	r2, [r3, #20]
          break;
 80032ae:	e003      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
          break;
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x320>
          break;
 80032b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2bff      	cmp	r3, #255	@ 0xff
 80032bc:	d801      	bhi.n	80032c2 <HAL_GPIO_Init+0x32a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	e001      	b.n	80032c6 <HAL_GPIO_Init+0x32e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2bff      	cmp	r3, #255	@ 0xff
 80032cc:	d802      	bhi.n	80032d4 <HAL_GPIO_Init+0x33c>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	e002      	b.n	80032da <HAL_GPIO_Init+0x342>
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	3b08      	subs	r3, #8
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	210f      	movs	r1, #15
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8096 	beq.w	8003434 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_GPIO_Init+0x4c0>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_GPIO_Init+0x4c0>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <HAL_GPIO_Init+0x4c0>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003320:	4a4e      	ldr	r2, [pc, #312]	@ (800345c <HAL_GPIO_Init+0x4c4>)
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a46      	ldr	r2, [pc, #280]	@ (8003460 <HAL_GPIO_Init+0x4c8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_GPIO_Init+0x3dc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a45      	ldr	r2, [pc, #276]	@ (8003464 <HAL_GPIO_Init+0x4cc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00d      	beq.n	8003370 <HAL_GPIO_Init+0x3d8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a44      	ldr	r2, [pc, #272]	@ (8003468 <HAL_GPIO_Init+0x4d0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <HAL_GPIO_Init+0x3d4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a43      	ldr	r2, [pc, #268]	@ (800346c <HAL_GPIO_Init+0x4d4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_GPIO_Init+0x3d0>
 8003364:	2303      	movs	r3, #3
 8003366:	e006      	b.n	8003376 <HAL_GPIO_Init+0x3de>
 8003368:	2304      	movs	r3, #4
 800336a:	e004      	b.n	8003376 <HAL_GPIO_Init+0x3de>
 800336c:	2302      	movs	r3, #2
 800336e:	e002      	b.n	8003376 <HAL_GPIO_Init+0x3de>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_GPIO_Init+0x3de>
 8003374:	2300      	movs	r3, #0
 8003376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003378:	f002 0203 	and.w	r2, r2, #3
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	4093      	lsls	r3, r2
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003386:	4935      	ldr	r1, [pc, #212]	@ (800345c <HAL_GPIO_Init+0x4c4>)
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033a0:	4b33      	ldr	r3, [pc, #204]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4932      	ldr	r1, [pc, #200]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033ae:	4b30      	ldr	r3, [pc, #192]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	492e      	ldr	r1, [pc, #184]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033c8:	4b29      	ldr	r3, [pc, #164]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4928      	ldr	r1, [pc, #160]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033d6:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	43db      	mvns	r3, r3
 80033de:	4924      	ldr	r1, [pc, #144]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	491e      	ldr	r1, [pc, #120]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	43db      	mvns	r3, r3
 8003406:	491a      	ldr	r1, [pc, #104]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 8003408:	4013      	ands	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4914      	ldr	r1, [pc, #80]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	4910      	ldr	r1, [pc, #64]	@ (8003470 <HAL_GPIO_Init+0x4d8>)
 8003430:	4013      	ands	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	3301      	adds	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	f47f ae1d 	bne.w	8003084 <HAL_GPIO_Init+0xec>
  }
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	3728      	adds	r7, #40	@ 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	0800ae50 	.word	0x0800ae50
 8003458:	40021000 	.word	0x40021000
 800345c:	40010000 	.word	0x40010000
 8003460:	40010800 	.word	0x40010800
 8003464:	40010c00 	.word	0x40010c00
 8003468:	40011000 	.word	0x40011000
 800346c:	40011400 	.word	0x40011400
 8003470:	40010400 	.word	0x40010400

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_GPIO_WritePin+0x20>
 800348a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800348e:	480e      	ldr	r0, [pc, #56]	@ (80034c8 <HAL_GPIO_WritePin+0x54>)
 8003490:	f7fd fd48 	bl	8000f24 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_WritePin+0x36>
 800349a:	787b      	ldrb	r3, [r7, #1]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d004      	beq.n	80034aa <HAL_GPIO_WritePin+0x36>
 80034a0:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80034a4:	4808      	ldr	r0, [pc, #32]	@ (80034c8 <HAL_GPIO_WritePin+0x54>)
 80034a6:	f7fd fd3d 	bl	8000f24 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80034aa:	787b      	ldrb	r3, [r7, #1]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b0:	887a      	ldrh	r2, [r7, #2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034b6:	e003      	b.n	80034c0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	0800ae50 	.word	0x0800ae50

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e2:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f9f6 	bl	80008dc <HAL_GPIO_EXTI_Callback>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40010400 	.word	0x40010400

080034fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1b4      	b.n	8003878 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a9b      	ldr	r2, [pc, #620]	@ (8003780 <HAL_I2C_Init+0x284>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_I2C_Init+0x30>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a99      	ldr	r2, [pc, #612]	@ (8003784 <HAL_I2C_Init+0x288>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_I2C_Init+0x30>
 8003522:	f240 11db 	movw	r1, #475	@ 0x1db
 8003526:	4898      	ldr	r0, [pc, #608]	@ (8003788 <HAL_I2C_Init+0x28c>)
 8003528:	f7fd fcfc 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_I2C_Init+0x42>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a94      	ldr	r2, [pc, #592]	@ (800378c <HAL_I2C_Init+0x290>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d904      	bls.n	8003548 <HAL_I2C_Init+0x4c>
 800353e:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8003542:	4891      	ldr	r0, [pc, #580]	@ (8003788 <HAL_I2C_Init+0x28c>)
 8003544:	f7fd fcee 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_I2C_Init+0x68>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003558:	d004      	beq.n	8003564 <HAL_I2C_Init+0x68>
 800355a:	f240 11dd 	movw	r1, #477	@ 0x1dd
 800355e:	488a      	ldr	r0, [pc, #552]	@ (8003788 <HAL_I2C_Init+0x28c>)
 8003560:	f7fd fce0 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356c:	d304      	bcc.n	8003578 <HAL_I2C_Init+0x7c>
 800356e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003572:	4885      	ldr	r0, [pc, #532]	@ (8003788 <HAL_I2C_Init+0x28c>)
 8003574:	f7fd fcd6 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003580:	d009      	beq.n	8003596 <HAL_I2C_Init+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800358a:	d004      	beq.n	8003596 <HAL_I2C_Init+0x9a>
 800358c:	f240 11df 	movw	r1, #479	@ 0x1df
 8003590:	487d      	ldr	r0, [pc, #500]	@ (8003788 <HAL_I2C_Init+0x28c>)
 8003592:	f7fd fcc7 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_I2C_Init+0xb4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d004      	beq.n	80035b0 <HAL_I2C_Init+0xb4>
 80035a6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80035aa:	4877      	ldr	r0, [pc, #476]	@ (8003788 <HAL_I2C_Init+0x28c>)
 80035ac:	f7fd fcba 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <HAL_I2C_Init+0xca>
 80035bc:	f240 11e1 	movw	r1, #481	@ 0x1e1
 80035c0:	4871      	ldr	r0, [pc, #452]	@ (8003788 <HAL_I2C_Init+0x28c>)
 80035c2:	f7fd fcaf 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_I2C_Init+0xe4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d004      	beq.n	80035e0 <HAL_I2C_Init+0xe4>
 80035d6:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80035da:	486b      	ldr	r0, [pc, #428]	@ (8003788 <HAL_I2C_Init+0x28c>)
 80035dc:	f7fd fca2 	bl	8000f24 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_I2C_Init+0xfe>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	d004      	beq.n	80035fa <HAL_I2C_Init+0xfe>
 80035f0:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80035f4:	4864      	ldr	r0, [pc, #400]	@ (8003788 <HAL_I2C_Init+0x28c>)
 80035f6:	f7fd fc95 	bl	8000f24 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd f91a 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	@ 0x24
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800363a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800364a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800364c:	f001 f9f4 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a4e      	ldr	r2, [pc, #312]	@ (8003790 <HAL_I2C_Init+0x294>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d807      	bhi.n	800366c <HAL_I2C_Init+0x170>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a4d      	ldr	r2, [pc, #308]	@ (8003794 <HAL_I2C_Init+0x298>)
 8003660:	4293      	cmp	r3, r2
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e006      	b.n	800367a <HAL_I2C_Init+0x17e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <HAL_I2C_Init+0x29c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0fa      	b.n	8003878 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a45      	ldr	r2, [pc, #276]	@ (800379c <HAL_I2C_Init+0x2a0>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0c9b      	lsrs	r3, r3, #18
 800368c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a37      	ldr	r2, [pc, #220]	@ (8003790 <HAL_I2C_Init+0x294>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d802      	bhi.n	80036bc <HAL_I2C_Init+0x1c0>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e009      	b.n	80036d0 <HAL_I2C_Init+0x1d4>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <HAL_I2C_Init+0x2a4>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	3301      	adds	r3, #1
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4929      	ldr	r1, [pc, #164]	@ (8003790 <HAL_I2C_Init+0x294>)
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d819      	bhi.n	8003724 <HAL_I2C_Init+0x228>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e59      	subs	r1, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003704:	400b      	ands	r3, r1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_I2C_Init+0x224>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e59      	subs	r1, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fbb1 f3f3 	udiv	r3, r1, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	e064      	b.n	80037ea <HAL_I2C_Init+0x2ee>
 8003720:	2304      	movs	r3, #4
 8003722:	e062      	b.n	80037ea <HAL_I2C_Init+0x2ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <HAL_I2C_Init+0x254>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e012      	b.n	8003776 <HAL_I2C_Init+0x27a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d014      	beq.n	80037a4 <HAL_I2C_Init+0x2a8>
 800377a:	2301      	movs	r3, #1
 800377c:	e035      	b.n	80037ea <HAL_I2C_Init+0x2ee>
 800377e:	bf00      	nop
 8003780:	40005400 	.word	0x40005400
 8003784:	40005800 	.word	0x40005800
 8003788:	0800ae8c 	.word	0x0800ae8c
 800378c:	00061a80 	.word	0x00061a80
 8003790:	000186a0 	.word	0x000186a0
 8003794:	001e847f 	.word	0x001e847f
 8003798:	003d08ff 	.word	0x003d08ff
 800379c:	431bde83 	.word	0x431bde83
 80037a0:	10624dd3 	.word	0x10624dd3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10e      	bne.n	80037ca <HAL_I2C_Init+0x2ce>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037c8:	e00f      	b.n	80037ea <HAL_I2C_Init+0x2ee>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e58      	subs	r0, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	0099      	lsls	r1, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	6809      	ldr	r1, [r1, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003818:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6911      	ldr	r1, [r2, #16]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	430b      	orrs	r3, r1
 800382c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	4608      	mov	r0, r1
 800388a:	4611      	mov	r1, r2
 800388c:	461a      	mov	r2, r3
 800388e:	4603      	mov	r3, r0
 8003890:	817b      	strh	r3, [r7, #10]
 8003892:	460b      	mov	r3, r1
 8003894:	813b      	strh	r3, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800389a:	f7fe febd 	bl	8002618 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d007      	beq.n	80038b6 <HAL_I2C_Mem_Write+0x36>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d004      	beq.n	80038b6 <HAL_I2C_Mem_Write+0x36>
 80038ac:	f640 2106 	movw	r1, #2566	@ 0xa06
 80038b0:	4873      	ldr	r0, [pc, #460]	@ (8003a80 <HAL_I2C_Mem_Write+0x200>)
 80038b2:	f7fd fb37 	bl	8000f24 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	f040 80d9 	bne.w	8003a76 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2319      	movs	r3, #25
 80038ca:	2201      	movs	r2, #1
 80038cc:	496d      	ldr	r1, [pc, #436]	@ (8003a84 <HAL_I2C_Mem_Write+0x204>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f972 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	e0cc      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2C_Mem_Write+0x6c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0c5      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d007      	beq.n	8003912 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003920:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2221      	movs	r2, #33	@ 0x21
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2240      	movs	r2, #64	@ 0x40
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a4d      	ldr	r2, [pc, #308]	@ (8003a88 <HAL_I2C_Mem_Write+0x208>)
 8003952:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003954:	88f8      	ldrh	r0, [r7, #6]
 8003956:	893a      	ldrh	r2, [r7, #8]
 8003958:	8979      	ldrh	r1, [r7, #10]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4603      	mov	r3, r0
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f891 	bl	8003a8c <I2C_RequestMemoryWrite>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d052      	beq.n	8003a16 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e081      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fa37 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e06b      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d11b      	bne.n	8003a16 <HAL_I2C_Mem_Write+0x196>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d017      	beq.n	8003a16 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1aa      	bne.n	8003974 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa2a 	bl	8003e7c <I2C_WaitOnBTFFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e016      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	0800ae8c 	.word	0x0800ae8c
 8003a84:	00100002 	.word	0x00100002
 8003a88:	ffff0000 	.word	0xffff0000

08003a8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	4608      	mov	r0, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	813b      	strh	r3, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f878 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003adc:	d103      	bne.n	8003ae6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e05f      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003af8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	492d      	ldr	r1, [pc, #180]	@ (8003bb4 <I2C_RequestMemoryWrite+0x128>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f8d3 	bl	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e04c      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f95e 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02b      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	e021      	b.n	8003ba8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b64:	893b      	ldrh	r3, [r7, #8]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f938 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d107      	bne.n	8003b9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e005      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9e:	893b      	ldrh	r3, [r7, #8]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	00010002 	.word	0x00010002

08003bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc8:	e048      	b.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d044      	beq.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fd21 	bl	8002618 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d139      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10d      	bne.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	e00c      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	43da      	mvns	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d116      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e023      	b.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10d      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	e00c      	b.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d093      	beq.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cba:	e071      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cca:	d123      	bne.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e067      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d041      	beq.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fe fc7c 	bl	8002618 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d136      	bne.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10c      	bne.n	8003d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e00b      	b.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e021      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10c      	bne.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	43da      	mvns	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e00b      	b.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f af6d 	bne.w	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df8:	e034      	b.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f886 	bl	8003f0c <I2C_IsAcknowledgeFailed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e034      	b.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d028      	beq.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fe fc01 	bl	8002618 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11d      	bne.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b80      	cmp	r3, #128	@ 0x80
 8003e34:	d016      	beq.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6e:	2b80      	cmp	r3, #128	@ 0x80
 8003e70:	d1c3      	bne.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e88:	e034      	b.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f83e 	bl	8003f0c <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d028      	beq.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe fbb9 	bl	8002618 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11d      	bne.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d016      	beq.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e007      	b.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d1c3      	bne.n	8003e8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f22:	d11b      	bne.n	8003f5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	420e0020 	.word	0x420e0020

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e35a      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x54>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x54>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d110      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x54>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x54>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x54>
 8003fca:	f240 1165 	movw	r1, #357	@ 0x165
 8003fce:	488f      	ldr	r0, [pc, #572]	@ (800420c <HAL_RCC_OscConfig+0x28c>)
 8003fd0:	f7fc ffa8 	bl	8000f24 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 809a 	beq.w	8004116 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_RCC_OscConfig+0x88>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff2:	d009      	beq.n	8004008 <HAL_RCC_OscConfig+0x88>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ffc:	d004      	beq.n	8004008 <HAL_RCC_OscConfig+0x88>
 8003ffe:	f240 116b 	movw	r1, #363	@ 0x16b
 8004002:	4882      	ldr	r0, [pc, #520]	@ (800420c <HAL_RCC_OscConfig+0x28c>)
 8004004:	f7fc ff8e 	bl	8000f24 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004008:	4b81      	ldr	r3, [pc, #516]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b04      	cmp	r3, #4
 8004012:	d00c      	beq.n	800402e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d112      	bne.n	8004046 <HAL_RCC_OscConfig+0xc6>
 8004020:	4b7b      	ldr	r3, [pc, #492]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d10b      	bne.n	8004046 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402e:	4b78      	ldr	r3, [pc, #480]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06c      	beq.n	8004114 <HAL_RCC_OscConfig+0x194>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d168      	bne.n	8004114 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e300      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0xde>
 8004050:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6e      	ldr	r2, [pc, #440]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e02e      	b.n	80040bc <HAL_RCC_OscConfig+0x13c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x100>
 8004066:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b67      	ldr	r3, [pc, #412]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a66      	ldr	r2, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0x13c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x124>
 800408a:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a60      	ldr	r2, [pc, #384]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b5e      	ldr	r3, [pc, #376]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5d      	ldr	r2, [pc, #372]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0x13c>
 80040a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a59      	ldr	r2, [pc, #356]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b57      	ldr	r3, [pc, #348]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a56      	ldr	r2, [pc, #344]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe faa8 	bl	8002618 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe faa4 	bl	8002618 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e2b4      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b4c      	ldr	r3, [pc, #304]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x14c>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fa94 	bl	8002618 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fe fa90 	bl	8002618 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e2a0      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	4b42      	ldr	r3, [pc, #264]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x174>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8080 	beq.w	8004224 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_OscConfig+0x1be>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d004      	beq.n	800413e <HAL_RCC_OscConfig+0x1be>
 8004134:	f240 119f 	movw	r1, #415	@ 0x19f
 8004138:	4834      	ldr	r0, [pc, #208]	@ (800420c <HAL_RCC_OscConfig+0x28c>)
 800413a:	f7fc fef3 	bl	8000f24 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b1f      	cmp	r3, #31
 8004144:	d904      	bls.n	8004150 <HAL_RCC_OscConfig+0x1d0>
 8004146:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800414a:	4830      	ldr	r0, [pc, #192]	@ (800420c <HAL_RCC_OscConfig+0x28c>)
 800414c:	f7fc feea 	bl	8000f24 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004150:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800415c:	4b2c      	ldr	r3, [pc, #176]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d11c      	bne.n	80041a2 <HAL_RCC_OscConfig+0x222>
 8004168:	4b29      	ldr	r3, [pc, #164]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d116      	bne.n	80041a2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004174:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x20c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d001      	beq.n	800418c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e25d      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	491d      	ldr	r1, [pc, #116]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a0:	e040      	b.n	8004224 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <HAL_RCC_OscConfig+0x294>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fa32 	bl	8002618 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b8:	f7fe fa2e 	bl	8002618 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e23e      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490a      	ldr	r1, [pc, #40]	@ (8004210 <HAL_RCC_OscConfig+0x290>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
 80041ea:	e01b      	b.n	8004224 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ec:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_RCC_OscConfig+0x294>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fa11 	bl	8002618 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f8:	e00e      	b.n	8004218 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe fa0d 	bl	8002618 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d907      	bls.n	8004218 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e21d      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
 800420c:	0800aec4 	.word	0x0800aec4
 8004210:	40021000 	.word	0x40021000
 8004214:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004218:	4b7d      	ldr	r3, [pc, #500]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ea      	bne.n	80041fa <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d040      	beq.n	80042b2 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_OscConfig+0x2ca>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d004      	beq.n	800424a <HAL_RCC_OscConfig+0x2ca>
 8004240:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004244:	4873      	ldr	r0, [pc, #460]	@ (8004414 <HAL_RCC_OscConfig+0x494>)
 8004246:	f7fc fe6d 	bl	8000f24 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d019      	beq.n	8004286 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b71      	ldr	r3, [pc, #452]	@ (8004418 <HAL_RCC_OscConfig+0x498>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004258:	f7fe f9de 	bl	8002618 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe f9da 	bl	8002618 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1ea      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	4b67      	ldr	r3, [pc, #412]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800427e:	2001      	movs	r0, #1
 8004280:	f000 fc02 	bl	8004a88 <RCC_Delay>
 8004284:	e015      	b.n	80042b2 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004286:	4b64      	ldr	r3, [pc, #400]	@ (8004418 <HAL_RCC_OscConfig+0x498>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7fe f9c4 	bl	8002618 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe f9c0 	bl	8002618 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1d0      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80bf 	beq.w	800443e <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c0:	2300      	movs	r3, #0
 80042c2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x366>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_OscConfig+0x366>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b05      	cmp	r3, #5
 80042da:	d004      	beq.n	80042e6 <HAL_RCC_OscConfig+0x366>
 80042dc:	f240 210f 	movw	r1, #527	@ 0x20f
 80042e0:	484c      	ldr	r0, [pc, #304]	@ (8004414 <HAL_RCC_OscConfig+0x494>)
 80042e2:	f7fc fe1f 	bl	8000f24 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b47      	ldr	r3, [pc, #284]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a46      	ldr	r2, [pc, #280]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	61d3      	str	r3, [r2, #28]
 80042fe:	4b44      	ldr	r3, [pc, #272]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_RCC_OscConfig+0x49c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCC_OscConfig+0x49c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_RCC_OscConfig+0x49c>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fe f977 	bl	8002618 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fe f973 	bl	8002618 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b64      	cmp	r3, #100	@ 0x64
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e183      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_RCC_OscConfig+0x49c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x3e2>
 8004354:	4b2e      	ldr	r3, [pc, #184]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6213      	str	r3, [r2, #32]
 8004360:	e02d      	b.n	80043be <HAL_RCC_OscConfig+0x43e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x404>
 800436a:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a28      	ldr	r2, [pc, #160]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	4b26      	ldr	r3, [pc, #152]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a25      	ldr	r2, [pc, #148]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	e01c      	b.n	80043be <HAL_RCC_OscConfig+0x43e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x426>
 800438c:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a1f      	ldr	r2, [pc, #124]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	e00b      	b.n	80043be <HAL_RCC_OscConfig+0x43e>
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6213      	str	r3, [r2, #32]
 80043b2:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fe f927 	bl	8002618 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe f923 	bl	8002618 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e131      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCC_OscConfig+0x490>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCC_OscConfig+0x44e>
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fe f911 	bl	8002618 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	e012      	b.n	8004420 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fe f90d 	bl	8002618 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d909      	bls.n	8004420 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e11b      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
 8004410:	40021000 	.word	0x40021000
 8004414:	0800aec4 	.word	0x0800aec4
 8004418:	42420480 	.word	0x42420480
 800441c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004420:	4b8b      	ldr	r3, [pc, #556]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b87      	ldr	r3, [pc, #540]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a86      	ldr	r2, [pc, #536]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d008      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d004      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
 8004456:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800445a:	487e      	ldr	r0, [pc, #504]	@ (8004654 <HAL_RCC_OscConfig+0x6d4>)
 800445c:	f7fc fd62 	bl	8000f24 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ee 	beq.w	8004646 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446a:	4b79      	ldr	r3, [pc, #484]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	f000 80ce 	beq.w	8004614 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	2b02      	cmp	r3, #2
 800447e:	f040 80b2 	bne.w	80045e6 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_OscConfig+0x51e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004492:	d004      	beq.n	800449e <HAL_RCC_OscConfig+0x51e>
 8004494:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004498:	486e      	ldr	r0, [pc, #440]	@ (8004654 <HAL_RCC_OscConfig+0x6d4>)
 800449a:	f7fc fd43 	bl	8000f24 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d04a      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044ae:	d045      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044b8:	d040      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044c2:	d03b      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044cc:	d036      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80044d6:	d031      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044e0:	d02c      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80044ea:	d027      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044f4:	d022      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80044fe:	d01d      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004508:	d018      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800451c:	d00e      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8004526:	d009      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8004530:	d004      	beq.n	800453c <HAL_RCC_OscConfig+0x5bc>
 8004532:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8004536:	4847      	ldr	r0, [pc, #284]	@ (8004654 <HAL_RCC_OscConfig+0x6d4>)
 8004538:	f7fc fcf4 	bl	8000f24 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b46      	ldr	r3, [pc, #280]	@ (8004658 <HAL_RCC_OscConfig+0x6d8>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fe f869 	bl	8002618 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe f865 	bl	8002618 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e075      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	4b3c      	ldr	r3, [pc, #240]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d116      	bne.n	80045a0 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_OscConfig+0x60e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004582:	d004      	beq.n	800458e <HAL_RCC_OscConfig+0x60e>
 8004584:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8004588:	4832      	ldr	r0, [pc, #200]	@ (8004654 <HAL_RCC_OscConfig+0x6d4>)
 800458a:	f7fc fccb 	bl	8000f24 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800458e:	4b30      	ldr	r3, [pc, #192]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	492d      	ldr	r1, [pc, #180]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a19      	ldr	r1, [r3, #32]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	430b      	orrs	r3, r1
 80045b2:	4927      	ldr	r1, [pc, #156]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <HAL_RCC_OscConfig+0x6d8>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fe f82b 	bl	8002618 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fe f827 	bl	8002618 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e037      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x646>
 80045e4:	e02f      	b.n	8004646 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_RCC_OscConfig+0x6d8>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe f814 	bl	8002618 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fe f810 	bl	8002618 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e020      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004606:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x674>
 8004612:	e018      	b.n	8004646 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e013      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCC_OscConfig+0x6d0>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	429a      	cmp	r2, r3
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	0800aec4 	.word	0x0800aec4
 8004658:	42420060 	.word	0x42420060

0800465c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e176      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <HAL_RCC_ClockConfig+0x4e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d110      	bne.n	80046aa <HAL_RCC_ClockConfig+0x4e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_RCC_ClockConfig+0x4e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_RCC_ClockConfig+0x4e>
 80046a0:	f240 3136 	movw	r1, #822	@ 0x336
 80046a4:	4874      	ldr	r0, [pc, #464]	@ (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80046a6:	f7fc fc3d 	bl	8000f24 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x6a>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d007      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x6a>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d004      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x6a>
 80046bc:	f240 3137 	movw	r1, #823	@ 0x337
 80046c0:	486d      	ldr	r0, [pc, #436]	@ (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80046c2:	f7fc fc2f 	bl	8000f24 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c6:	4b6d      	ldr	r3, [pc, #436]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d910      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	4b69      	ldr	r3, [pc, #420]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 0207 	bic.w	r2, r3, #7
 80046dc:	4967      	ldr	r1, [pc, #412]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b65      	ldr	r3, [pc, #404]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e133      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d049      	beq.n	8004796 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470e:	4b5c      	ldr	r3, [pc, #368]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a5b      	ldr	r2, [pc, #364]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004714:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004718:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004726:	4b56      	ldr	r3, [pc, #344]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	4a55      	ldr	r2, [pc, #340]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 800472c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004730:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d024      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d020      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b90      	cmp	r3, #144	@ 0x90
 8004748:	d01c      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004750:	d018      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2bb0      	cmp	r3, #176	@ 0xb0
 8004758:	d014      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004760:	d010      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2bd0      	cmp	r3, #208	@ 0xd0
 8004768:	d00c      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2be0      	cmp	r3, #224	@ 0xe0
 8004770:	d008      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2bf0      	cmp	r3, #240	@ 0xf0
 8004778:	d004      	beq.n	8004784 <HAL_RCC_ClockConfig+0x128>
 800477a:	f240 315d 	movw	r1, #861	@ 0x35d
 800477e:	483e      	ldr	r0, [pc, #248]	@ (8004878 <HAL_RCC_ClockConfig+0x21c>)
 8004780:	f7fc fbd0 	bl	8000f24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b3e      	ldr	r3, [pc, #248]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	493b      	ldr	r1, [pc, #236]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d051      	beq.n	8004846 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x168>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d008      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x168>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d004      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x168>
 80047ba:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80047be:	482e      	ldr	r0, [pc, #184]	@ (8004878 <HAL_RCC_ClockConfig+0x21c>)
 80047c0:	f7fc fbb0 	bl	8000f24 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d115      	bne.n	8004804 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0c0      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e4:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0b4      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0ac      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004804:	4b1e      	ldr	r3, [pc, #120]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 0203 	bic.w	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	491b      	ldr	r1, [pc, #108]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004816:	f7fd feff 	bl	8002618 <HAL_GetTick>
 800481a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481c:	e00a      	b.n	8004834 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7fd fefb 	bl	8002618 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e094      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004834:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <HAL_RCC_ClockConfig+0x224>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 020c 	and.w	r2, r3, #12
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	429a      	cmp	r2, r3
 8004844:	d1eb      	bne.n	800481e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d217      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 0207 	bic.w	r2, r3, #7
 800485c:	4907      	ldr	r1, [pc, #28]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_ClockConfig+0x220>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d008      	beq.n	8004884 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e073      	b.n	800495e <HAL_RCC_ClockConfig+0x302>
 8004876:	bf00      	nop
 8004878:	0800aec4 	.word	0x0800aec4
 800487c:	40022000 	.word	0x40022000
 8004880:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d025      	beq.n	80048dc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d018      	beq.n	80048ca <HAL_RCC_ClockConfig+0x26e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a0:	d013      	beq.n	80048ca <HAL_RCC_ClockConfig+0x26e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80048aa:	d00e      	beq.n	80048ca <HAL_RCC_ClockConfig+0x26e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x26e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048be:	d004      	beq.n	80048ca <HAL_RCC_ClockConfig+0x26e>
 80048c0:	f240 31a2 	movw	r1, #930	@ 0x3a2
 80048c4:	4828      	ldr	r0, [pc, #160]	@ (8004968 <HAL_RCC_ClockConfig+0x30c>)
 80048c6:	f7fc fb2d 	bl	8000f24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ca:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_RCC_ClockConfig+0x310>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4925      	ldr	r1, [pc, #148]	@ (800496c <HAL_RCC_ClockConfig+0x310>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d026      	beq.n	8004936 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d018      	beq.n	8004922 <HAL_RCC_ClockConfig+0x2c6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d013      	beq.n	8004922 <HAL_RCC_ClockConfig+0x2c6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004902:	d00e      	beq.n	8004922 <HAL_RCC_ClockConfig+0x2c6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x2c6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004916:	d004      	beq.n	8004922 <HAL_RCC_ClockConfig+0x2c6>
 8004918:	f240 31a9 	movw	r1, #937	@ 0x3a9
 800491c:	4812      	ldr	r0, [pc, #72]	@ (8004968 <HAL_RCC_ClockConfig+0x30c>)
 800491e:	f7fc fb01 	bl	8000f24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004922:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_RCC_ClockConfig+0x310>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	@ (800496c <HAL_RCC_ClockConfig+0x310>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_ClockConfig+0x310>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x314>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x318>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <HAL_RCC_ClockConfig+0x31c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fd fe1c 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	0800aec4 	.word	0x0800aec4
 800496c:	40021000 	.word	0x40021000
 8004970:	0800b778 	.word	0x0800b778
 8004974:	20000244 	.word	0x20000244
 8004978:	20000248 	.word	0x20000248

0800497c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004996:	4b1e      	ldr	r3, [pc, #120]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x30>
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x36>
 80049aa:	e027      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ae:	613b      	str	r3, [r7, #16]
      break;
 80049b0:	e027      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	0c9b      	lsrs	r3, r3, #18
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049ca:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x94>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0c5b      	lsrs	r3, r3, #17
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	4a11      	ldr	r2, [pc, #68]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80049d6:	5cd3      	ldrb	r3, [r2, r3]
 80049d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80049de:	fb03 f202 	mul.w	r2, r3, r2
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e004      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	613b      	str	r3, [r7, #16]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80049fe:	613b      	str	r3, [r7, #16]
      break;
 8004a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a02:	693b      	ldr	r3, [r7, #16]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	0800b790 	.word	0x0800b790
 8004a1c:	0800b7a0 	.word	0x0800b7a0
 8004a20:	003d0900 	.word	0x003d0900

08004a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a28:	4b02      	ldr	r3, [pc, #8]	@ (8004a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	20000244 	.word	0x20000244

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a3c:	f7ff fff2 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	@ (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	0800b788 	.word	0x0800b788

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a64:	f7ff ffde 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0adb      	lsrs	r3, r3, #11
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	@ (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	0800b788 	.word	0x0800b788

08004a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <RCC_Delay+0x34>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <RCC_Delay+0x38>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aa4:	bf00      	nop
  }
  while (Delay --);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1e5a      	subs	r2, r3, #1
 8004aaa:	60fa      	str	r2, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f9      	bne.n	8004aa4 <RCC_Delay+0x1c>
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	20000244 	.word	0x20000244
 8004ac0:	10624dd3 	.word	0x10624dd3

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004af8:	216a      	movs	r1, #106	@ 0x6a
 8004afa:	4873      	ldr	r0, [pc, #460]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004afc:	f7fc fa12 	bl	8000f24 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8095 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d012      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b22:	d00d      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b38:	2172      	movs	r1, #114	@ 0x72
 8004b3a:	4863      	ldr	r0, [pc, #396]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004b3c:	f7fc f9f2 	bl	8000f24 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b40:	4b62      	ldr	r3, [pc, #392]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10d      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4a5e      	ldr	r2, [pc, #376]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	61d3      	str	r3, [r2, #28]
 8004b58:	4b5c      	ldr	r3, [pc, #368]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d118      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b74:	4b56      	ldr	r3, [pc, #344]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a55      	ldr	r2, [pc, #340]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b80:	f7fd fd4a 	bl	8002618 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	e008      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b88:	f7fd fd46 	bl	8002618 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e092      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ba6:	4b49      	ldr	r3, [pc, #292]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02e      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d027      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bc4:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bce:	4b41      	ldr	r3, [pc, #260]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d014      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fd fd15 	bl	8002618 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fd fd11 	bl	8002618 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e05b      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	4b30      	ldr	r3, [pc, #192]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ee      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c14:	4b2d      	ldr	r3, [pc, #180]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	492a      	ldr	r1, [pc, #168]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4a26      	ldr	r2, [pc, #152]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01f      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c54:	d00d      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c68:	d003      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c6a:	21b7      	movs	r1, #183	@ 0xb7
 8004c6c:	4816      	ldr	r0, [pc, #88]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004c6e:	f7fc f959 	bl	8000f24 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c72:	4b16      	ldr	r3, [pc, #88]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	4913      	ldr	r1, [pc, #76]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c98:	d008      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca2:	f240 1113 	movw	r1, #275	@ 0x113
 8004ca6:	4808      	ldr	r0, [pc, #32]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004ca8:	f7fc f93c 	bl	8000f24 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4904      	ldr	r1, [pc, #16]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	0800aefc 	.word	0x0800aefc
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	42420440 	.word	0x42420440

08004cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10e      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004d12:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8004d16:	484f      	ldr	r0, [pc, #316]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004d18:	f7fc f904 	bl	8000f24 <assert_failed>

  switch (PeriphClk)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	f200 808a 	bhi.w	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d045      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d075      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d36:	e082      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      temp_reg = RCC->CFGR;
 8004d38:	4b47      	ldr	r3, [pc, #284]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d3e:	4b46      	ldr	r3, [pc, #280]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d07b      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	0c9b      	lsrs	r3, r3, #18
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a42      	ldr	r2, [pc, #264]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d62:	4b3d      	ldr	r3, [pc, #244]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0c5b      	lsrs	r3, r3, #17
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
 8004d70:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d7c:	4a39      	ldr	r2, [pc, #228]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e004      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4a35      	ldr	r2, [pc, #212]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d98:	4b2f      	ldr	r3, [pc, #188]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da4:	d102      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	61bb      	str	r3, [r7, #24]
      break;
 8004daa:	e04a      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = (pllclk * 2) / 3;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]
      break;
 8004dba:	e042      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      temp_reg = RCC->BDCR;
 8004dbc:	4b26      	ldr	r3, [pc, #152]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dcc:	d108      	bne.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        frequency = LSE_VALUE;
 8004dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e01f      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dea:	d109      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004dec:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        frequency = LSI_VALUE;
 8004df8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e00f      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e0a:	d11c      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004e0c:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d016      	beq.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = HSE_VALUE / 128U;
 8004e18:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004e1c:	61bb      	str	r3, [r7, #24]
      break;
 8004e1e:	e012      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004e20:	e011      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e22:	f7ff fe1d 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	0b9b      	lsrs	r3, r3, #14
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	3301      	adds	r3, #1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	61bb      	str	r3, [r7, #24]
      break;
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004e46:	bf00      	nop
    }
  }
  return (frequency);
 8004e48:	69bb      	ldr	r3, [r7, #24]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	0800aefc 	.word	0x0800aefc
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800b7a4 	.word	0x0800b7a4
 8004e60:	0800b7b4 	.word	0x0800b7b4
 8004e64:	007a1200 	.word	0x007a1200
 8004e68:	003d0900 	.word	0x003d0900
 8004e6c:	aaaaaaab 	.word	0xaaaaaaab

08004e70 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0aa      	b.n	8004fdc <HAL_RTC_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a56      	ldr	r2, [pc, #344]	@ (8004fe4 <HAL_RTC_Init+0x174>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_RTC_Init+0x2a>
 8004e90:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004e94:	4854      	ldr	r0, [pc, #336]	@ (8004fe8 <HAL_RTC_Init+0x178>)
 8004e96:	f7fc f845 	bl	8000f24 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <HAL_RTC_Init+0x58>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b80      	cmp	r3, #128	@ 0x80
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_RTC_Init+0x58>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RTC_Init+0x58>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RTC_Init+0x58>
 8004ebe:	f240 111f 	movw	r1, #287	@ 0x11f
 8004ec2:	4849      	ldr	r0, [pc, #292]	@ (8004fe8 <HAL_RTC_Init+0x178>)
 8004ec4:	f7fc f82e 	bl	8000f24 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed0:	d309      	bcc.n	8004ee6 <HAL_RTC_Init+0x76>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d004      	beq.n	8004ee6 <HAL_RTC_Init+0x76>
 8004edc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004ee0:	4841      	ldr	r0, [pc, #260]	@ (8004fe8 <HAL_RTC_Init+0x178>)
 8004ee2:	f7fc f81f 	bl	8000f24 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7c5b      	ldrb	r3, [r3, #17]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc fc0e 	bl	8001718 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fc98 	bl	8005838 <HAL_RTC_WaitForSynchro>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e061      	b.n	8004fdc <HAL_RTC_Init+0x16c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fd51 	bl	80059c0 <RTC_EnterInitMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2204      	movs	r2, #4
 8004f28:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e056      	b.n	8004fdc <HAL_RTC_Init+0x16c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0207 	bic.w	r2, r2, #7
 8004f3c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004f46:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <HAL_RTC_Init+0x17c>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <HAL_RTC_Init+0x17c>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004f52:	4b26      	ldr	r3, [pc, #152]	@ (8004fec <HAL_RTC_Init+0x17c>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4923      	ldr	r1, [pc, #140]	@ (8004fec <HAL_RTC_Init+0x17c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d003      	beq.n	8004f76 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e00e      	b.n	8004f94 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7ff feae 	bl	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f7c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2204      	movs	r2, #4
 8004f88:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e026      	b.n	8004fdc <HAL_RTC_Init+0x16c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	0c1a      	lsrs	r2, r3, #16
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f002 020f 	and.w	r2, r2, #15
 8004fa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fd2f 	bl	8005a10 <RTC_ExitInitMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e00c      	b.n	8004fdc <HAL_RTC_Init+0x16c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40002800 	.word	0x40002800
 8004fe8:	0800af38 	.word	0x0800af38
 8004fec:	40006c00 	.word	0x40006c00

08004ff0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_RTC_SetTime+0x20>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0cd      	b.n	80051b0 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_RTC_SetTime+0x3a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d004      	beq.n	800502a <HAL_RTC_SetTime+0x3a>
 8005020:	f240 21cb 	movw	r1, #715	@ 0x2cb
 8005024:	4864      	ldr	r0, [pc, #400]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 8005026:	f7fb ff7d 	bl	8000f24 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	7c1b      	ldrb	r3, [r3, #16]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_RTC_SetTime+0x46>
 8005032:	2302      	movs	r3, #2
 8005034:	e0bc      	b.n	80051b0 <HAL_RTC_SetTime+0x1c0>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2202      	movs	r2, #2
 8005040:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d12e      	bne.n	80050a6 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b17      	cmp	r3, #23
 800504e:	d904      	bls.n	800505a <HAL_RTC_SetTime+0x6a>
 8005050:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8005054:	4858      	ldr	r0, [pc, #352]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 8005056:	f7fb ff65 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005060:	d904      	bls.n	800506c <HAL_RTC_SetTime+0x7c>
 8005062:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8005066:	4854      	ldr	r0, [pc, #336]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 8005068:	f7fb ff5c 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	789b      	ldrb	r3, [r3, #2]
 8005070:	2b3b      	cmp	r3, #59	@ 0x3b
 8005072:	d904      	bls.n	800507e <HAL_RTC_SetTime+0x8e>
 8005074:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8005078:	484f      	ldr	r0, [pc, #316]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 800507a:	f7fb ff53 	bl	8000f24 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005088:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	4619      	mov	r1, r3
 8005092:	460b      	mov	r3, r1
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	1a5b      	subs	r3, r3, r1
 8005098:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800509a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80050a0:	4413      	add	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e045      	b.n	8005132 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fcf5 	bl	8005a9a <RTC_Bcd2ToByte>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b17      	cmp	r3, #23
 80050b4:	d904      	bls.n	80050c0 <HAL_RTC_SetTime+0xd0>
 80050b6:	f240 21de 	movw	r1, #734	@ 0x2de
 80050ba:	483f      	ldr	r0, [pc, #252]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 80050bc:	f7fb ff32 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fce8 	bl	8005a9a <RTC_Bcd2ToByte>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b3b      	cmp	r3, #59	@ 0x3b
 80050ce:	d904      	bls.n	80050da <HAL_RTC_SetTime+0xea>
 80050d0:	f240 21df 	movw	r1, #735	@ 0x2df
 80050d4:	4838      	ldr	r0, [pc, #224]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 80050d6:	f7fb ff25 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fcdb 	bl	8005a9a <RTC_Bcd2ToByte>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b3b      	cmp	r3, #59	@ 0x3b
 80050e8:	d904      	bls.n	80050f4 <HAL_RTC_SetTime+0x104>
 80050ea:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80050ee:	4832      	ldr	r0, [pc, #200]	@ (80051b8 <HAL_RTC_SetTime+0x1c8>)
 80050f0:	f7fb ff18 	bl	8000f24 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fcce 	bl	8005a9a <RTC_Bcd2ToByte>
 80050fe:	4603      	mov	r3, r0
 8005100:	461a      	mov	r2, r3
 8005102:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005106:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fcc3 	bl	8005a9a <RTC_Bcd2ToByte>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	4613      	mov	r3, r2
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005120:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	789b      	ldrb	r3, [r3, #2]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fcb7 	bl	8005a9a <RTC_Bcd2ToByte>
 800512c:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800512e:	4423      	add	r3, r4
 8005130:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005132:	6979      	ldr	r1, [r7, #20]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fbdc 	bl	80058f2 <RTC_WriteTimeCounter>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2204      	movs	r2, #4
 8005144:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e02f      	b.n	80051b0 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0205 	bic.w	r2, r2, #5
 800515e:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fbed 	bl	8005940 <RTC_ReadAlarmCounter>
 8005166:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d018      	beq.n	80051a2 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	d214      	bcs.n	80051a2 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800517e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005182:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005184:	6939      	ldr	r1, [r7, #16]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fbf3 	bl	8005972 <RTC_WriteAlarmCounter>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2204      	movs	r2, #4
 8005196:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e006      	b.n	80051b0 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd90      	pop	{r4, r7, pc}
 80051b8:	0800af38 	.word	0x0800af38

080051bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_RTC_GetTime+0x28>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0c0      	b.n	800536a <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_RTC_GetTime+0x42>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d004      	beq.n	80051fe <HAL_RTC_GetTime+0x42>
 80051f4:	f240 312e 	movw	r1, #814	@ 0x32e
 80051f8:	485e      	ldr	r0, [pc, #376]	@ (8005374 <HAL_RTC_GetTime+0x1b8>)
 80051fa:	f7fb fe93 	bl	8000f24 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0ac      	b.n	800536a <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fb3e 	bl	8005892 <RTC_ReadTimeCounter>
 8005216:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4a57      	ldr	r2, [pc, #348]	@ (8005378 <HAL_RTC_GetTime+0x1bc>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	0adb      	lsrs	r3, r3, #11
 8005222:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4b54      	ldr	r3, [pc, #336]	@ (8005378 <HAL_RTC_GetTime+0x1bc>)
 8005228:	fba3 1302 	umull	r1, r3, r3, r2
 800522c:	0adb      	lsrs	r3, r3, #11
 800522e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	4a50      	ldr	r2, [pc, #320]	@ (800537c <HAL_RTC_GetTime+0x1c0>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4a4b      	ldr	r2, [pc, #300]	@ (8005378 <HAL_RTC_GetTime+0x1bc>)
 800524a:	fba2 1203 	umull	r1, r2, r2, r3
 800524e:	0ad2      	lsrs	r2, r2, #11
 8005250:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005254:	fb01 f202 	mul.w	r2, r1, r2
 8005258:	1a9a      	subs	r2, r3, r2
 800525a:	4b48      	ldr	r3, [pc, #288]	@ (800537c <HAL_RTC_GetTime+0x1c0>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	0959      	lsrs	r1, r3, #5
 8005262:	460b      	mov	r3, r1
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a5b      	subs	r3, r3, r1
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	1ad1      	subs	r1, r2, r3
 800526c:	b2ca      	uxtb	r2, r1
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b17      	cmp	r3, #23
 8005276:	d955      	bls.n	8005324 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4a41      	ldr	r2, [pc, #260]	@ (8005380 <HAL_RTC_GetTime+0x1c4>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005284:	6939      	ldr	r1, [r7, #16]
 8005286:	4b3e      	ldr	r3, [pc, #248]	@ (8005380 <HAL_RTC_GetTime+0x1c4>)
 8005288:	fba3 2301 	umull	r2, r3, r3, r1
 800528c:	091a      	lsrs	r2, r3, #4
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1aca      	subs	r2, r1, r3
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fb4e 	bl	8005940 <RTC_ReadAlarmCounter>
 80052a4:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d008      	beq.n	80052c0 <HAL_RTC_GetTime+0x104>
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d904      	bls.n	80052c0 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e002      	b.n	80052c6 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005384 <HAL_RTC_GetTime+0x1c8>)
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80052d4:	69b9      	ldr	r1, [r7, #24]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fb0b 	bl	80058f2 <RTC_WriteTimeCounter>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e041      	b.n	800536a <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d00c      	beq.n	8005308 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	4413      	add	r3, r2
 80052f4:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052f6:	69f9      	ldr	r1, [r7, #28]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fb3a 	bl	8005972 <RTC_WriteAlarmCounter>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e030      	b.n	800536a <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb31 	bl	8005972 <RTC_WriteAlarmCounter>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e027      	b.n	800536a <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fbd9 	bl	8005ad4 <RTC_DateUpdate>
 8005322:	e003      	b.n	800532c <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01a      	beq.n	8005368 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb92 	bl	8005a60 <RTC_ByteToBcd2>
 800533c:	4603      	mov	r3, r0
 800533e:	461a      	mov	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fb89 	bl	8005a60 <RTC_ByteToBcd2>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	789b      	ldrb	r3, [r3, #2]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fb80 	bl	8005a60 <RTC_ByteToBcd2>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	0800af38 	.word	0x0800af38
 8005378:	91a2b3c5 	.word	0x91a2b3c5
 800537c:	88888889 	.word	0x88888889
 8005380:	aaaaaaab 	.word	0xaaaaaaab
 8005384:	00015180 	.word	0x00015180

08005388 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_RTC_SetDate+0x24>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0fc      	b.n	80055aa <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_RTC_SetDate+0x3e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d004      	beq.n	80053c6 <HAL_RTC_SetDate+0x3e>
 80053bc:	f240 319d 	movw	r1, #925	@ 0x39d
 80053c0:	487c      	ldr	r0, [pc, #496]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 80053c2:	f7fb fdaf 	bl	8000f24 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	7c1b      	ldrb	r3, [r3, #16]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_RTC_SetDate+0x4a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e0eb      	b.n	80055aa <HAL_RTC_SetDate+0x222>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2202      	movs	r2, #2
 80053dc:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d12f      	bne.n	8005444 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	78db      	ldrb	r3, [r3, #3]
 80053e8:	2b63      	cmp	r3, #99	@ 0x63
 80053ea:	d904      	bls.n	80053f6 <HAL_RTC_SetDate+0x6e>
 80053ec:	f240 31a6 	movw	r1, #934	@ 0x3a6
 80053f0:	4870      	ldr	r0, [pc, #448]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 80053f2:	f7fb fd97 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_RTC_SetDate+0x7e>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b0c      	cmp	r3, #12
 8005404:	d904      	bls.n	8005410 <HAL_RTC_SetDate+0x88>
 8005406:	f240 31a7 	movw	r1, #935	@ 0x3a7
 800540a:	486a      	ldr	r0, [pc, #424]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 800540c:	f7fb fd8a 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	789b      	ldrb	r3, [r3, #2]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_RTC_SetDate+0x98>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	789b      	ldrb	r3, [r3, #2]
 800541c:	2b1f      	cmp	r3, #31
 800541e:	d904      	bls.n	800542a <HAL_RTC_SetDate+0xa2>
 8005420:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8005424:	4863      	ldr	r0, [pc, #396]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 8005426:	f7fb fd7d 	bl	8000f24 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	78da      	ldrb	r2, [r3, #3]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	785a      	ldrb	r2, [r3, #1]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	789a      	ldrb	r2, [r3, #2]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	739a      	strb	r2, [r3, #14]
 8005442:	e051      	b.n	80054e8 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	78db      	ldrb	r3, [r3, #3]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fb26 	bl	8005a9a <RTC_Bcd2ToByte>
 800544e:	4603      	mov	r3, r0
 8005450:	2b63      	cmp	r3, #99	@ 0x63
 8005452:	d904      	bls.n	800545e <HAL_RTC_SetDate+0xd6>
 8005454:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8005458:	4856      	ldr	r0, [pc, #344]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 800545a:	f7fb fd63 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fb19 	bl	8005a9a <RTC_Bcd2ToByte>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_RTC_SetDate+0xf6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fb11 	bl	8005a9a <RTC_Bcd2ToByte>
 8005478:	4603      	mov	r3, r0
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d904      	bls.n	8005488 <HAL_RTC_SetDate+0x100>
 800547e:	f240 31b2 	movw	r1, #946	@ 0x3b2
 8005482:	484c      	ldr	r0, [pc, #304]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 8005484:	f7fb fd4e 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	789b      	ldrb	r3, [r3, #2]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb04 	bl	8005a9a <RTC_Bcd2ToByte>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_RTC_SetDate+0x120>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	789b      	ldrb	r3, [r3, #2]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fafc 	bl	8005a9a <RTC_Bcd2ToByte>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b1f      	cmp	r3, #31
 80054a6:	d904      	bls.n	80054b2 <HAL_RTC_SetDate+0x12a>
 80054a8:	f240 31b3 	movw	r1, #947	@ 0x3b3
 80054ac:	4841      	ldr	r0, [pc, #260]	@ (80055b4 <HAL_RTC_SetDate+0x22c>)
 80054ae:	f7fb fd39 	bl	8000f24 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 faef 	bl	8005a9a <RTC_Bcd2ToByte>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fae6 	bl	8005a9a <RTC_Bcd2ToByte>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	789b      	ldrb	r3, [r3, #2]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fadd 	bl	8005a9a <RTC_Bcd2ToByte>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	7bdb      	ldrb	r3, [r3, #15]
 80054ec:	4618      	mov	r0, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	7b59      	ldrb	r1, [r3, #13]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	7b9b      	ldrb	r3, [r3, #14]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f000 fbc8 	bl	8005c8c <RTC_WeekDayNum>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	7b1a      	ldrb	r2, [r3, #12]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f9c0 	bl	8005892 <RTC_ReadTimeCounter>
 8005512:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4a28      	ldr	r2, [pc, #160]	@ (80055b8 <HAL_RTC_SetDate+0x230>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	0adb      	lsrs	r3, r3, #11
 800551e:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b18      	cmp	r3, #24
 8005524:	d93a      	bls.n	800559c <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <HAL_RTC_SetDate+0x234>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	4a23      	ldr	r2, [pc, #140]	@ (80055c0 <HAL_RTC_SetDate+0x238>)
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800553c:	69f9      	ldr	r1, [r7, #28]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f9d7 	bl	80058f2 <RTC_WriteTimeCounter>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2204      	movs	r2, #4
 800554e:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e027      	b.n	80055aa <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f9f0 	bl	8005940 <RTC_ReadAlarmCounter>
 8005560:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d018      	beq.n	800559c <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	429a      	cmp	r2, r3
 8005570:	d214      	bcs.n	800559c <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005578:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800557c:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f9f6 	bl	8005972 <RTC_WriteAlarmCounter>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2204      	movs	r2, #4
 8005590:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e006      	b.n	80055aa <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	0800af38 	.word	0x0800af38
 80055b8:	91a2b3c5 	.word	0x91a2b3c5
 80055bc:	aaaaaaab 	.word	0xaaaaaaab
 80055c0:	00015180 	.word	0x00015180

080055c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b089      	sub	sp, #36	@ 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	2100      	movs	r1, #0
 80055da:	460a      	mov	r2, r1
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	460a      	mov	r2, r1
 80055e0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_RTC_SetAlarm_IT+0x2a>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e0ef      	b.n	80057d2 <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_RTC_SetAlarm_IT+0x44>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d004      	beq.n	8005608 <HAL_RTC_SetAlarm_IT+0x44>
 80055fe:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 8005602:	4876      	ldr	r0, [pc, #472]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 8005604:	f7fb fc8e 	bl	8000f24 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <HAL_RTC_SetAlarm_IT+0x56>
 8005610:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 8005614:	4871      	ldr	r0, [pc, #452]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 8005616:	f7fb fc85 	bl	8000f24 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	7c1b      	ldrb	r3, [r3, #16]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_RTC_SetAlarm_IT+0x62>
 8005622:	2302      	movs	r3, #2
 8005624:	e0d5      	b.n	80057d2 <HAL_RTC_SetAlarm_IT+0x20e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2202      	movs	r2, #2
 8005630:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	2200      	movs	r2, #0
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff fdbe 	bl	80051bc <HAL_RTC_GetTime>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0c3      	b.n	80057d2 <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800564a:	7d3b      	ldrb	r3, [r7, #20]
 800564c:	461a      	mov	r2, r3
 800564e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005652:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005656:	7d7b      	ldrb	r3, [r7, #21]
 8005658:	4619      	mov	r1, r3
 800565a:	460b      	mov	r3, r1
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a5b      	subs	r3, r3, r1
 8005660:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005662:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005664:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005666:	4413      	add	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d12e      	bne.n	80056ce <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b17      	cmp	r3, #23
 8005676:	d904      	bls.n	8005682 <HAL_RTC_SetAlarm_IT+0xbe>
 8005678:	f240 41c2 	movw	r1, #1218	@ 0x4c2
 800567c:	4857      	ldr	r0, [pc, #348]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 800567e:	f7fb fc51 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b3b      	cmp	r3, #59	@ 0x3b
 8005688:	d904      	bls.n	8005694 <HAL_RTC_SetAlarm_IT+0xd0>
 800568a:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 800568e:	4853      	ldr	r0, [pc, #332]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 8005690:	f7fb fc48 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	789b      	ldrb	r3, [r3, #2]
 8005698:	2b3b      	cmp	r3, #59	@ 0x3b
 800569a:	d904      	bls.n	80056a6 <HAL_RTC_SetAlarm_IT+0xe2>
 800569c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80056a0:	484e      	ldr	r0, [pc, #312]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 80056a2:	f7fb fc3f 	bl	8000f24 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80056b0:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	4619      	mov	r1, r3
 80056ba:	460b      	mov	r3, r1
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056c2:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056c8:	4413      	add	r3, r2
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e045      	b.n	800575a <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f9e1 	bl	8005a9a <RTC_Bcd2ToByte>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b17      	cmp	r3, #23
 80056dc:	d904      	bls.n	80056e8 <HAL_RTC_SetAlarm_IT+0x124>
 80056de:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80056e2:	483e      	ldr	r0, [pc, #248]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 80056e4:	f7fb fc1e 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f9d4 	bl	8005a9a <RTC_Bcd2ToByte>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80056f6:	d904      	bls.n	8005702 <HAL_RTC_SetAlarm_IT+0x13e>
 80056f8:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 80056fc:	4837      	ldr	r0, [pc, #220]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 80056fe:	f7fb fc11 	bl	8000f24 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	789b      	ldrb	r3, [r3, #2]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f9c7 	bl	8005a9a <RTC_Bcd2ToByte>
 800570c:	4603      	mov	r3, r0
 800570e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005710:	d904      	bls.n	800571c <HAL_RTC_SetAlarm_IT+0x158>
 8005712:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8005716:	4831      	ldr	r0, [pc, #196]	@ (80057dc <HAL_RTC_SetAlarm_IT+0x218>)
 8005718:	f7fb fc04 	bl	8000f24 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f9ba 	bl	8005a9a <RTC_Bcd2ToByte>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800572e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f9af 	bl	8005a9a <RTC_Bcd2ToByte>
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005748:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	789b      	ldrb	r3, [r3, #2]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f9a3 	bl	8005a9a <RTC_Bcd2ToByte>
 8005754:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005756:	4423      	add	r3, r4
 8005758:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d205      	bcs.n	800576e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005768:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800576c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800576e:	69f9      	ldr	r1, [r7, #28]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f8fe 	bl	8005972 <RTC_WriteAlarmCounter>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2204      	movs	r2, #4
 8005780:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e022      	b.n	80057d2 <HAL_RTC_SetAlarm_IT+0x20e>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0202 	bic.w	r2, r2, #2
 800579a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0202 	orr.w	r2, r2, #2
 80057aa:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80057ac:	4b0c      	ldr	r3, [pc, #48]	@ (80057e0 <HAL_RTC_SetAlarm_IT+0x21c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0b      	ldr	r2, [pc, #44]	@ (80057e0 <HAL_RTC_SetAlarm_IT+0x21c>)
 80057b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057b6:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80057b8:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <HAL_RTC_SetAlarm_IT+0x21c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a08      	ldr	r2, [pc, #32]	@ (80057e0 <HAL_RTC_SetAlarm_IT+0x21c>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3724      	adds	r7, #36	@ 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd90      	pop	{r4, r7, pc}
 80057da:	bf00      	nop
 80057dc:	0800af38 	.word	0x0800af38
 80057e0:	40010400 	.word	0x40010400

080057e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb f85b 	bl	80008c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0202 	bic.w	r2, r2, #2
 800581c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800581e:	4b05      	ldr	r3, [pc, #20]	@ (8005834 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005824:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	745a      	strb	r2, [r3, #17]
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40010400 	.word	0x40010400

08005838 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e01d      	b.n	800588a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0208 	bic.w	r2, r2, #8
 800585c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800585e:	f7fc fedb 	bl	8002618 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005864:	e009      	b.n	800587a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005866:	f7fc fed7 	bl	8002618 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005874:	d901      	bls.n	800587a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e007      	b.n	800588a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	827b      	strh	r3, [r7, #18]
 800589e:	2300      	movs	r3, #0
 80058a0:	823b      	strh	r3, [r7, #16]
 80058a2:	2300      	movs	r3, #0
 80058a4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80058c2:	8a7a      	ldrh	r2, [r7, #18]
 80058c4:	8a3b      	ldrh	r3, [r7, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d008      	beq.n	80058dc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058ca:	8a3b      	ldrh	r3, [r7, #16]
 80058cc:	041a      	lsls	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e004      	b.n	80058e6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80058dc:	8a7b      	ldrh	r3, [r7, #18]
 80058de:	041a      	lsls	r2, r3, #16
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f85d 	bl	80059c0 <RTC_EnterInitMode>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e011      	b.n	8005936 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	0c12      	lsrs	r2, r2, #16
 800591a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	b292      	uxth	r2, r2
 8005924:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f872 	bl	8005a10 <RTC_ExitInitMode>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	81fb      	strh	r3, [r7, #14]
 800594c:	2300      	movs	r3, #0
 800594e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	041a      	lsls	r2, r3, #16
 8005964:	89bb      	ldrh	r3, [r7, #12]
 8005966:	4313      	orrs	r3, r2
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f81d 	bl	80059c0 <RTC_EnterInitMode>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e011      	b.n	80059b6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	0c12      	lsrs	r2, r2, #16
 800599a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b292      	uxth	r2, r2
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f832 	bl	8005a10 <RTC_ExitInitMode>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80059cc:	f7fc fe24 	bl	8002618 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059d2:	e009      	b.n	80059e8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059d4:	f7fc fe20 	bl	8002618 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059e2:	d901      	bls.n	80059e8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e00f      	b.n	8005a08 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0ee      	beq.n	80059d4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0210 	orr.w	r2, r2, #16
 8005a04:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0210 	bic.w	r2, r2, #16
 8005a2a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a2c:	f7fc fdf4 	bl	8002618 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a32:	e009      	b.n	8005a48 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a34:	f7fc fdf0 	bl	8002618 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a42:	d901      	bls.n	8005a48 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e007      	b.n	8005a58 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0ee      	beq.n	8005a34 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005a6e:	e005      	b.n	8005a7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	3b0a      	subs	r3, #10
 8005a7a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d8f6      	bhi.n	8005a70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b2db      	uxtb	r3, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	b2db      	uxtb	r3, r3
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	7bdb      	ldrb	r3, [r3, #15]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7b5b      	ldrb	r3, [r3, #13]
 8005af8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7b9b      	ldrb	r3, [r3, #14]
 8005afe:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	e06f      	b.n	8005be6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d011      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d00e      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d00b      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b07      	cmp	r3, #7
 8005b1c:	d008      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d005      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b0a      	cmp	r3, #10
 8005b28:	d002      	beq.n	8005b30 <RTC_DateUpdate+0x5c>
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d117      	bne.n	8005b60 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b1e      	cmp	r3, #30
 8005b34:	d803      	bhi.n	8005b3e <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b3c:	e050      	b.n	8005be0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b0c      	cmp	r3, #12
 8005b42:	d005      	beq.n	8005b50 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3301      	adds	r3, #1
 8005b48:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b4e:	e047      	b.n	8005be0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b54:	2301      	movs	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
          year++;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005b5e:	e03f      	b.n	8005be0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d008      	beq.n	8005b78 <RTC_DateUpdate+0xa4>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d005      	beq.n	8005b78 <RTC_DateUpdate+0xa4>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b09      	cmp	r3, #9
 8005b70:	d002      	beq.n	8005b78 <RTC_DateUpdate+0xa4>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b0b      	cmp	r3, #11
 8005b76:	d10c      	bne.n	8005b92 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b1d      	cmp	r3, #29
 8005b7c:	d803      	bhi.n	8005b86 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b84:	e02c      	b.n	8005be0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b90:	e026      	b.n	8005be0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d123      	bne.n	8005be0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b1b      	cmp	r3, #27
 8005b9c:	d803      	bhi.n	8005ba6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e01c      	b.n	8005be0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b1c      	cmp	r3, #28
 8005baa:	d111      	bne.n	8005bd0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f839 	bl	8005c28 <RTC_IsLeapYear>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	e00d      	b.n	8005be0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e007      	b.n	8005be0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b1d      	cmp	r3, #29
 8005bd4:	d104      	bne.n	8005be0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d38b      	bcc.n	8005b06 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6978      	ldr	r0, [r7, #20]
 8005c12:	f000 f83b 	bl	8005c8c <RTC_WeekDayNum>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	731a      	strb	r2, [r3, #12]
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e01d      	b.n	8005c7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	4a10      	ldr	r2, [pc, #64]	@ (8005c88 <RTC_IsLeapYear+0x60>)
 8005c46:	fba2 1203 	umull	r1, r2, r2, r3
 8005c4a:	0952      	lsrs	r2, r2, #5
 8005c4c:	2164      	movs	r1, #100	@ 0x64
 8005c4e:	fb01 f202 	mul.w	r2, r1, r2
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e00f      	b.n	8005c7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <RTC_IsLeapYear+0x60>)
 8005c62:	fba2 1203 	umull	r1, r2, r2, r3
 8005c66:	09d2      	lsrs	r2, r2, #7
 8005c68:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005c6c:	fb01 f202 	mul.w	r2, r1, r2
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005c7c:	2300      	movs	r3, #0
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr
 8005c88:	51eb851f 	.word	0x51eb851f

08005c8c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005caa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d82d      	bhi.n	8005d0e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <RTC_WeekDayNum+0xe4>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	085a      	lsrs	r2, r3, #1
 8005cc6:	78bb      	ldrb	r3, [r7, #2]
 8005cc8:	441a      	add	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	441a      	add	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	4926      	ldr	r1, [pc, #152]	@ (8005d74 <RTC_WeekDayNum+0xe8>)
 8005cdc:	fba1 1303 	umull	r1, r3, r1, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4922      	ldr	r1, [pc, #136]	@ (8005d74 <RTC_WeekDayNum+0xe8>)
 8005cea:	fba1 1303 	umull	r1, r3, r1, r3
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	4413      	add	r3, r2
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <RTC_WeekDayNum+0xec>)
 8005cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfa:	1ad1      	subs	r1, r2, r3
 8005cfc:	0849      	lsrs	r1, r1, #1
 8005cfe:	440b      	add	r3, r1
 8005d00:	0899      	lsrs	r1, r3, #2
 8005d02:	460b      	mov	r3, r1
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	1a5b      	subs	r3, r3, r1
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e029      	b.n	8005d62 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <RTC_WeekDayNum+0xe4>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	085a      	lsrs	r2, r3, #1
 8005d22:	78bb      	ldrb	r3, [r7, #2]
 8005d24:	441a      	add	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	441a      	add	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4910      	ldr	r1, [pc, #64]	@ (8005d74 <RTC_WeekDayNum+0xe8>)
 8005d34:	fba1 1303 	umull	r1, r3, r1, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	490d      	ldr	r1, [pc, #52]	@ (8005d74 <RTC_WeekDayNum+0xe8>)
 8005d40:	fba1 1303 	umull	r1, r3, r1, r3
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	4413      	add	r3, r2
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <RTC_WeekDayNum+0xec>)
 8005d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d50:	1ad1      	subs	r1, r2, r3
 8005d52:	0849      	lsrs	r1, r1, #1
 8005d54:	440b      	add	r3, r1
 8005d56:	0899      	lsrs	r1, r3, #2
 8005d58:	460b      	mov	r3, r1
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	1a5b      	subs	r3, r3, r1
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	b2db      	uxtb	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	38e38e39 	.word	0x38e38e39
 8005d74:	51eb851f 	.word	0x51eb851f
 8005d78:	24924925 	.word	0x24924925

08005d7c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d027      	beq.n	8005de2 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f824 	bl	8005dfc <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0204 	mvn.w	r2, #4
 8005dbc:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	745a      	strb	r2, [r3, #17]
 8005dc4:	e005      	b.n	8005dd2 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f80f 	bl	8005dea <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e095      	b.n	8005f4e <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d02c      	beq.n	8005e84 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f58 <HAL_UART_Init+0x148>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_UART_Init+0x42>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a48      	ldr	r2, [pc, #288]	@ (8005f5c <HAL_UART_Init+0x14c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_UART_Init+0x42>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a47      	ldr	r2, [pc, #284]	@ (8005f60 <HAL_UART_Init+0x150>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_UART_Init+0x42>
 8005e48:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8005e4c:	4845      	ldr	r0, [pc, #276]	@ (8005f64 <HAL_UART_Init+0x154>)
 8005e4e:	f7fb f869 	bl	8000f24 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d028      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e62:	d023      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e6c:	d01e      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e76:	d019      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e78:	f240 116f 	movw	r1, #367	@ 0x16f
 8005e7c:	4839      	ldr	r0, [pc, #228]	@ (8005f64 <HAL_UART_Init+0x154>)
 8005e7e:	f7fb f851 	bl	8000f24 <assert_failed>
 8005e82:	e013      	b.n	8005eac <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a33      	ldr	r2, [pc, #204]	@ (8005f58 <HAL_UART_Init+0x148>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a32      	ldr	r2, [pc, #200]	@ (8005f5c <HAL_UART_Init+0x14c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a30      	ldr	r2, [pc, #192]	@ (8005f60 <HAL_UART_Init+0x150>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_UART_Init+0x9c>
 8005ea2:	f240 1173 	movw	r1, #371	@ 0x173
 8005ea6:	482f      	ldr	r0, [pc, #188]	@ (8005f64 <HAL_UART_Init+0x154>)
 8005ea8:	f7fb f83c 	bl	8000f24 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_UART_Init+0xb8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ebc:	d004      	beq.n	8005ec8 <HAL_UART_Init+0xb8>
 8005ebe:	f240 1175 	movw	r1, #373	@ 0x175
 8005ec2:	4828      	ldr	r0, [pc, #160]	@ (8005f64 <HAL_UART_Init+0x154>)
 8005ec4:	f7fb f82e 	bl	8000f24 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fc fa5f 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	@ 0x24
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 f91c 	bl	8007138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	40004400 	.word	0x40004400
 8005f60:	40004800 	.word	0x40004800
 8005f64:	0800af70 	.word	0x0800af70

08005f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	@ 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d16d      	bne.n	8006064 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Transmit+0x2c>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e066      	b.n	8006066 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	@ 0x21
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa6:	f7fc fb37 	bl	8002618 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d108      	bne.n	8005fd4 <HAL_UART_Transmit+0x6c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e003      	b.n	8005fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fdc:	e02a      	b.n	8006034 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2180      	movs	r1, #128	@ 0x80
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fddb 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e036      	b.n	8006066 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3302      	adds	r3, #2
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e007      	b.n	8006026 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1cf      	bne.n	8005fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	2140      	movs	r1, #64	@ 0x40
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fdab 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08a      	sub	sp, #40	@ 0x28
 8006072:	af02      	add	r7, sp, #8
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	d17c      	bne.n	8006188 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_Receive+0x2c>
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e075      	b.n	800618a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2222      	movs	r2, #34	@ 0x22
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fc fab1 	bl	8002618 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060cc:	d108      	bne.n	80060e0 <HAL_UART_Receive+0x72>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e003      	b.n	80060e8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060e8:	e043      	b.n	8006172 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2120      	movs	r1, #32
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fd55 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e042      	b.n	800618a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	b29a      	uxth	r2, r3
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	3302      	adds	r3, #2
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e01f      	b.n	8006164 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612c:	d007      	beq.n	800613e <HAL_UART_Receive+0xd0>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_UART_Receive+0xde>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e008      	b.n	800615e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006158:	b2da      	uxtb	r2, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3301      	adds	r3, #1
 8006162:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1b6      	bne.n	80060ea <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	4613      	mov	r3, r2
 800619e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d121      	bne.n	80061f0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_UART_Transmit_IT+0x26>
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e01a      	b.n	80061f2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2221      	movs	r2, #33	@ 0x21
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b20      	cmp	r3, #32
 8006216:	f040 80c0 	bne.w	800639a <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0b8      	b.n	800639c <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2222      	movs	r2, #34	@ 0x22
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006244:	f7fc f9e8 	bl	8002618 <HAL_GetTick>
 8006248:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625e:	d108      	bne.n	8006272 <HAL_UARTEx_ReceiveToIdle+0x76>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	e003      	b.n	800627a <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006280:	e077      	b.n	8006372 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d117      	bne.n	80062c0 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2202      	movs	r2, #2
 80062b2:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e06d      	b.n	800639c <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d13c      	bne.n	8006348 <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10c      	bne.n	80062ee <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	3302      	adds	r3, #2
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e01f      	b.n	800632e <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f6:	d007      	beq.n	8006308 <HAL_UARTEx_ReceiveToIdle+0x10c>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_UARTEx_ReceiveToIdle+0x11a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e008      	b.n	8006328 <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006322:	b2da      	uxtb	r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d010      	beq.n	8006372 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006350:	f7fc f962 	bl	8002618 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <HAL_UARTEx_ReceiveToIdle+0x16a>
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e014      	b.n	800639c <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d182      	bne.n	8006282 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006384:	b29b      	uxth	r3, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	b29a      	uxth	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e000      	b.n	800639c <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800639a:	2302      	movs	r3, #2
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08c      	sub	sp, #48	@ 0x30
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d14a      	bne.n	8006454 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e043      	b.n	8006456 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fc4d 	bl	8006c80 <UART_Start_Receive_DMA>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80063ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d12c      	bne.n	800644e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d125      	bne.n	8006448 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	330c      	adds	r3, #12
 8006418:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	617b      	str	r3, [r7, #20]
   return(result);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f043 0310 	orr.w	r3, r3, #16
 8006428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006432:	627a      	str	r2, [r7, #36]	@ 0x24
 8006434:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6a39      	ldr	r1, [r7, #32]
 8006438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e5      	bne.n	8006412 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006446:	e002      	b.n	800644e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800644e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006452:	e000      	b.n	8006456 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b0ba      	sub	sp, #232	@ 0xe8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006486:	2300      	movs	r3, #0
 8006488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800649e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_UART_IRQHandler+0x66>
 80064b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fd7c 	bl	8006fbc <UART_Receive_IT>
      return;
 80064c4:	e25b      	b.n	800697e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80de 	beq.w	800668c <HAL_UART_IRQHandler+0x22c>
 80064d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80d1 	beq.w	800668c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_UART_IRQHandler+0xae>
 80064f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006506:	f043 0201 	orr.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_UART_IRQHandler+0xd2>
 800651a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652a:	f043 0202 	orr.w	r2, r3, #2
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_UART_IRQHandler+0xf6>
 800653e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	f043 0204 	orr.w	r2, r3, #4
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d011      	beq.n	8006586 <HAL_UART_IRQHandler+0x126>
 8006562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800656e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	f043 0208 	orr.w	r2, r3, #8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 81f2 	beq.w	8006974 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_UART_IRQHandler+0x14e>
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd07 	bl	8006fbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <HAL_UART_IRQHandler+0x17a>
 80065d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d04f      	beq.n	800667a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fc11 	bl	8006e02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d041      	beq.n	8006672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800660c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800661a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800661e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1d9      	bne.n	80065ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d013      	beq.n	800666a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006646:	4a7e      	ldr	r2, [pc, #504]	@ (8006840 <HAL_UART_IRQHandler+0x3e0>)
 8006648:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664e:	4618      	mov	r0, r3
 8006650:	f7fc faf6 	bl	8002c40 <HAL_DMA_Abort_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	e00e      	b.n	8006688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f993 	bl	8006996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	e00a      	b.n	8006688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f98f 	bl	8006996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	e006      	b.n	8006688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f98b 	bl	8006996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006686:	e175      	b.n	8006974 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	bf00      	nop
    return;
 800668a:	e173      	b.n	8006974 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	2b01      	cmp	r3, #1
 8006692:	f040 814f 	bne.w	8006934 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8148 	beq.w	8006934 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8141 	beq.w	8006934 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80b6 	beq.w	8006844 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 8145 	beq.w	8006978 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f6:	429a      	cmp	r2, r3
 80066f8:	f080 813e 	bcs.w	8006978 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006702:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	2b20      	cmp	r3, #32
 800670c:	f000 8088 	beq.w	8006820 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800672a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800673c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006748:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1d9      	bne.n	8006710 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3314      	adds	r3, #20
 8006762:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800676c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3314      	adds	r3, #20
 800677c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006780:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006784:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006788:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e1      	bne.n	800675c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e3      	bne.n	8006798 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f0:	f023 0310 	bic.w	r3, r3, #16
 80067f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006802:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006804:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e3      	bne.n	80067de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681a:	4618      	mov	r0, r3
 800681c:	f7fc f9d4 	bl	8002bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800682e:	b29b      	uxth	r3, r3
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	b29b      	uxth	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fa f892 	bl	8000960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800683c:	e09c      	b.n	8006978 <HAL_UART_IRQHandler+0x518>
 800683e:	bf00      	nop
 8006840:	08006ec7 	.word	0x08006ec7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800684c:	b29b      	uxth	r3, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 808e 	beq.w	800697c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8089 	beq.w	800697c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	330c      	adds	r3, #12
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800688e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800689c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e3      	bne.n	800686a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3314      	adds	r3, #20
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	623b      	str	r3, [r7, #32]
   return(result);
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e3      	bne.n	80068a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800690c:	61fa      	str	r2, [r7, #28]
 800690e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	617b      	str	r3, [r7, #20]
   return(result);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e3      	bne.n	80068e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fa f817 	bl	8000960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006932:	e023      	b.n	800697c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_UART_IRQHandler+0x4f4>
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 face 	bl	8006eee <UART_Transmit_IT>
    return;
 8006952:	e014      	b.n	800697e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <HAL_UART_IRQHandler+0x51e>
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fb0d 	bl	8006f8c <UART_EndTransmit_IT>
    return;
 8006972:	e004      	b.n	800697e <HAL_UART_IRQHandler+0x51e>
    return;
 8006974:	bf00      	nop
 8006976:	e002      	b.n	800697e <HAL_UART_IRQHandler+0x51e>
      return;
 8006978:	bf00      	nop
 800697a:	e000      	b.n	800697e <HAL_UART_IRQHandler+0x51e>
      return;
 800697c:	bf00      	nop
  }
}
 800697e:	37e8      	adds	r7, #232	@ 0xe8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b09c      	sub	sp, #112	@ 0x70
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d172      	bne.n	8006aaa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80069c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c6:	2200      	movs	r2, #0
 80069c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80069ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3314      	adds	r3, #20
 8006a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3314      	adds	r3, #20
 8006a1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e5      	bne.n	80069fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3314      	adds	r3, #20
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	623b      	str	r3, [r7, #32]
   return(result);
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3314      	adds	r3, #20
 8006a50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d119      	bne.n	8006aaa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f023 0310 	bic.w	r3, r3, #16
 8006a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a96:	61fa      	str	r2, [r7, #28]
 8006a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	69b9      	ldr	r1, [r7, #24]
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aac:	2200      	movs	r2, #0
 8006aae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d106      	bne.n	8006ac6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006abc:	4619      	mov	r1, r3
 8006abe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ac0:	f7f9 ff4e 	bl	8000960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ac4:	e002      	b.n	8006acc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ac6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ac8:	f7f9 ff40 	bl	800094c <HAL_UART_RxCpltCallback>
}
 8006acc:	bf00      	nop
 8006ace:	3770      	adds	r7, #112	@ 0x70
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d108      	bne.n	8006b02 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7f9 ff30 	bl	8000960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b00:	e002      	b.n	8006b08 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff ff3e 	bl	8006984 <HAL_UART_RxHalfCpltCallback>
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b21      	cmp	r3, #33	@ 0x21
 8006b42:	d108      	bne.n	8006b56 <UART_DMAError+0x46>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006b50:	68b8      	ldr	r0, [r7, #8]
 8006b52:	f000 f92f 	bl	8006db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b22      	cmp	r3, #34	@ 0x22
 8006b76:	d108      	bne.n	8006b8a <UART_DMAError+0x7a>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2200      	movs	r2, #0
 8006b82:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b84:	68b8      	ldr	r0, [r7, #8]
 8006b86:	f000 f93c 	bl	8006e02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8e:	f043 0210 	orr.w	r2, r3, #16
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b96:	68b8      	ldr	r0, [r7, #8]
 8006b98:	f7ff fefd 	bl	8006996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b090      	sub	sp, #64	@ 0x40
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb4:	e050      	b.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d04c      	beq.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc4:	f7fb fd28 	bl	8002618 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d241      	bcs.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bf4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	613b      	str	r3, [r7, #16]
   return(result);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3314      	adds	r3, #20
 8006c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c28:	623a      	str	r2, [r7, #32]
 8006c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e5      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e00f      	b.n	8006c78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d09f      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3740      	adds	r7, #64	@ 0x40
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b098      	sub	sp, #96	@ 0x60
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2222      	movs	r2, #34	@ 0x22
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	4a3e      	ldr	r2, [pc, #248]	@ (8006da8 <UART_Start_Receive_DMA+0x128>)
 8006cae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dac <UART_Start_Receive_DMA+0x12c>)
 8006cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8006db0 <UART_Start_Receive_DMA+0x130>)
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	f7fb ff04 	bl	8002aec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d019      	beq.n	8006d36 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6a39      	ldr	r1, [r7, #32]
 8006d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3760      	adds	r7, #96	@ 0x60
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	080069a9 	.word	0x080069a9
 8006dac:	08006ad5 	.word	0x08006ad5
 8006db0:	08006b11 	.word	0x08006b11

08006db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	@ 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	61ba      	str	r2, [r7, #24]
 8006dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006df8:	bf00      	nop
 8006dfa:	3724      	adds	r7, #36	@ 0x24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b095      	sub	sp, #84	@ 0x54
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d119      	bne.n	8006eae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0310 	bic.w	r3, r3, #16
 8006e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e9a:	61ba      	str	r2, [r7, #24]
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ebc:	bf00      	nop
 8006ebe:	3754      	adds	r7, #84	@ 0x54
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr

08006ec6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff fd58 	bl	8006996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b21      	cmp	r3, #33	@ 0x21
 8006f00:	d13e      	bne.n	8006f80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0a:	d114      	bne.n	8006f36 <UART_Transmit_IT+0x48>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d110      	bne.n	8006f36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	621a      	str	r2, [r3, #32]
 8006f34:	e008      	b.n	8006f48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6211      	str	r1, [r2, #32]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4619      	mov	r1, r3
 8006f56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10f      	bne.n	8006f7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7f9 fcb3 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	@ 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b22      	cmp	r3, #34	@ 0x22
 8006fce:	f040 80ae 	bne.w	800712e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fda:	d117      	bne.n	800700c <UART_Receive_IT+0x50>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d113      	bne.n	800700c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28
 800700a:	e026      	b.n	800705a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d007      	beq.n	8007030 <UART_Receive_IT+0x74>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <UART_Receive_IT+0x82>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e008      	b.n	8007050 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800706a:	2b00      	cmp	r3, #0
 800706c:	d15d      	bne.n	800712a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0220 	bic.w	r2, r2, #32
 800707c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800708c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d135      	bne.n	8007120 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f023 0310 	bic.w	r3, r3, #16
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070da:	623a      	str	r2, [r7, #32]
 80070dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d10a      	bne.n	8007112 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7f9 fc21 	bl	8000960 <HAL_UARTEx_RxEventCallback>
 800711e:	e002      	b.n	8007126 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7f9 fc13 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e002      	b.n	8007130 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3730      	adds	r7, #48	@ 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a5f      	ldr	r2, [pc, #380]	@ (80072c4 <UART_SetConfig+0x18c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d904      	bls.n	8007154 <UART_SetConfig+0x1c>
 800714a:	f640 6166 	movw	r1, #3686	@ 0xe66
 800714e:	485e      	ldr	r0, [pc, #376]	@ (80072c8 <UART_SetConfig+0x190>)
 8007150:	f7f9 fee8 	bl	8000f24 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <UART_SetConfig+0x38>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007164:	d004      	beq.n	8007170 <UART_SetConfig+0x38>
 8007166:	f640 6167 	movw	r1, #3687	@ 0xe67
 800716a:	4857      	ldr	r0, [pc, #348]	@ (80072c8 <UART_SetConfig+0x190>)
 800716c:	f7f9 feda 	bl	8000f24 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <UART_SetConfig+0x5e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007180:	d009      	beq.n	8007196 <UART_SetConfig+0x5e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800718a:	d004      	beq.n	8007196 <UART_SetConfig+0x5e>
 800718c:	f640 6168 	movw	r1, #3688	@ 0xe68
 8007190:	484d      	ldr	r0, [pc, #308]	@ (80072c8 <UART_SetConfig+0x190>)
 8007192:	f7f9 fec7 	bl	8000f24 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <UART_SetConfig+0x74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <UART_SetConfig+0x7e>
 80071ac:	f640 6169 	movw	r1, #3689	@ 0xe69
 80071b0:	4845      	ldr	r0, [pc, #276]	@ (80072c8 <UART_SetConfig+0x190>)
 80071b2:	f7f9 feb7 	bl	8000f24 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80071e8:	f023 030c 	bic.w	r3, r3, #12
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	430b      	orrs	r3, r1
 80071f4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a2e      	ldr	r2, [pc, #184]	@ (80072cc <UART_SetConfig+0x194>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d103      	bne.n	800721e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007216:	f7fd fc23 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	e002      	b.n	8007224 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fd fc0b 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8007222:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009a      	lsls	r2, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	4a25      	ldr	r2, [pc, #148]	@ (80072d0 <UART_SetConfig+0x198>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	0119      	lsls	r1, r3, #4
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009a      	lsls	r2, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	fbb2 f2f3 	udiv	r2, r2, r3
 800725a:	4b1d      	ldr	r3, [pc, #116]	@ (80072d0 <UART_SetConfig+0x198>)
 800725c:	fba3 0302 	umull	r0, r3, r3, r2
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	2064      	movs	r0, #100	@ 0x64
 8007264:	fb00 f303 	mul.w	r3, r0, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	3332      	adds	r3, #50	@ 0x32
 800726e:	4a18      	ldr	r2, [pc, #96]	@ (80072d0 <UART_SetConfig+0x198>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800727a:	4419      	add	r1, r3
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009a      	lsls	r2, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007292:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <UART_SetConfig+0x198>)
 8007294:	fba3 0302 	umull	r0, r3, r3, r2
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	2064      	movs	r0, #100	@ 0x64
 800729c:	fb00 f303 	mul.w	r3, r0, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	3332      	adds	r3, #50	@ 0x32
 80072a6:	4a0a      	ldr	r2, [pc, #40]	@ (80072d0 <UART_SetConfig+0x198>)
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	f003 020f 	and.w	r2, r3, #15
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	440a      	add	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	0044aa20 	.word	0x0044aa20
 80072c8:	0800af70 	.word	0x0800af70
 80072cc:	40013800 	.word	0x40013800
 80072d0:	51eb851f 	.word	0x51eb851f

080072d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072da:	f3ef 8305 	mrs	r3, IPSR
 80072de:	60bb      	str	r3, [r7, #8]
  return(result);
 80072e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10f      	bne.n	8007306 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e6:	f3ef 8310 	mrs	r3, PRIMASK
 80072ea:	607b      	str	r3, [r7, #4]
  return(result);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <osKernelInitialize+0x32>
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <osKernelInitialize+0x60>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d109      	bne.n	800730e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072fa:	f3ef 8311 	mrs	r3, BASEPRI
 80072fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007306:	f06f 0305 	mvn.w	r3, #5
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e00c      	b.n	8007328 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800730e:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <osKernelInitialize+0x60>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007316:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <osKernelInitialize+0x60>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e002      	b.n	8007328 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295
 8007326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr
 8007334:	20000a08 	.word	0x20000a08

08007338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733e:	f3ef 8305 	mrs	r3, IPSR
 8007342:	60bb      	str	r3, [r7, #8]
  return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800734a:	f3ef 8310 	mrs	r3, PRIMASK
 800734e:	607b      	str	r3, [r7, #4]
  return(result);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <osKernelStart+0x32>
 8007356:	4b11      	ldr	r3, [pc, #68]	@ (800739c <osKernelStart+0x64>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d109      	bne.n	8007372 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800735e:	f3ef 8311 	mrs	r3, BASEPRI
 8007362:	603b      	str	r3, [r7, #0]
  return(result);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <osKernelStart+0x3a>
    stat = osErrorISR;
 800736a:	f06f 0305 	mvn.w	r3, #5
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e00e      	b.n	8007390 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <osKernelStart+0x64>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d107      	bne.n	800738a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800737a:	4b08      	ldr	r3, [pc, #32]	@ (800739c <osKernelStart+0x64>)
 800737c:	2202      	movs	r2, #2
 800737e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007380:	f001 fa26 	bl	80087d0 <vTaskStartScheduler>
      stat = osOK;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e002      	b.n	8007390 <osKernelStart+0x58>
    } else {
      stat = osError;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007390:	68fb      	ldr	r3, [r7, #12]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000a08 	.word	0x20000a08

080073a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b092      	sub	sp, #72	@ 0x48
 80073a4:	af04      	add	r7, sp, #16
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b0:	f3ef 8305 	mrs	r3, IPSR
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 8094 	bne.w	80074e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073be:	f3ef 8310 	mrs	r3, PRIMASK
 80073c2:	623b      	str	r3, [r7, #32]
  return(result);
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 808d 	bne.w	80074e6 <osThreadNew+0x146>
 80073cc:	4b48      	ldr	r3, [pc, #288]	@ (80074f0 <osThreadNew+0x150>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d106      	bne.n	80073e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073d4:	f3ef 8311 	mrs	r3, BASEPRI
 80073d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8082 	bne.w	80074e6 <osThreadNew+0x146>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d07e      	beq.n	80074e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80073e8:	2380      	movs	r3, #128	@ 0x80
 80073ea:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80073ec:	2318      	movs	r3, #24
 80073ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80073f0:	2300      	movs	r3, #0
 80073f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80073f4:	f107 031b 	add.w	r3, r7, #27
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d045      	beq.n	8007492 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <osThreadNew+0x74>
        name = attr->name;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <osThreadNew+0x9a>
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	2b38      	cmp	r3, #56	@ 0x38
 800742c:	d805      	bhi.n	800743a <osThreadNew+0x9a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <osThreadNew+0x9e>
        return (NULL);
 800743a:	2300      	movs	r3, #0
 800743c:	e054      	b.n	80074e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <osThreadNew+0xd4>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b5b      	cmp	r3, #91	@ 0x5b
 800745c:	d90a      	bls.n	8007474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <osThreadNew+0xd4>
        mem = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007472:	e010      	b.n	8007496 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <osThreadNew+0xf6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <osThreadNew+0xf6>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <osThreadNew+0xf6>
          mem = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007490:	e001      	b.n	8007496 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	2b01      	cmp	r3, #1
 800749a:	d110      	bne.n	80074be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 ffba 	bl	800842c <xTaskCreateStatic>
 80074b8:	4603      	mov	r3, r0
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e013      	b.n	80074e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d110      	bne.n	80074e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 f807 	bl	80084ea <xTaskCreate>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <osThreadNew+0x146>
          hTask = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074e6:	697b      	ldr	r3, [r7, #20]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3738      	adds	r7, #56	@ 0x38
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000a08 	.word	0x20000a08

080074f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fc:	f3ef 8305 	mrs	r3, IPSR
 8007500:	613b      	str	r3, [r7, #16]
  return(result);
 8007502:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10f      	bne.n	8007528 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
 800750c:	60fb      	str	r3, [r7, #12]
  return(result);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <osDelay+0x34>
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <osDelay+0x58>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d109      	bne.n	8007530 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800751c:	f3ef 8311 	mrs	r3, BASEPRI
 8007520:	60bb      	str	r3, [r7, #8]
  return(result);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <osDelay+0x3c>
    stat = osErrorISR;
 8007528:	f06f 0305 	mvn.w	r3, #5
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e007      	b.n	8007540 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <osDelay+0x4c>
      vTaskDelay(ticks);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f912 	bl	8008764 <vTaskDelay>
    }
  }

  return (stat);
 8007540:	697b      	ldr	r3, [r7, #20]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000a08 	.word	0x20000a08

08007550 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	@ 0x30
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007560:	f3ef 8305 	mrs	r3, IPSR
 8007564:	61bb      	str	r3, [r7, #24]
  return(result);
 8007566:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 8086 	bne.w	800767a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756e:	f3ef 8310 	mrs	r3, PRIMASK
 8007572:	617b      	str	r3, [r7, #20]
  return(result);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d17f      	bne.n	800767a <osSemaphoreNew+0x12a>
 800757a:	4b42      	ldr	r3, [pc, #264]	@ (8007684 <osSemaphoreNew+0x134>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d105      	bne.n	800758e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007582:	f3ef 8311 	mrs	r3, BASEPRI
 8007586:	613b      	str	r3, [r7, #16]
  return(result);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d175      	bne.n	800767a <osSemaphoreNew+0x12a>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d072      	beq.n	800767a <osSemaphoreNew+0x12a>
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d86e      	bhi.n	800767a <osSemaphoreNew+0x12a>
    mem = -1;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d015      	beq.n	80075d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <osSemaphoreNew+0x6e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80075b6:	d902      	bls.n	80075be <osSemaphoreNew+0x6e>
        mem = 1;
 80075b8:	2301      	movs	r3, #1
 80075ba:	623b      	str	r3, [r7, #32]
 80075bc:	e00c      	b.n	80075d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d108      	bne.n	80075d8 <osSemaphoreNew+0x88>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <osSemaphoreNew+0x88>
          mem = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	e001      	b.n	80075d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d04c      	beq.n	800767a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d128      	bne.n	8007638 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10a      	bne.n	8007602 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2203      	movs	r2, #3
 80075f2:	9200      	str	r2, [sp, #0]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	2001      	movs	r0, #1
 80075fa:	f000 f991 	bl	8007920 <xQueueGenericCreateStatic>
 80075fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8007600:	e005      	b.n	800760e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007602:	2203      	movs	r2, #3
 8007604:	2100      	movs	r1, #0
 8007606:	2001      	movs	r0, #1
 8007608:	f000 fa06 	bl	8007a18 <xQueueGenericCreate>
 800760c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	d022      	beq.n	800765a <osSemaphoreNew+0x10a>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01f      	beq.n	800765a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800761a:	2300      	movs	r3, #0
 800761c:	2200      	movs	r2, #0
 800761e:	2100      	movs	r1, #0
 8007620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007622:	f000 fac9 	bl	8007bb8 <xQueueGenericSend>
 8007626:	4603      	mov	r3, r0
 8007628:	2b01      	cmp	r3, #1
 800762a:	d016      	beq.n	800765a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800762c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800762e:	f000 fd43 	bl	80080b8 <vQueueDelete>
            hSemaphore = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24
 8007636:	e010      	b.n	800765a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d108      	bne.n	8007650 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	461a      	mov	r2, r3
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa48 	bl	8007adc <xQueueCreateCountingSemaphoreStatic>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24
 800764e:	e004      	b.n	800765a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fa7b 	bl	8007b4e <xQueueCreateCountingSemaphore>
 8007658:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <osSemaphoreNew+0x11e>
          name = attr->name;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	e001      	b.n	8007672 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007676:	f000 fe53 	bl	8008320 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	@ 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000a08 	.word	0x20000a08

08007688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a06      	ldr	r2, [pc, #24]	@ (80076b0 <vApplicationGetIdleTaskMemory+0x28>)
 8007698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4a05      	ldr	r2, [pc, #20]	@ (80076b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800769e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2280      	movs	r2, #128	@ 0x80
 80076a4:	601a      	str	r2, [r3, #0]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr
 80076b0:	20000a0c 	.word	0x20000a0c
 80076b4:	20000a68 	.word	0x20000a68

080076b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a07      	ldr	r2, [pc, #28]	@ (80076e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80076c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4a06      	ldr	r2, [pc, #24]	@ (80076e8 <vApplicationGetTimerTaskMemory+0x30>)
 80076ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076d6:	601a      	str	r2, [r3, #0]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000c68 	.word	0x20000c68
 80076e8:	20000cc4 	.word	0x20000cc4

080076ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f103 0208 	add.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f103 0208 	add.w	r2, r3, #8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f103 0208 	add.w	r2, r3, #8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d103      	bne.n	80077a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e00c      	b.n	80077c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3308      	adds	r3, #8
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e002      	b.n	80077b6 <vListInsert+0x2e>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d2f6      	bcs.n	80077b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6892      	ldr	r2, [r2, #8]
 800780e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6852      	ldr	r2, [r2, #4]
 8007818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d103      	bne.n	800782c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr
	...

0800784c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007878:	f002 f8f0 	bl	8009a5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007884:	68f9      	ldr	r1, [r7, #12]
 8007886:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	441a      	add	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	3b01      	subs	r3, #1
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078ae:	fb01 f303 	mul.w	r3, r1, r3
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	22ff      	movs	r2, #255	@ 0xff
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d114      	bne.n	80078f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01a      	beq.n	800790c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3310      	adds	r3, #16
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fa0a 	bl	8008cf4 <xTaskRemoveFromEventList>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d012      	beq.n	800790c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <xQueueGenericReset+0xd0>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	e009      	b.n	800790c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3310      	adds	r3, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff fef5 	bl	80076ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3324      	adds	r3, #36	@ 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fef0 	bl	80076ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800790c:	f002 f8d6 	bl	8009abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007910:	2301      	movs	r3, #1
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08e      	sub	sp, #56	@ 0x38
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <xQueueGenericCreateStatic+0x56>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <xQueueGenericCreateStatic+0x5a>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xQueueGenericCreateStatic+0x5c>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	623b      	str	r3, [r7, #32]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <xQueueGenericCreateStatic+0x84>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <xQueueGenericCreateStatic+0x88>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <xQueueGenericCreateStatic+0x8a>
 80079a8:	2300      	movs	r3, #0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10b      	bne.n	80079c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	61fb      	str	r3, [r7, #28]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079c6:	2350      	movs	r3, #80	@ 0x50
 80079c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b50      	cmp	r3, #80	@ 0x50
 80079ce:	d00b      	beq.n	80079e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	61bb      	str	r3, [r7, #24]
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	e7fd      	b.n	80079e4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00d      	beq.n	8007a0e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079fa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f844 	bl	8007a96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3730      	adds	r7, #48	@ 0x30
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	@ 0x28
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10b      	bne.n	8007a44 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	613b      	str	r3, [r7, #16]
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	e004      	b.n	8007a5a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3350      	adds	r3, #80	@ 0x50
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f002 f8fe 	bl	8009c60 <pvPortMalloc>
 8007a64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00f      	beq.n	8007a8c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	3350      	adds	r3, #80	@ 0x50
 8007a70:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a7a:	79fa      	ldrb	r2, [r7, #7]
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f805 	bl	8007a96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
 8007aa2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e002      	b.n	8007ab8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	69b8      	ldr	r0, [r7, #24]
 8007ac8:	f7ff fec0 	bl	800784c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	@ 0x28
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	61bb      	str	r3, [r7, #24]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d90b      	bls.n	8007b26 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b26:	2302      	movs	r3, #2
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff fef5 	bl	8007920 <xQueueGenericCreateStatic>
 8007b36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007b44:	69fb      	ldr	r3, [r7, #28]
	}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	613b      	str	r3, [r7, #16]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d90b      	bls.n	8007b96 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b96:	2202      	movs	r2, #2
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ff3c 	bl	8007a18 <xQueueGenericCreate>
 8007ba0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007bae:	697b      	ldr	r3, [r7, #20]
	}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08e      	sub	sp, #56	@ 0x38
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <xQueueGenericSend+0x34>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <xQueueGenericSend+0x42>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueGenericSend+0x46>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueGenericSend+0x48>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <xQueueGenericSend+0x64>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d103      	bne.n	8007c2a <xQueueGenericSend+0x72>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <xQueueGenericSend+0x76>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e000      	b.n	8007c30 <xQueueGenericSend+0x78>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10b      	bne.n	8007c4c <xQueueGenericSend+0x94>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	623b      	str	r3, [r7, #32]
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	e7fd      	b.n	8007c48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c4c:	f001 fa16 	bl	800907c <xTaskGetSchedulerState>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <xQueueGenericSend+0xa4>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <xQueueGenericSend+0xa8>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <xQueueGenericSend+0xaa>
 8007c60:	2300      	movs	r3, #0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10b      	bne.n	8007c7e <xQueueGenericSend+0xc6>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	61fb      	str	r3, [r7, #28]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c7e:	f001 feed 	bl	8009a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d302      	bcc.n	8007c94 <xQueueGenericSend+0xdc>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d129      	bne.n	8007ce8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c9a:	f000 fa31 	bl	8008100 <prvCopyDataToQueue>
 8007c9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d010      	beq.n	8007cca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	3324      	adds	r3, #36	@ 0x24
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 f821 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d013      	beq.n	8007ce0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8007db8 <xQueueGenericSend+0x200>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	e00a      	b.n	8007ce0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cd0:	4b39      	ldr	r3, [pc, #228]	@ (8007db8 <xQueueGenericSend+0x200>)
 8007cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ce0:	f001 feec 	bl	8009abc <vPortExitCritical>
				return pdPASS;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e063      	b.n	8007db0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cee:	f001 fee5 	bl	8009abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e05c      	b.n	8007db0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f85b 	bl	8008dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d0a:	f001 fed7 	bl	8009abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d0e:	f000 fdc7 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d12:	f001 fea3 	bl	8009a5c <vPortEnterCritical>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d103      	bne.n	8007d2c <xQueueGenericSend+0x174>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d32:	b25b      	sxtb	r3, r3
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d103      	bne.n	8007d42 <xQueueGenericSend+0x18a>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d42:	f001 febb 	bl	8009abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d46:	1d3a      	adds	r2, r7, #4
 8007d48:	f107 0314 	add.w	r3, r7, #20
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f84a 	bl	8008de8 <xTaskCheckForTimeOut>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d124      	bne.n	8007da4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d5c:	f000 fac8 	bl	80082f0 <prvIsQueueFull>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d018      	beq.n	8007d98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	3310      	adds	r3, #16
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 ff6e 	bl	8008c50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d76:	f000 fa53 	bl	8008220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d7a:	f000 fd9f 	bl	80088bc <xTaskResumeAll>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f47f af7c 	bne.w	8007c7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <xQueueGenericSend+0x200>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	e772      	b.n	8007c7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d9a:	f000 fa41 	bl	8008220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d9e:	f000 fd8d 	bl	80088bc <xTaskResumeAll>
 8007da2:	e76c      	b.n	8007c7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007da6:	f000 fa3b 	bl	8008220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007daa:	f000 fd87 	bl	80088bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dae:	2300      	movs	r3, #0
		}
	}
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3738      	adds	r7, #56	@ 0x38
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	@ 0x38
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	e7fd      	b.n	8007de8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <xQueueGenericSendFromISR+0x3e>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <xQueueGenericSendFromISR+0x42>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <xQueueGenericSendFromISR+0x44>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	623b      	str	r3, [r7, #32]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSendFromISR+0x6e>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <xQueueGenericSendFromISR+0x72>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueGenericSendFromISR+0x74>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61fb      	str	r3, [r7, #28]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4c:	f001 fec8 	bl	8009be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e50:	f3ef 8211 	mrs	r2, BASEPRI
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	61ba      	str	r2, [r7, #24]
 8007e66:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d302      	bcc.n	8007e7e <xQueueGenericSendFromISR+0xc2>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d12c      	bne.n	8007ed8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e8e:	f000 f937 	bl	8008100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e92:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d112      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d016      	beq.n	8007ed2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	3324      	adds	r3, #36	@ 0x24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 ff23 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e007      	b.n	8007ed2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	b25a      	sxtb	r2, r3
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007ed6:	e001      	b.n	8007edc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ee6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3738      	adds	r7, #56	@ 0x38
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	@ 0x30
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <xQueueReceive+0x32>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	623b      	str	r3, [r7, #32]
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	e7fd      	b.n	8007f22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <xQueueReceive+0x40>
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <xQueueReceive+0x44>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <xQueueReceive+0x46>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <xQueueReceive+0x62>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	61fb      	str	r3, [r7, #28]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f56:	f001 f891 	bl	800907c <xTaskGetSchedulerState>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <xQueueReceive+0x72>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <xQueueReceive+0x76>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <xQueueReceive+0x78>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <xQueueReceive+0x94>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61bb      	str	r3, [r7, #24]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f88:	f001 fd68 	bl	8009a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01f      	beq.n	8007fd8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f9c:	f000 f91a 	bl	80081d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	3310      	adds	r3, #16
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fe9d 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80080b4 <xQueueReceive+0x1c0>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fd0:	f001 fd74 	bl	8009abc <vPortExitCritical>
				return pdPASS;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e069      	b.n	80080ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fde:	f001 fd6d 	bl	8009abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e062      	b.n	80080ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fec:	f107 0310 	add.w	r3, r7, #16
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fee3 	bl	8008dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ffa:	f001 fd5f 	bl	8009abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffe:	f000 fc4f 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008002:	f001 fd2b 	bl	8009a5c <vPortEnterCritical>
 8008006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d103      	bne.n	800801c <xQueueReceive+0x128>
 8008014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d103      	bne.n	8008032 <xQueueReceive+0x13e>
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008032:	f001 fd43 	bl	8009abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008036:	1d3a      	adds	r2, r7, #4
 8008038:	f107 0310 	add.w	r3, r7, #16
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fed2 	bl	8008de8 <xTaskCheckForTimeOut>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d123      	bne.n	8008092 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800804a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800804c:	f000 f93a 	bl	80082c4 <prvIsQueueEmpty>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d017      	beq.n	8008086 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	3324      	adds	r3, #36	@ 0x24
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fdf6 	bl	8008c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008066:	f000 f8db 	bl	8008220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800806a:	f000 fc27 	bl	80088bc <xTaskResumeAll>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d189      	bne.n	8007f88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008074:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <xQueueReceive+0x1c0>)
 8008076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	e780      	b.n	8007f88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008088:	f000 f8ca 	bl	8008220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800808c:	f000 fc16 	bl	80088bc <xTaskResumeAll>
 8008090:	e77a      	b.n	8007f88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008094:	f000 f8c4 	bl	8008220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008098:	f000 fc10 	bl	80088bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800809e:	f000 f911 	bl	80082c4 <prvIsQueueEmpty>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f43f af6f 	beq.w	8007f88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3730      	adds	r7, #48	@ 0x30
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <vQueueDelete+0x2a>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60bb      	str	r3, [r7, #8]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f944 	bl	8008370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f001 fe7c 	bl	8009df0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10d      	bne.n	800813a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d14d      	bne.n	80081c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 ffc4 	bl	80090b8 <xTaskPriorityDisinherit>
 8008130:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	605a      	str	r2, [r3, #4]
 8008138:	e043      	b.n	80081c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d119      	bne.n	8008174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6898      	ldr	r0, [r3, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008148:	461a      	mov	r2, r3
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	f001 ffe8 	bl	800a120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008158:	441a      	add	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d32b      	bcc.n	80081c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	e026      	b.n	80081c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	68d8      	ldr	r0, [r3, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817c:	461a      	mov	r2, r3
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	f001 ffce 	bl	800a120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818c:	425b      	negs	r3, r3
 800818e:	441a      	add	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d207      	bcs.n	80081b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a8:	425b      	negs	r3, r3
 80081aa:	441a      	add	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d105      	bne.n	80081c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80081ca:	697b      	ldr	r3, [r7, #20]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d018      	beq.n	8008218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ee:	441a      	add	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d303      	bcc.n	8008208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68d9      	ldr	r1, [r3, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008210:	461a      	mov	r2, r3
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	f001 ff84 	bl	800a120 <memcpy>
	}
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008228:	f001 fc18 	bl	8009a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008234:	e011      	b.n	800825a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823a:	2b00      	cmp	r3, #0
 800823c:	d012      	beq.n	8008264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3324      	adds	r3, #36	@ 0x24
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fd56 	bl	8008cf4 <xTaskRemoveFromEventList>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800824e:	f000 fe2f 	bl	8008eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	3b01      	subs	r3, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800825a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dce9      	bgt.n	8008236 <prvUnlockQueue+0x16>
 8008262:	e000      	b.n	8008266 <prvUnlockQueue+0x46>
					break;
 8008264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	22ff      	movs	r2, #255	@ 0xff
 800826a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800826e:	f001 fc25 	bl	8009abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008272:	f001 fbf3 	bl	8009a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800827c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800827e:	e011      	b.n	80082a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d012      	beq.n	80082ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3310      	adds	r3, #16
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fd31 	bl	8008cf4 <xTaskRemoveFromEventList>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008298:	f000 fe0a 	bl	8008eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	3b01      	subs	r3, #1
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dce9      	bgt.n	8008280 <prvUnlockQueue+0x60>
 80082ac:	e000      	b.n	80082b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	22ff      	movs	r2, #255	@ 0xff
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082b8:	f001 fc00 	bl	8009abc <vPortExitCritical>
}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082cc:	f001 fbc6 	bl	8009a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e001      	b.n	80082e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082e2:	f001 fbeb 	bl	8009abc <vPortExitCritical>

	return xReturn;
 80082e6:	68fb      	ldr	r3, [r7, #12]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f8:	f001 fbb0 	bl	8009a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	429a      	cmp	r2, r3
 8008306:	d102      	bne.n	800830e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008308:	2301      	movs	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e001      	b.n	8008312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008312:	f001 fbd3 	bl	8009abc <vPortExitCritical>

	return xReturn;
 8008316:	68fb      	ldr	r3, [r7, #12]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	e014      	b.n	800835a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008330:	4a0e      	ldr	r2, [pc, #56]	@ (800836c <vQueueAddToRegistry+0x4c>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800833c:	490b      	ldr	r1, [pc, #44]	@ (800836c <vQueueAddToRegistry+0x4c>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008346:	4a09      	ldr	r2, [pc, #36]	@ (800836c <vQueueAddToRegistry+0x4c>)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008352:	e006      	b.n	8008362 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b07      	cmp	r3, #7
 800835e:	d9e7      	bls.n	8008330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr
 800836c:	200010c4 	.word	0x200010c4

08008370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e016      	b.n	80083ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800837e:	4a10      	ldr	r2, [pc, #64]	@ (80083c0 <vQueueUnregisterQueue+0x50>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4413      	add	r3, r2
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d10b      	bne.n	80083a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800838e:	4a0c      	ldr	r2, [pc, #48]	@ (80083c0 <vQueueUnregisterQueue+0x50>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2100      	movs	r1, #0
 8008394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008398:	4a09      	ldr	r2, [pc, #36]	@ (80083c0 <vQueueUnregisterQueue+0x50>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	4413      	add	r3, r2
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
				break;
 80083a4:	e006      	b.n	80083b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b07      	cmp	r3, #7
 80083b0:	d9e5      	bls.n	800837e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200010c4 	.word	0x200010c4

080083c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083d4:	f001 fb42 	bl	8009a5c <vPortEnterCritical>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083de:	b25b      	sxtb	r3, r3
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d103      	bne.n	80083ee <vQueueWaitForMessageRestricted+0x2a>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f4:	b25b      	sxtb	r3, r3
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d103      	bne.n	8008404 <vQueueWaitForMessageRestricted+0x40>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008404:	f001 fb5a 	bl	8009abc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3324      	adds	r3, #36	@ 0x24
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fc3f 	bl	8008c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800841e:	6978      	ldr	r0, [r7, #20]
 8008420:	f7ff fefe 	bl	8008220 <prvUnlockQueue>
	}
 8008424:	bf00      	nop
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08e      	sub	sp, #56	@ 0x38
 8008430:	af04      	add	r7, sp, #16
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800843a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10b      	bne.n	8008458 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	623b      	str	r3, [r7, #32]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <xTaskCreateStatic+0x4a>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	61fb      	str	r3, [r7, #28]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008476:	235c      	movs	r3, #92	@ 0x5c
 8008478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b5c      	cmp	r3, #92	@ 0x5c
 800847e:	d00b      	beq.n	8008498 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	61bb      	str	r3, [r7, #24]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01e      	beq.n	80084dc <xTaskCreateStatic+0xb0>
 800849e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084b6:	2300      	movs	r3, #0
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f850 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084d6:	f000 f8d5 	bl	8008684 <prvAddNewTaskToReadyList>
 80084da:	e001      	b.n	80084e0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e0:	697b      	ldr	r3, [r7, #20]
	}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3728      	adds	r7, #40	@ 0x28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b08c      	sub	sp, #48	@ 0x30
 80084ee:	af04      	add	r7, sp, #16
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 fbae 	bl	8009c60 <pvPortMalloc>
 8008504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00e      	beq.n	800852a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800850c:	205c      	movs	r0, #92	@ 0x5c
 800850e:	f001 fba7 	bl	8009c60 <pvPortMalloc>
 8008512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008520:	e005      	b.n	800852e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f001 fc64 	bl	8009df0 <vPortFree>
 8008528:	e001      	b.n	800852e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d017      	beq.n	8008564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	2300      	movs	r3, #0
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f80e 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008558:	69f8      	ldr	r0, [r7, #28]
 800855a:	f000 f893 	bl	8008684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800855e:	2301      	movs	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	e002      	b.n	800856a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800856a:	69bb      	ldr	r3, [r7, #24]
	}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	461a      	mov	r2, r3
 800858c:	21a5      	movs	r1, #165	@ 0xa5
 800858e:	f001 fd65 	bl	800a05c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800859c:	3b01      	subs	r3, #1
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	617b      	str	r3, [r7, #20]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	e012      	b.n	80085fa <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	7819      	ldrb	r1, [r3, #0]
 80085dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	3334      	adds	r3, #52	@ 0x34
 80085e4:	460a      	mov	r2, r1
 80085e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2b0f      	cmp	r3, #15
 80085fe:	d9e9      	bls.n	80085d4 <prvInitialiseNewTask+0x60>
 8008600:	e000      	b.n	8008604 <prvInitialiseNewTask+0x90>
		{
			break;
 8008602:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	2b37      	cmp	r3, #55	@ 0x37
 8008610:	d901      	bls.n	8008616 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008612:	2337      	movs	r3, #55	@ 0x37
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800861a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008620:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	2200      	movs	r2, #0
 8008626:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	3304      	adds	r3, #4
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff f87c 	bl	800772a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	3318      	adds	r3, #24
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff f877 	bl	800772a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008640:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008650:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	2200      	movs	r2, #0
 8008656:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	69b8      	ldr	r0, [r7, #24]
 8008666:	f001 f90b 	bl	8009880 <pxPortInitialiseStack>
 800866a:	4602      	mov	r2, r0
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800867c:	bf00      	nop
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800868c:	f001 f9e6 	bl	8009a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008690:	4b2d      	ldr	r3, [pc, #180]	@ (8008748 <prvAddNewTaskToReadyList+0xc4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3301      	adds	r3, #1
 8008696:	4a2c      	ldr	r2, [pc, #176]	@ (8008748 <prvAddNewTaskToReadyList+0xc4>)
 8008698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800869a:	4b2c      	ldr	r3, [pc, #176]	@ (800874c <prvAddNewTaskToReadyList+0xc8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086a2:	4a2a      	ldr	r2, [pc, #168]	@ (800874c <prvAddNewTaskToReadyList+0xc8>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086a8:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <prvAddNewTaskToReadyList+0xc4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d110      	bne.n	80086d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086b0:	f000 fc22 	bl	8008ef8 <prvInitialiseTaskLists>
 80086b4:	e00d      	b.n	80086d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086b6:	4b26      	ldr	r3, [pc, #152]	@ (8008750 <prvAddNewTaskToReadyList+0xcc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086be:	4b23      	ldr	r3, [pc, #140]	@ (800874c <prvAddNewTaskToReadyList+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d802      	bhi.n	80086d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086cc:	4a1f      	ldr	r2, [pc, #124]	@ (800874c <prvAddNewTaskToReadyList+0xc8>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086d2:	4b20      	ldr	r3, [pc, #128]	@ (8008754 <prvAddNewTaskToReadyList+0xd0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008754 <prvAddNewTaskToReadyList+0xd0>)
 80086da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008754 <prvAddNewTaskToReadyList+0xd0>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008758 <prvAddNewTaskToReadyList+0xd4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d903      	bls.n	80086f8 <prvAddNewTaskToReadyList+0x74>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a18      	ldr	r2, [pc, #96]	@ (8008758 <prvAddNewTaskToReadyList+0xd4>)
 80086f6:	6013      	str	r3, [r2, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4a15      	ldr	r2, [pc, #84]	@ (800875c <prvAddNewTaskToReadyList+0xd8>)
 8008706:	441a      	add	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3304      	adds	r3, #4
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f7ff f817 	bl	8007742 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008714:	f001 f9d2 	bl	8009abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008718:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <prvAddNewTaskToReadyList+0xcc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008720:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <prvAddNewTaskToReadyList+0xc8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	429a      	cmp	r2, r3
 800872c:	d207      	bcs.n	800873e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800872e:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <prvAddNewTaskToReadyList+0xdc>)
 8008730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800873e:	bf00      	nop
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200015d8 	.word	0x200015d8
 800874c:	20001104 	.word	0x20001104
 8008750:	200015e4 	.word	0x200015e4
 8008754:	200015f4 	.word	0x200015f4
 8008758:	200015e0 	.word	0x200015e0
 800875c:	20001108 	.word	0x20001108
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d018      	beq.n	80087a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008776:	4b14      	ldr	r3, [pc, #80]	@ (80087c8 <vTaskDelay+0x64>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <vTaskDelay+0x32>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	60bb      	str	r3, [r7, #8]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008796:	f000 f883 	bl	80088a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800879a:	2100      	movs	r1, #0
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fcfb 	bl	8009198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087a2:	f000 f88b 	bl	80088bc <xTaskResumeAll>
 80087a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d107      	bne.n	80087be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087ae:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <vTaskDelay+0x68>)
 80087b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20001600 	.word	0x20001600
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	@ 0x28
 80087d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087de:	463a      	mov	r2, r7
 80087e0:	1d39      	adds	r1, r7, #4
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe ff4e 	bl	8007688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	2300      	movs	r3, #0
 80087fc:	460a      	mov	r2, r1
 80087fe:	4922      	ldr	r1, [pc, #136]	@ (8008888 <vTaskStartScheduler+0xb8>)
 8008800:	4822      	ldr	r0, [pc, #136]	@ (800888c <vTaskStartScheduler+0xbc>)
 8008802:	f7ff fe13 	bl	800842c <xTaskCreateStatic>
 8008806:	4603      	mov	r3, r0
 8008808:	4a21      	ldr	r2, [pc, #132]	@ (8008890 <vTaskStartScheduler+0xc0>)
 800880a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800880c:	4b20      	ldr	r3, [pc, #128]	@ (8008890 <vTaskStartScheduler+0xc0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e001      	b.n	800881e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d102      	bne.n	800882a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008824:	f000 fd0c 	bl	8009240 <xTimerCreateTimerTask>
 8008828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d116      	bne.n	800885e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008844:	4b13      	ldr	r3, [pc, #76]	@ (8008894 <vTaskStartScheduler+0xc4>)
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800884c:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <vTaskStartScheduler+0xc8>)
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008852:	4b12      	ldr	r3, [pc, #72]	@ (800889c <vTaskStartScheduler+0xcc>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008858:	f001 f88e 	bl	8009978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800885c:	e00f      	b.n	800887e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d10b      	bne.n	800887e <vTaskStartScheduler+0xae>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	e7fd      	b.n	800887a <vTaskStartScheduler+0xaa>
}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	0800afac 	.word	0x0800afac
 800888c:	08008ec9 	.word	0x08008ec9
 8008890:	200015fc 	.word	0x200015fc
 8008894:	200015f8 	.word	0x200015f8
 8008898:	200015e4 	.word	0x200015e4
 800889c:	200015dc 	.word	0x200015dc

080088a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088a4:	4b04      	ldr	r3, [pc, #16]	@ (80088b8 <vTaskSuspendAll+0x18>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a03      	ldr	r2, [pc, #12]	@ (80088b8 <vTaskSuspendAll+0x18>)
 80088ac:	6013      	str	r3, [r2, #0]
}
 80088ae:	bf00      	nop
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20001600 	.word	0x20001600

080088bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ca:	4b42      	ldr	r3, [pc, #264]	@ (80089d4 <xTaskResumeAll+0x118>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <xTaskResumeAll+0x2e>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088ea:	f001 f8b7 	bl	8009a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ee:	4b39      	ldr	r3, [pc, #228]	@ (80089d4 <xTaskResumeAll+0x118>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4a37      	ldr	r2, [pc, #220]	@ (80089d4 <xTaskResumeAll+0x118>)
 80088f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f8:	4b36      	ldr	r3, [pc, #216]	@ (80089d4 <xTaskResumeAll+0x118>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d162      	bne.n	80089c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008900:	4b35      	ldr	r3, [pc, #212]	@ (80089d8 <xTaskResumeAll+0x11c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d05e      	beq.n	80089c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008908:	e02f      	b.n	800896a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800890a:	4b34      	ldr	r3, [pc, #208]	@ (80089dc <xTaskResumeAll+0x120>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3318      	adds	r3, #24
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ff6e 	bl	80077f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3304      	adds	r3, #4
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe ff69 	bl	80077f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892a:	4b2d      	ldr	r3, [pc, #180]	@ (80089e0 <xTaskResumeAll+0x124>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d903      	bls.n	800893a <xTaskResumeAll+0x7e>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008936:	4a2a      	ldr	r2, [pc, #168]	@ (80089e0 <xTaskResumeAll+0x124>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a27      	ldr	r2, [pc, #156]	@ (80089e4 <xTaskResumeAll+0x128>)
 8008948:	441a      	add	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7fe fef6 	bl	8007742 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895a:	4b23      	ldr	r3, [pc, #140]	@ (80089e8 <xTaskResumeAll+0x12c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008964:	4b21      	ldr	r3, [pc, #132]	@ (80089ec <xTaskResumeAll+0x130>)
 8008966:	2201      	movs	r2, #1
 8008968:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800896a:	4b1c      	ldr	r3, [pc, #112]	@ (80089dc <xTaskResumeAll+0x120>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1cb      	bne.n	800890a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008978:	f000 fb5c 	bl	8009034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800897c:	4b1c      	ldr	r3, [pc, #112]	@ (80089f0 <xTaskResumeAll+0x134>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d010      	beq.n	80089aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008988:	f000 f844 	bl	8008a14 <xTaskIncrementTick>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008992:	4b16      	ldr	r3, [pc, #88]	@ (80089ec <xTaskResumeAll+0x130>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3b01      	subs	r3, #1
 800899c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1f1      	bne.n	8008988 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80089a4:	4b12      	ldr	r3, [pc, #72]	@ (80089f0 <xTaskResumeAll+0x134>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089aa:	4b10      	ldr	r3, [pc, #64]	@ (80089ec <xTaskResumeAll+0x130>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d009      	beq.n	80089c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089b2:	2301      	movs	r3, #1
 80089b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089b6:	4b0f      	ldr	r3, [pc, #60]	@ (80089f4 <xTaskResumeAll+0x138>)
 80089b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c6:	f001 f879 	bl	8009abc <vPortExitCritical>

	return xAlreadyYielded;
 80089ca:	68bb      	ldr	r3, [r7, #8]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20001600 	.word	0x20001600
 80089d8:	200015d8 	.word	0x200015d8
 80089dc:	20001598 	.word	0x20001598
 80089e0:	200015e0 	.word	0x200015e0
 80089e4:	20001108 	.word	0x20001108
 80089e8:	20001104 	.word	0x20001104
 80089ec:	200015ec 	.word	0x200015ec
 80089f0:	200015e8 	.word	0x200015e8
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089fe:	4b04      	ldr	r3, [pc, #16]	@ (8008a10 <xTaskGetTickCount+0x18>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a04:	687b      	ldr	r3, [r7, #4]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	200015dc 	.word	0x200015dc

08008a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1e:	4b52      	ldr	r3, [pc, #328]	@ (8008b68 <xTaskIncrementTick+0x154>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 808f 	bne.w	8008b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a28:	4b50      	ldr	r3, [pc, #320]	@ (8008b6c <xTaskIncrementTick+0x158>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a30:	4a4e      	ldr	r2, [pc, #312]	@ (8008b6c <xTaskIncrementTick+0x158>)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d121      	bne.n	8008a80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a3c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b70 <xTaskIncrementTick+0x15c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	603b      	str	r3, [r7, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xTaskIncrementTick+0x46>
 8008a5e:	4b44      	ldr	r3, [pc, #272]	@ (8008b70 <xTaskIncrementTick+0x15c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	4b43      	ldr	r3, [pc, #268]	@ (8008b74 <xTaskIncrementTick+0x160>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a41      	ldr	r2, [pc, #260]	@ (8008b70 <xTaskIncrementTick+0x15c>)
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	4a41      	ldr	r2, [pc, #260]	@ (8008b74 <xTaskIncrementTick+0x160>)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	4b41      	ldr	r3, [pc, #260]	@ (8008b78 <xTaskIncrementTick+0x164>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a3f      	ldr	r2, [pc, #252]	@ (8008b78 <xTaskIncrementTick+0x164>)
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	f000 fada 	bl	8009034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a80:	4b3e      	ldr	r3, [pc, #248]	@ (8008b7c <xTaskIncrementTick+0x168>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d34e      	bcc.n	8008b28 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a8a:	4b39      	ldr	r3, [pc, #228]	@ (8008b70 <xTaskIncrementTick+0x15c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <xTaskIncrementTick+0x84>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e000      	b.n	8008a9a <xTaskIncrementTick+0x86>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9e:	4b37      	ldr	r3, [pc, #220]	@ (8008b7c <xTaskIncrementTick+0x168>)
 8008aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa4:	601a      	str	r2, [r3, #0]
					break;
 8008aa6:	e03f      	b.n	8008b28 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008aa8:	4b31      	ldr	r3, [pc, #196]	@ (8008b70 <xTaskIncrementTick+0x15c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d203      	bcs.n	8008ac8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8008b7c <xTaskIncrementTick+0x168>)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6013      	str	r3, [r2, #0]
						break;
 8008ac6:	e02f      	b.n	8008b28 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fe93 	bl	80077f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3318      	adds	r3, #24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fe8a 	bl	80077f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4b25      	ldr	r3, [pc, #148]	@ (8008b80 <xTaskIncrementTick+0x16c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <xTaskIncrementTick+0xe4>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af4:	4a22      	ldr	r2, [pc, #136]	@ (8008b80 <xTaskIncrementTick+0x16c>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <xTaskIncrementTick+0x170>)
 8008b06:	441a      	add	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe fe17 	bl	8007742 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b18:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <xTaskIncrementTick+0x174>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3b3      	bcc.n	8008a8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b22:	2301      	movs	r3, #1
 8008b24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b26:	e7b0      	b.n	8008a8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b28:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <xTaskIncrementTick+0x174>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2e:	4915      	ldr	r1, [pc, #84]	@ (8008b84 <xTaskIncrementTick+0x170>)
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d907      	bls.n	8008b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e004      	b.n	8008b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b46:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <xTaskIncrementTick+0x178>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b8c <xTaskIncrementTick+0x178>)
 8008b4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b50:	4b0f      	ldr	r3, [pc, #60]	@ (8008b90 <xTaskIncrementTick+0x17c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b5c:	697b      	ldr	r3, [r7, #20]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001600 	.word	0x20001600
 8008b6c:	200015dc 	.word	0x200015dc
 8008b70:	20001590 	.word	0x20001590
 8008b74:	20001594 	.word	0x20001594
 8008b78:	200015f0 	.word	0x200015f0
 8008b7c:	200015f8 	.word	0x200015f8
 8008b80:	200015e0 	.word	0x200015e0
 8008b84:	20001108 	.word	0x20001108
 8008b88:	20001104 	.word	0x20001104
 8008b8c:	200015e8 	.word	0x200015e8
 8008b90:	200015ec 	.word	0x200015ec

08008b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b9a:	4b28      	ldr	r3, [pc, #160]	@ (8008c3c <vTaskSwitchContext+0xa8>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ba2:	4b27      	ldr	r3, [pc, #156]	@ (8008c40 <vTaskSwitchContext+0xac>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ba8:	e042      	b.n	8008c30 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008baa:	4b25      	ldr	r3, [pc, #148]	@ (8008c40 <vTaskSwitchContext+0xac>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008bb0:	4b24      	ldr	r3, [pc, #144]	@ (8008c44 <vTaskSwitchContext+0xb0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	e011      	b.n	8008bdc <vTaskSwitchContext+0x48>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10b      	bne.n	8008bd6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <vTaskSwitchContext+0x3e>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	491a      	ldr	r1, [pc, #104]	@ (8008c48 <vTaskSwitchContext+0xb4>)
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0e3      	beq.n	8008bb8 <vTaskSwitchContext+0x24>
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a13      	ldr	r2, [pc, #76]	@ (8008c48 <vTaskSwitchContext+0xb4>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3308      	adds	r3, #8
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d104      	bne.n	8008c20 <vTaskSwitchContext+0x8c>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	605a      	str	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	4a09      	ldr	r2, [pc, #36]	@ (8008c4c <vTaskSwitchContext+0xb8>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4a06      	ldr	r2, [pc, #24]	@ (8008c44 <vTaskSwitchContext+0xb0>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20001600 	.word	0x20001600
 8008c40:	200015ec 	.word	0x200015ec
 8008c44:	200015e0 	.word	0x200015e0
 8008c48:	20001108 	.word	0x20001108
 8008c4c:	20001104 	.word	0x20001104

08008c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c78:	4b07      	ldr	r3, [pc, #28]	@ (8008c98 <vTaskPlaceOnEventList+0x48>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3318      	adds	r3, #24
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7fe fd81 	bl	8007788 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c86:	2101      	movs	r1, #1
 8008c88:	6838      	ldr	r0, [r7, #0]
 8008c8a:	f000 fa85 	bl	8009198 <prvAddCurrentTaskToDelayedList>
}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20001104 	.word	0x20001104

08008c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	617b      	str	r3, [r7, #20]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7fe fd37 	bl	8007742 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295
 8008cde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	68b8      	ldr	r0, [r7, #8]
 8008ce4:	f000 fa58 	bl	8009198 <prvAddCurrentTaskToDelayedList>
	}
 8008ce8:	bf00      	nop
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20001104 	.word	0x20001104

08008cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10b      	bne.n	8008d22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	60fb      	str	r3, [r7, #12]
}
 8008d1c:	bf00      	nop
 8008d1e:	bf00      	nop
 8008d20:	e7fd      	b.n	8008d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3318      	adds	r3, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fd66 	bl	80077f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008da4 <xTaskRemoveFromEventList+0xb0>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d11d      	bne.n	8008d70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fd5d 	bl	80077f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d42:	4b19      	ldr	r3, [pc, #100]	@ (8008da8 <xTaskRemoveFromEventList+0xb4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d903      	bls.n	8008d52 <xTaskRemoveFromEventList+0x5e>
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <xTaskRemoveFromEventList+0xb4>)
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4a13      	ldr	r2, [pc, #76]	@ (8008dac <xTaskRemoveFromEventList+0xb8>)
 8008d60:	441a      	add	r2, r3
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f7fe fcea 	bl	8007742 <vListInsertEnd>
 8008d6e:	e005      	b.n	8008d7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	3318      	adds	r3, #24
 8008d74:	4619      	mov	r1, r3
 8008d76:	480e      	ldr	r0, [pc, #56]	@ (8008db0 <xTaskRemoveFromEventList+0xbc>)
 8008d78:	f7fe fce3 	bl	8007742 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d80:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <xTaskRemoveFromEventList+0xc0>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d905      	bls.n	8008d96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <xTaskRemoveFromEventList+0xc4>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e001      	b.n	8008d9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008d9a:	697b      	ldr	r3, [r7, #20]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20001600 	.word	0x20001600
 8008da8:	200015e0 	.word	0x200015e0
 8008dac:	20001108 	.word	0x20001108
 8008db0:	20001598 	.word	0x20001598
 8008db4:	20001104 	.word	0x20001104
 8008db8:	200015ec 	.word	0x200015ec

08008dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dc4:	4b06      	ldr	r3, [pc, #24]	@ (8008de0 <vTaskInternalSetTimeOutState+0x24>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dcc:	4b05      	ldr	r3, [pc, #20]	@ (8008de4 <vTaskInternalSetTimeOutState+0x28>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	605a      	str	r2, [r3, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	200015f0 	.word	0x200015f0
 8008de4:	200015dc 	.word	0x200015dc

08008de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	613b      	str	r3, [r7, #16]
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60fb      	str	r3, [r7, #12]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e2e:	f000 fe15 	bl	8009a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea8 <xTaskCheckForTimeOut+0xc0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d102      	bne.n	8008e52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e023      	b.n	8008e9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	4b15      	ldr	r3, [pc, #84]	@ (8008eac <xTaskCheckForTimeOut+0xc4>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d007      	beq.n	8008e6e <xTaskCheckForTimeOut+0x86>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e015      	b.n	8008e9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d20b      	bcs.n	8008e90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ff99 	bl	8008dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	e004      	b.n	8008e9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e9a:	f000 fe0f 	bl	8009abc <vPortExitCritical>

	return xReturn;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200015dc 	.word	0x200015dc
 8008eac:	200015f0 	.word	0x200015f0

08008eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008eb4:	4b03      	ldr	r3, [pc, #12]	@ (8008ec4 <vTaskMissedYield+0x14>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
}
 8008eba:	bf00      	nop
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	200015ec 	.word	0x200015ec

08008ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ed0:	f000 f852 	bl	8008f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ed4:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <prvIdleTask+0x28>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d9f9      	bls.n	8008ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <prvIdleTask+0x2c>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eec:	e7f0      	b.n	8008ed0 <prvIdleTask+0x8>
 8008eee:	bf00      	nop
 8008ef0:	20001108 	.word	0x20001108
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	e00c      	b.n	8008f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4a12      	ldr	r2, [pc, #72]	@ (8008f58 <prvInitialiseTaskLists+0x60>)
 8008f10:	4413      	add	r3, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fbea 	bl	80076ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b37      	cmp	r3, #55	@ 0x37
 8008f22:	d9ef      	bls.n	8008f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f24:	480d      	ldr	r0, [pc, #52]	@ (8008f5c <prvInitialiseTaskLists+0x64>)
 8008f26:	f7fe fbe1 	bl	80076ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f2a:	480d      	ldr	r0, [pc, #52]	@ (8008f60 <prvInitialiseTaskLists+0x68>)
 8008f2c:	f7fe fbde 	bl	80076ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f30:	480c      	ldr	r0, [pc, #48]	@ (8008f64 <prvInitialiseTaskLists+0x6c>)
 8008f32:	f7fe fbdb 	bl	80076ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f36:	480c      	ldr	r0, [pc, #48]	@ (8008f68 <prvInitialiseTaskLists+0x70>)
 8008f38:	f7fe fbd8 	bl	80076ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f3c:	480b      	ldr	r0, [pc, #44]	@ (8008f6c <prvInitialiseTaskLists+0x74>)
 8008f3e:	f7fe fbd5 	bl	80076ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f42:	4b0b      	ldr	r3, [pc, #44]	@ (8008f70 <prvInitialiseTaskLists+0x78>)
 8008f44:	4a05      	ldr	r2, [pc, #20]	@ (8008f5c <prvInitialiseTaskLists+0x64>)
 8008f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f48:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <prvInitialiseTaskLists+0x7c>)
 8008f4a:	4a05      	ldr	r2, [pc, #20]	@ (8008f60 <prvInitialiseTaskLists+0x68>)
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20001108 	.word	0x20001108
 8008f5c:	20001568 	.word	0x20001568
 8008f60:	2000157c 	.word	0x2000157c
 8008f64:	20001598 	.word	0x20001598
 8008f68:	200015ac 	.word	0x200015ac
 8008f6c:	200015c4 	.word	0x200015c4
 8008f70:	20001590 	.word	0x20001590
 8008f74:	20001594 	.word	0x20001594

08008f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f7e:	e019      	b.n	8008fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f80:	f000 fd6c 	bl	8009a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f84:	4b10      	ldr	r3, [pc, #64]	@ (8008fc8 <prvCheckTasksWaitingTermination+0x50>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fc31 	bl	80077f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f96:	4b0d      	ldr	r3, [pc, #52]	@ (8008fcc <prvCheckTasksWaitingTermination+0x54>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fcc <prvCheckTasksWaitingTermination+0x54>)
 8008f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008faa:	f000 fd87 	bl	8009abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f810 	bl	8008fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb4:	4b06      	ldr	r3, [pc, #24]	@ (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e1      	bne.n	8008f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200015ac 	.word	0x200015ac
 8008fcc:	200015d8 	.word	0x200015d8
 8008fd0:	200015c0 	.word	0x200015c0

08008fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d108      	bne.n	8008ff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 ff00 	bl	8009df0 <vPortFree>
				vPortFree( pxTCB );
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fefd 	bl	8009df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ff6:	e019      	b.n	800902c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d103      	bne.n	800900a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fef4 	bl	8009df0 <vPortFree>
	}
 8009008:	e010      	b.n	800902c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009010:	2b02      	cmp	r3, #2
 8009012:	d00b      	beq.n	800902c <prvDeleteTCB+0x58>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	e7fd      	b.n	8009028 <prvDeleteTCB+0x54>
	}
 800902c:	bf00      	nop
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903a:	4b0e      	ldr	r3, [pc, #56]	@ (8009074 <prvResetNextTaskUnblockTime+0x40>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <prvResetNextTaskUnblockTime+0x14>
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <prvResetNextTaskUnblockTime+0x16>
 8009048:	2300      	movs	r3, #0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800904e:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <prvResetNextTaskUnblockTime+0x44>)
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009056:	e008      	b.n	800906a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009058:	4b06      	ldr	r3, [pc, #24]	@ (8009074 <prvResetNextTaskUnblockTime+0x40>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	4a04      	ldr	r2, [pc, #16]	@ (8009078 <prvResetNextTaskUnblockTime+0x44>)
 8009068:	6013      	str	r3, [r2, #0]
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr
 8009074:	20001590 	.word	0x20001590
 8009078:	200015f8 	.word	0x200015f8

0800907c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009082:	4b0b      	ldr	r3, [pc, #44]	@ (80090b0 <xTaskGetSchedulerState+0x34>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800908a:	2301      	movs	r3, #1
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	e008      	b.n	80090a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009090:	4b08      	ldr	r3, [pc, #32]	@ (80090b4 <xTaskGetSchedulerState+0x38>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009098:	2302      	movs	r3, #2
 800909a:	607b      	str	r3, [r7, #4]
 800909c:	e001      	b.n	80090a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800909e:	2300      	movs	r3, #0
 80090a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090a2:	687b      	ldr	r3, [r7, #4]
	}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	200015e4 	.word	0x200015e4
 80090b4:	20001600 	.word	0x20001600

080090b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d058      	beq.n	8009180 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090ce:	4b2f      	ldr	r3, [pc, #188]	@ (800918c <xTaskPriorityDisinherit+0xd4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d00b      	beq.n	80090f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	60fb      	str	r3, [r7, #12]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	60bb      	str	r3, [r7, #8]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009122:	429a      	cmp	r2, r3
 8009124:	d02c      	beq.n	8009180 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800912a:	2b00      	cmp	r3, #0
 800912c:	d128      	bne.n	8009180 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3304      	adds	r3, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fb60 	bl	80077f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009150:	4b0f      	ldr	r3, [pc, #60]	@ (8009190 <xTaskPriorityDisinherit+0xd8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d903      	bls.n	8009160 <xTaskPriorityDisinherit+0xa8>
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915c:	4a0c      	ldr	r2, [pc, #48]	@ (8009190 <xTaskPriorityDisinherit+0xd8>)
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4a09      	ldr	r2, [pc, #36]	@ (8009194 <xTaskPriorityDisinherit+0xdc>)
 800916e:	441a      	add	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fe fae3 	bl	8007742 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009180:	697b      	ldr	r3, [r7, #20]
	}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001104 	.word	0x20001104
 8009190:	200015e0 	.word	0x200015e0
 8009194:	20001108 	.word	0x20001108

08009198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091a2:	4b21      	ldr	r3, [pc, #132]	@ (8009228 <prvAddCurrentTaskToDelayedList+0x90>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a8:	4b20      	ldr	r3, [pc, #128]	@ (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe fb22 	bl	80077f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d10a      	bne.n	80091d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c2:	4b1a      	ldr	r3, [pc, #104]	@ (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4819      	ldr	r0, [pc, #100]	@ (8009230 <prvAddCurrentTaskToDelayedList+0x98>)
 80091cc:	f7fe fab9 	bl	8007742 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091d0:	e026      	b.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4413      	add	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091da:	4b14      	ldr	r3, [pc, #80]	@ (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d209      	bcs.n	80091fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b0f      	ldr	r3, [pc, #60]	@ (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fe fac6 	bl	8007788 <vListInsert>
}
 80091fc:	e010      	b.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fabc 	bl	8007788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009210:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d202      	bcs.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800921a:	4a08      	ldr	r2, [pc, #32]	@ (800923c <prvAddCurrentTaskToDelayedList+0xa4>)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	200015dc 	.word	0x200015dc
 800922c:	20001104 	.word	0x20001104
 8009230:	200015c4 	.word	0x200015c4
 8009234:	20001594 	.word	0x20001594
 8009238:	20001590 	.word	0x20001590
 800923c:	200015f8 	.word	0x200015f8

08009240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	@ 0x28
 8009244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800924a:	f000 fad9 	bl	8009800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800924e:	4b1d      	ldr	r3, [pc, #116]	@ (80092c4 <xTimerCreateTimerTask+0x84>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d021      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	f107 0108 	add.w	r1, r7, #8
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4618      	mov	r0, r3
 800926a:	f7fe fa25 	bl	80076b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	9202      	str	r2, [sp, #8]
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	2302      	movs	r3, #2
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	460a      	mov	r2, r1
 8009280:	4911      	ldr	r1, [pc, #68]	@ (80092c8 <xTimerCreateTimerTask+0x88>)
 8009282:	4812      	ldr	r0, [pc, #72]	@ (80092cc <xTimerCreateTimerTask+0x8c>)
 8009284:	f7ff f8d2 	bl	800842c <xTaskCreateStatic>
 8009288:	4603      	mov	r3, r0
 800928a:	4a11      	ldr	r2, [pc, #68]	@ (80092d0 <xTimerCreateTimerTask+0x90>)
 800928c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800928e:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <xTimerCreateTimerTask+0x90>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10b      	bne.n	80092b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092b8:	697b      	ldr	r3, [r7, #20]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20001634 	.word	0x20001634
 80092c8:	0800afb4 	.word	0x0800afb4
 80092cc:	080093f5 	.word	0x080093f5
 80092d0:	20001638 	.word	0x20001638

080092d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	@ 0x28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <xTimerGenericCommand+0x30>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	623b      	str	r3, [r7, #32]
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009304:	4b19      	ldr	r3, [pc, #100]	@ (800936c <xTimerGenericCommand+0x98>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d02a      	beq.n	8009362 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b05      	cmp	r3, #5
 800931c:	dc18      	bgt.n	8009350 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800931e:	f7ff fead 	bl	800907c <xTaskGetSchedulerState>
 8009322:	4603      	mov	r3, r0
 8009324:	2b02      	cmp	r3, #2
 8009326:	d109      	bne.n	800933c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009328:	4b10      	ldr	r3, [pc, #64]	@ (800936c <xTimerGenericCommand+0x98>)
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	f107 0110 	add.w	r1, r7, #16
 8009330:	2300      	movs	r3, #0
 8009332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009334:	f7fe fc40 	bl	8007bb8 <xQueueGenericSend>
 8009338:	6278      	str	r0, [r7, #36]	@ 0x24
 800933a:	e012      	b.n	8009362 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800933c:	4b0b      	ldr	r3, [pc, #44]	@ (800936c <xTimerGenericCommand+0x98>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f107 0110 	add.w	r1, r7, #16
 8009344:	2300      	movs	r3, #0
 8009346:	2200      	movs	r2, #0
 8009348:	f7fe fc36 	bl	8007bb8 <xQueueGenericSend>
 800934c:	6278      	str	r0, [r7, #36]	@ 0x24
 800934e:	e008      	b.n	8009362 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009350:	4b06      	ldr	r3, [pc, #24]	@ (800936c <xTimerGenericCommand+0x98>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f107 0110 	add.w	r1, r7, #16
 8009358:	2300      	movs	r3, #0
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	f7fe fd2e 	bl	8007dbc <xQueueGenericSendFromISR>
 8009360:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009364:	4618      	mov	r0, r3
 8009366:	3728      	adds	r7, #40	@ 0x28
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20001634 	.word	0x20001634

08009370 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af02      	add	r7, sp, #8
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800937a:	4b1d      	ldr	r3, [pc, #116]	@ (80093f0 <prvProcessExpiredTimer+0x80>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	3304      	adds	r3, #4
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fa35 	bl	80077f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d123      	bne.n	80093de <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	18d1      	adds	r1, r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	6978      	ldr	r0, [r7, #20]
 80093a4:	f000 f8cc 	bl	8009540 <prvInsertTimerInActiveList>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d017      	beq.n	80093de <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093ae:	2300      	movs	r3, #0
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	2100      	movs	r1, #0
 80093b8:	6978      	ldr	r0, [r7, #20]
 80093ba:	f7ff ff8b 	bl	80092d4 <xTimerGenericCommand>
 80093be:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	60fb      	str	r3, [r7, #12]
}
 80093d8:	bf00      	nop
 80093da:	bf00      	nop
 80093dc:	e7fd      	b.n	80093da <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	4798      	blx	r3
}
 80093e6:	bf00      	nop
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	2000162c 	.word	0x2000162c

080093f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093fc:	f107 0308 	add.w	r3, r7, #8
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f859 	bl	80094b8 <prvGetNextExpireTime>
 8009406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4619      	mov	r1, r3
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 f805 	bl	800941c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009412:	f000 f8d7 	bl	80095c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009416:	bf00      	nop
 8009418:	e7f0      	b.n	80093fc <prvTimerTask+0x8>
	...

0800941c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009426:	f7ff fa3b 	bl	80088a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942a:	f107 0308 	add.w	r3, r7, #8
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f866 	bl	8009500 <prvSampleTimeNow>
 8009434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d130      	bne.n	800949e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <prvProcessTimerOrBlockTask+0x3c>
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	429a      	cmp	r2, r3
 8009448:	d806      	bhi.n	8009458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800944a:	f7ff fa37 	bl	80088bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff8d 	bl	8009370 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009456:	e024      	b.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d008      	beq.n	8009470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800945e:	4b13      	ldr	r3, [pc, #76]	@ (80094ac <prvProcessTimerOrBlockTask+0x90>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	bf0c      	ite	eq
 8009468:	2301      	moveq	r3, #1
 800946a:	2300      	movne	r3, #0
 800946c:	b2db      	uxtb	r3, r3
 800946e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009470:	4b0f      	ldr	r3, [pc, #60]	@ (80094b0 <prvProcessTimerOrBlockTask+0x94>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4619      	mov	r1, r3
 800947e:	f7fe ffa1 	bl	80083c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009482:	f7ff fa1b 	bl	80088bc <xTaskResumeAll>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800948c:	4b09      	ldr	r3, [pc, #36]	@ (80094b4 <prvProcessTimerOrBlockTask+0x98>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	f3bf 8f6f 	isb	sy
}
 800949c:	e001      	b.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800949e:	f7ff fa0d 	bl	80088bc <xTaskResumeAll>
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001630 	.word	0x20001630
 80094b0:	20001634 	.word	0x20001634
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094c0:	4b0e      	ldr	r3, [pc, #56]	@ (80094fc <prvGetNextExpireTime+0x44>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bf0c      	ite	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	2300      	movne	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d105      	bne.n	80094ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094de:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <prvGetNextExpireTime+0x44>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e001      	b.n	80094ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094ee:	68fb      	ldr	r3, [r7, #12]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bc80      	pop	{r7}
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	2000162c 	.word	0x2000162c

08009500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009508:	f7ff fa76 	bl	80089f8 <xTaskGetTickCount>
 800950c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800950e:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <prvSampleTimeNow+0x3c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	429a      	cmp	r2, r3
 8009516:	d205      	bcs.n	8009524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009518:	f000 f910 	bl	800973c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e002      	b.n	800952a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800952a:	4a04      	ldr	r2, [pc, #16]	@ (800953c <prvSampleTimeNow+0x3c>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000163c 	.word	0x2000163c

08009540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d812      	bhi.n	800958c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e01b      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800957a:	4b10      	ldr	r3, [pc, #64]	@ (80095bc <prvInsertTimerInActiveList+0x7c>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fe f8ff 	bl	8007788 <vListInsert>
 800958a:	e012      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d206      	bcs.n	80095a2 <prvInsertTimerInActiveList+0x62>
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e007      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a2:	4b07      	ldr	r3, [pc, #28]	@ (80095c0 <prvInsertTimerInActiveList+0x80>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f7fe f8eb 	bl	8007788 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095b2:	697b      	ldr	r3, [r7, #20]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20001630 	.word	0x20001630
 80095c0:	2000162c 	.word	0x2000162c

080095c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	@ 0x38
 80095c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ca:	e0a5      	b.n	8009718 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da19      	bge.n	8009606 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095d2:	1d3b      	adds	r3, r7, #4
 80095d4:	3304      	adds	r3, #4
 80095d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	61fb      	str	r3, [r7, #28]
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	e7fd      	b.n	80095f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095fc:	6850      	ldr	r0, [r2, #4]
 80095fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009600:	6892      	ldr	r2, [r2, #8]
 8009602:	4611      	mov	r1, r2
 8009604:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f2c0 8085 	blt.w	8009718 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe f8ea 	bl	80077f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009624:	463b      	mov	r3, r7
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff ff6a 	bl	8009500 <prvSampleTimeNow>
 800962c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b09      	cmp	r3, #9
 8009632:	d86c      	bhi.n	800970e <prvProcessReceivedCommands+0x14a>
 8009634:	a201      	add	r2, pc, #4	@ (adr r2, 800963c <prvProcessReceivedCommands+0x78>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009665 	.word	0x08009665
 8009640:	08009665 	.word	0x08009665
 8009644:	08009665 	.word	0x08009665
 8009648:	0800970f 	.word	0x0800970f
 800964c:	080096c3 	.word	0x080096c3
 8009650:	080096fd 	.word	0x080096fd
 8009654:	08009665 	.word	0x08009665
 8009658:	08009665 	.word	0x08009665
 800965c:	0800970f 	.word	0x0800970f
 8009660:	080096c3 	.word	0x080096c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	18d1      	adds	r1, r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009672:	f7ff ff65 	bl	8009540 <prvInsertTimerInActiveList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d04a      	beq.n	8009712 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009682:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d142      	bne.n	8009712 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	441a      	add	r2, r3
 8009694:	2300      	movs	r3, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	2100      	movs	r1, #0
 800969c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800969e:	f7ff fe19 	bl	80092d4 <xTimerGenericCommand>
 80096a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d133      	bne.n	8009712 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61bb      	str	r3, [r7, #24]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	617b      	str	r3, [r7, #20]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	18d1      	adds	r1, r2, r3
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f6:	f7ff ff23 	bl	8009540 <prvInsertTimerInActiveList>
					break;
 80096fa:	e00d      	b.n	8009718 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d107      	bne.n	8009716 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8009706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009708:	f000 fb72 	bl	8009df0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800970c:	e003      	b.n	8009716 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800970e:	bf00      	nop
 8009710:	e002      	b.n	8009718 <prvProcessReceivedCommands+0x154>
					break;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <prvProcessReceivedCommands+0x154>
					break;
 8009716:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009718:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <prvProcessReceivedCommands+0x174>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	1d39      	adds	r1, r7, #4
 800971e:	2200      	movs	r2, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fbe7 	bl	8007ef4 <xQueueReceive>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	f47f af4f 	bne.w	80095cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800972e:	bf00      	nop
 8009730:	bf00      	nop
 8009732:	3730      	adds	r7, #48	@ 0x30
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20001634 	.word	0x20001634

0800973c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009742:	e046      	b.n	80097d2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009744:	4b2c      	ldr	r3, [pc, #176]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800974e:	4b2a      	ldr	r3, [pc, #168]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3304      	adds	r3, #4
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe f84b 	bl	80077f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d12f      	bne.n	80097d2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d90e      	bls.n	80097a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009790:	4b19      	ldr	r3, [pc, #100]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3304      	adds	r3, #4
 8009798:	4619      	mov	r1, r3
 800979a:	4610      	mov	r0, r2
 800979c:	f7fd fff4 	bl	8007788 <vListInsert>
 80097a0:	e017      	b.n	80097d2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097a2:	2300      	movs	r3, #0
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	2300      	movs	r3, #0
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff fd91 	bl	80092d4 <xTimerGenericCommand>
 80097b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097d2:	4b09      	ldr	r3, [pc, #36]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1b3      	bne.n	8009744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097dc:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097e2:	4b06      	ldr	r3, [pc, #24]	@ (80097fc <prvSwitchTimerLists+0xc0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a04      	ldr	r2, [pc, #16]	@ (80097f8 <prvSwitchTimerLists+0xbc>)
 80097e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097ea:	4a04      	ldr	r2, [pc, #16]	@ (80097fc <prvSwitchTimerLists+0xc0>)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	6013      	str	r3, [r2, #0]
}
 80097f0:	bf00      	nop
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	2000162c 	.word	0x2000162c
 80097fc:	20001630 	.word	0x20001630

08009800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009806:	f000 f929 	bl	8009a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800980a:	4b15      	ldr	r3, [pc, #84]	@ (8009860 <prvCheckForValidListAndQueue+0x60>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d120      	bne.n	8009854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009812:	4814      	ldr	r0, [pc, #80]	@ (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009814:	f7fd ff6a 	bl	80076ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009818:	4813      	ldr	r0, [pc, #76]	@ (8009868 <prvCheckForValidListAndQueue+0x68>)
 800981a:	f7fd ff67 	bl	80076ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800981e:	4b13      	ldr	r3, [pc, #76]	@ (800986c <prvCheckForValidListAndQueue+0x6c>)
 8009820:	4a10      	ldr	r2, [pc, #64]	@ (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009824:	4b12      	ldr	r3, [pc, #72]	@ (8009870 <prvCheckForValidListAndQueue+0x70>)
 8009826:	4a10      	ldr	r2, [pc, #64]	@ (8009868 <prvCheckForValidListAndQueue+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800982a:	2300      	movs	r3, #0
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4b11      	ldr	r3, [pc, #68]	@ (8009874 <prvCheckForValidListAndQueue+0x74>)
 8009830:	4a11      	ldr	r2, [pc, #68]	@ (8009878 <prvCheckForValidListAndQueue+0x78>)
 8009832:	2110      	movs	r1, #16
 8009834:	200a      	movs	r0, #10
 8009836:	f7fe f873 	bl	8007920 <xQueueGenericCreateStatic>
 800983a:	4603      	mov	r3, r0
 800983c:	4a08      	ldr	r2, [pc, #32]	@ (8009860 <prvCheckForValidListAndQueue+0x60>)
 800983e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009840:	4b07      	ldr	r3, [pc, #28]	@ (8009860 <prvCheckForValidListAndQueue+0x60>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009848:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <prvCheckForValidListAndQueue+0x60>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	490b      	ldr	r1, [pc, #44]	@ (800987c <prvCheckForValidListAndQueue+0x7c>)
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fd66 	bl	8008320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009854:	f000 f932 	bl	8009abc <vPortExitCritical>
}
 8009858:	bf00      	nop
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20001634 	.word	0x20001634
 8009864:	20001604 	.word	0x20001604
 8009868:	20001618 	.word	0x20001618
 800986c:	2000162c 	.word	0x2000162c
 8009870:	20001630 	.word	0x20001630
 8009874:	200016e0 	.word	0x200016e0
 8009878:	20001640 	.word	0x20001640
 800987c:	0800afbc 	.word	0x0800afbc

08009880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3b04      	subs	r3, #4
 8009890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b04      	subs	r3, #4
 800989e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f023 0201 	bic.w	r2, r3, #1
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3b04      	subs	r3, #4
 80098ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098b0:	4a08      	ldr	r2, [pc, #32]	@ (80098d4 <pxPortInitialiseStack+0x54>)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3b14      	subs	r3, #20
 80098ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b20      	subs	r3, #32
 80098c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr
 80098d4:	080098d9 	.word	0x080098d9

080098d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80098de:	2300      	movs	r3, #0
 80098e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <prvTaskExitError+0x54>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d00b      	beq.n	8009904 <prvTaskExitError+0x2c>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	60fb      	str	r3, [r7, #12]
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	e7fd      	b.n	8009900 <prvTaskExitError+0x28>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60bb      	str	r3, [r7, #8]
}
 8009916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009918:	bf00      	nop
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0fc      	beq.n	800991a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr
 800992c:	20000250 	.word	0x20000250

08009930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <pxCurrentTCBConst2>)
 8009932:	6819      	ldr	r1, [r3, #0]
 8009934:	6808      	ldr	r0, [r1, #0]
 8009936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800993a:	f380 8809 	msr	PSP, r0
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	f04e 0e0d 	orr.w	lr, lr, #13
 800994e:	4770      	bx	lr

08009950 <pxCurrentTCBConst2>:
 8009950:	20001104 	.word	0x20001104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009958:	4806      	ldr	r0, [pc, #24]	@ (8009974 <prvPortStartFirstTask+0x1c>)
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	6800      	ldr	r0, [r0, #0]
 800995e:	f380 8808 	msr	MSP, r0
 8009962:	b662      	cpsie	i
 8009964:	b661      	cpsie	f
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	df00      	svc	0
 8009970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009972:	bf00      	nop
 8009974:	e000ed08 	.word	0xe000ed08

08009978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800997e:	4b32      	ldr	r3, [pc, #200]	@ (8009a48 <xPortStartScheduler+0xd0>)
 8009980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	22ff      	movs	r2, #255	@ 0xff
 800998e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a4c <xPortStartScheduler+0xd4>)
 80099a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099a8:	2207      	movs	r2, #7
 80099aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ac:	e009      	b.n	80099c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099ae:	4b28      	ldr	r3, [pc, #160]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	4a26      	ldr	r2, [pc, #152]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	2b80      	cmp	r3, #128	@ 0x80
 80099cc:	d0ef      	beq.n	80099ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ce:	4b20      	ldr	r3, [pc, #128]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1c3 0307 	rsb	r3, r3, #7
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d00b      	beq.n	80099f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60bb      	str	r3, [r7, #8]
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	e7fd      	b.n	80099ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099f2:	4b17      	ldr	r3, [pc, #92]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	4a15      	ldr	r2, [pc, #84]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099fc:	4b14      	ldr	r3, [pc, #80]	@ (8009a50 <xPortStartScheduler+0xd8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a04:	4a12      	ldr	r2, [pc, #72]	@ (8009a50 <xPortStartScheduler+0xd8>)
 8009a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a10:	4b10      	ldr	r3, [pc, #64]	@ (8009a54 <xPortStartScheduler+0xdc>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a0f      	ldr	r2, [pc, #60]	@ (8009a54 <xPortStartScheduler+0xdc>)
 8009a16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <xPortStartScheduler+0xdc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a0c      	ldr	r2, [pc, #48]	@ (8009a54 <xPortStartScheduler+0xdc>)
 8009a22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a28:	f000 f8b8 	bl	8009b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a58 <xPortStartScheduler+0xe0>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a32:	f7ff ff91 	bl	8009958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a36:	f7ff f8ad 	bl	8008b94 <vTaskSwitchContext>
	prvTaskExitError();
 8009a3a:	f7ff ff4d 	bl	80098d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	e000e400 	.word	0xe000e400
 8009a4c:	20001730 	.word	0x20001730
 8009a50:	20001734 	.word	0x20001734
 8009a54:	e000ed20 	.word	0xe000ed20
 8009a58:	20000250 	.word	0x20000250

08009a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	607b      	str	r3, [r7, #4]
}
 8009a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a76:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <vPortEnterCritical+0x58>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab4 <vPortEnterCritical+0x58>)
 8009a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a80:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab4 <vPortEnterCritical+0x58>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d110      	bne.n	8009aaa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a88:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab8 <vPortEnterCritical+0x5c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <vPortEnterCritical+0x4e>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	603b      	str	r3, [r7, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	e7fd      	b.n	8009aa6 <vPortEnterCritical+0x4a>
	}
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr
 8009ab4:	20000250 	.word	0x20000250
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ac2:	4b12      	ldr	r3, [pc, #72]	@ (8009b0c <vPortExitCritical+0x50>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10b      	bne.n	8009ae2 <vPortExitCritical+0x26>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	607b      	str	r3, [r7, #4]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	4a08      	ldr	r2, [pc, #32]	@ (8009b0c <vPortExitCritical+0x50>)
 8009aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009aec:	4b07      	ldr	r3, [pc, #28]	@ (8009b0c <vPortExitCritical+0x50>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <vPortExitCritical+0x44>
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bc80      	pop	{r7}
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000250 	.word	0x20000250

08009b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b10:	f3ef 8009 	mrs	r0, PSP
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <pxCurrentTCBConst>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b20:	6010      	str	r0, [r2, #0]
 8009b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009b26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b2a:	f380 8811 	msr	BASEPRI, r0
 8009b2e:	f7ff f831 	bl	8008b94 <vTaskSwitchContext>
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f380 8811 	msr	BASEPRI, r0
 8009b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	6808      	ldr	r0, [r1, #0]
 8009b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b46:	f380 8809 	msr	PSP, r0
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	4770      	bx	lr

08009b50 <pxCurrentTCBConst>:
 8009b50:	20001104 	.word	0x20001104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop

08009b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	607b      	str	r3, [r7, #4]
}
 8009b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b72:	f7fe ff4f 	bl	8008a14 <xTaskIncrementTick>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b7c:	4b06      	ldr	r3, [pc, #24]	@ (8009b98 <xPortSysTickHandler+0x40>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	2300      	movs	r3, #0
 8009b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	f383 8811 	msr	BASEPRI, r3
}
 8009b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	e000ed04 	.word	0xe000ed04

08009b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bcc <vPortSetupTimerInterrupt+0x30>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <vPortSetupTimerInterrupt+0x34>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bac:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <vPortSetupTimerInterrupt+0x38>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a09      	ldr	r2, [pc, #36]	@ (8009bd8 <vPortSetupTimerInterrupt+0x3c>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	099b      	lsrs	r3, r3, #6
 8009bb8:	4a08      	ldr	r2, [pc, #32]	@ (8009bdc <vPortSetupTimerInterrupt+0x40>)
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bbe:	4b03      	ldr	r3, [pc, #12]	@ (8009bcc <vPortSetupTimerInterrupt+0x30>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr
 8009bcc:	e000e010 	.word	0xe000e010
 8009bd0:	e000e018 	.word	0xe000e018
 8009bd4:	20000244 	.word	0x20000244
 8009bd8:	10624dd3 	.word	0x10624dd3
 8009bdc:	e000e014 	.word	0xe000e014

08009be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009be6:	f3ef 8305 	mrs	r3, IPSR
 8009bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b0f      	cmp	r3, #15
 8009bf0:	d915      	bls.n	8009c1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bf2:	4a17      	ldr	r2, [pc, #92]	@ (8009c50 <vPortValidateInterruptPriority+0x70>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bfc:	4b15      	ldr	r3, [pc, #84]	@ (8009c54 <vPortValidateInterruptPriority+0x74>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	7afa      	ldrb	r2, [r7, #11]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d20b      	bcs.n	8009c1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	607b      	str	r3, [r7, #4]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c58 <vPortValidateInterruptPriority+0x78>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c26:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <vPortValidateInterruptPriority+0x7c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d90b      	bls.n	8009c46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	603b      	str	r3, [r7, #0]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <vPortValidateInterruptPriority+0x62>
	}
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr
 8009c50:	e000e3f0 	.word	0xe000e3f0
 8009c54:	20001730 	.word	0x20001730
 8009c58:	e000ed0c 	.word	0xe000ed0c
 8009c5c:	20001734 	.word	0x20001734

08009c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08a      	sub	sp, #40	@ 0x28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c6c:	f7fe fe18 	bl	80088a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c70:	4b5a      	ldr	r3, [pc, #360]	@ (8009ddc <pvPortMalloc+0x17c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c78:	f000 f916 	bl	8009ea8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c7c:	4b58      	ldr	r3, [pc, #352]	@ (8009de0 <pvPortMalloc+0x180>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f040 8090 	bne.w	8009daa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01e      	beq.n	8009cce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c90:	2208      	movs	r2, #8
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d015      	beq.n	8009cce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f023 0307 	bic.w	r3, r3, #7
 8009ca8:	3308      	adds	r3, #8
 8009caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <pvPortMalloc+0x6e>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	617b      	str	r3, [r7, #20]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d06a      	beq.n	8009daa <pvPortMalloc+0x14a>
 8009cd4:	4b43      	ldr	r3, [pc, #268]	@ (8009de4 <pvPortMalloc+0x184>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d865      	bhi.n	8009daa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cde:	4b42      	ldr	r3, [pc, #264]	@ (8009de8 <pvPortMalloc+0x188>)
 8009ce0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ce2:	4b41      	ldr	r3, [pc, #260]	@ (8009de8 <pvPortMalloc+0x188>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ce8:	e004      	b.n	8009cf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d903      	bls.n	8009d06 <pvPortMalloc+0xa6>
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f1      	bne.n	8009cea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d06:	4b35      	ldr	r3, [pc, #212]	@ (8009ddc <pvPortMalloc+0x17c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d04c      	beq.n	8009daa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2208      	movs	r2, #8
 8009d16:	4413      	add	r3, r2
 8009d18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	1ad2      	subs	r2, r2, r3
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d920      	bls.n	8009d74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4413      	add	r3, r2
 8009d38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <pvPortMalloc+0xfc>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	613b      	str	r3, [r7, #16]
}
 8009d56:	bf00      	nop
 8009d58:	bf00      	nop
 8009d5a:	e7fd      	b.n	8009d58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	1ad2      	subs	r2, r2, r3
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d6e:	69b8      	ldr	r0, [r7, #24]
 8009d70:	f000 f8fc 	bl	8009f6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d74:	4b1b      	ldr	r3, [pc, #108]	@ (8009de4 <pvPortMalloc+0x184>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	4a19      	ldr	r2, [pc, #100]	@ (8009de4 <pvPortMalloc+0x184>)
 8009d80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d82:	4b18      	ldr	r3, [pc, #96]	@ (8009de4 <pvPortMalloc+0x184>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4b19      	ldr	r3, [pc, #100]	@ (8009dec <pvPortMalloc+0x18c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d203      	bcs.n	8009d96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d8e:	4b15      	ldr	r3, [pc, #84]	@ (8009de4 <pvPortMalloc+0x184>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <pvPortMalloc+0x18c>)
 8009d94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4b11      	ldr	r3, [pc, #68]	@ (8009de0 <pvPortMalloc+0x180>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009daa:	f7fe fd87 	bl	80088bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <pvPortMalloc+0x170>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <pvPortMalloc+0x16c>
	return pvReturn;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3728      	adds	r7, #40	@ 0x28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20002340 	.word	0x20002340
 8009de0:	2000234c 	.word	0x2000234c
 8009de4:	20002344 	.word	0x20002344
 8009de8:	20002338 	.word	0x20002338
 8009dec:	20002348 	.word	0x20002348

08009df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d04a      	beq.n	8009e98 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e02:	2308      	movs	r3, #8
 8009e04:	425b      	negs	r3, r3
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	4b22      	ldr	r3, [pc, #136]	@ (8009ea0 <vPortFree+0xb0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10b      	bne.n	8009e36 <vPortFree+0x46>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <vPortFree+0x66>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60bb      	str	r3, [r7, #8]
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	e7fd      	b.n	8009e52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	4b11      	ldr	r3, [pc, #68]	@ (8009ea0 <vPortFree+0xb0>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d019      	beq.n	8009e98 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d115      	bne.n	8009e98 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea0 <vPortFree+0xb0>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	43db      	mvns	r3, r3
 8009e76:	401a      	ands	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e7c:	f7fe fd10 	bl	80088a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	4b07      	ldr	r3, [pc, #28]	@ (8009ea4 <vPortFree+0xb4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4413      	add	r3, r2
 8009e8a:	4a06      	ldr	r2, [pc, #24]	@ (8009ea4 <vPortFree+0xb4>)
 8009e8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e8e:	6938      	ldr	r0, [r7, #16]
 8009e90:	f000 f86c 	bl	8009f6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e94:	f7fe fd12 	bl	80088bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e98:	bf00      	nop
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	2000234c 	.word	0x2000234c
 8009ea4:	20002344 	.word	0x20002344

08009ea8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009eb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eb4:	4b27      	ldr	r3, [pc, #156]	@ (8009f54 <prvHeapInit+0xac>)
 8009eb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00c      	beq.n	8009edc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0307 	bic.w	r3, r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8009f54 <prvHeapInit+0xac>)
 8009ed8:	4413      	add	r3, r2
 8009eda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f58 <prvHeapInit+0xb0>)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8009f58 <prvHeapInit+0xb0>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ef4:	2208      	movs	r2, #8
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0307 	bic.w	r3, r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4a15      	ldr	r2, [pc, #84]	@ (8009f5c <prvHeapInit+0xb4>)
 8009f08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f0a:	4b14      	ldr	r3, [pc, #80]	@ (8009f5c <prvHeapInit+0xb4>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f12:	4b12      	ldr	r3, [pc, #72]	@ (8009f5c <prvHeapInit+0xb4>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	1ad2      	subs	r2, r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f28:	4b0c      	ldr	r3, [pc, #48]	@ (8009f5c <prvHeapInit+0xb4>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	4a0a      	ldr	r2, [pc, #40]	@ (8009f60 <prvHeapInit+0xb8>)
 8009f36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4a09      	ldr	r2, [pc, #36]	@ (8009f64 <prvHeapInit+0xbc>)
 8009f3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f40:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <prvHeapInit+0xc0>)
 8009f42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f46:	601a      	str	r2, [r3, #0]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20001738 	.word	0x20001738
 8009f58:	20002338 	.word	0x20002338
 8009f5c:	20002340 	.word	0x20002340
 8009f60:	20002348 	.word	0x20002348
 8009f64:	20002344 	.word	0x20002344
 8009f68:	2000234c 	.word	0x2000234c

08009f6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f74:	4b27      	ldr	r3, [pc, #156]	@ (800a014 <prvInsertBlockIntoFreeList+0xa8>)
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e002      	b.n	8009f80 <prvInsertBlockIntoFreeList+0x14>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d8f7      	bhi.n	8009f7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	4413      	add	r3, r2
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d108      	bne.n	8009fae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	441a      	add	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d118      	bne.n	8009ff4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	4b14      	ldr	r3, [pc, #80]	@ (800a018 <prvInsertBlockIntoFreeList+0xac>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d00d      	beq.n	8009fea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	441a      	add	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	e008      	b.n	8009ffc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fea:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <prvInsertBlockIntoFreeList+0xac>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e003      	b.n	8009ffc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	429a      	cmp	r2, r3
 800a002:	d002      	beq.n	800a00a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	bc80      	pop	{r7}
 800a012:	4770      	bx	lr
 800a014:	20002338 	.word	0x20002338
 800a018:	20002340 	.word	0x20002340

0800a01c <siprintf>:
 800a01c:	b40e      	push	{r1, r2, r3}
 800a01e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a022:	b500      	push	{lr}
 800a024:	b09c      	sub	sp, #112	@ 0x70
 800a026:	ab1d      	add	r3, sp, #116	@ 0x74
 800a028:	9002      	str	r0, [sp, #8]
 800a02a:	9006      	str	r0, [sp, #24]
 800a02c:	9107      	str	r1, [sp, #28]
 800a02e:	9104      	str	r1, [sp, #16]
 800a030:	4808      	ldr	r0, [pc, #32]	@ (800a054 <siprintf+0x38>)
 800a032:	4909      	ldr	r1, [pc, #36]	@ (800a058 <siprintf+0x3c>)
 800a034:	f853 2b04 	ldr.w	r2, [r3], #4
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	6800      	ldr	r0, [r0, #0]
 800a03c:	a902      	add	r1, sp, #8
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f000 f9ce 	bl	800a3e0 <_svfiprintf_r>
 800a044:	2200      	movs	r2, #0
 800a046:	9b02      	ldr	r3, [sp, #8]
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	b01c      	add	sp, #112	@ 0x70
 800a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a050:	b003      	add	sp, #12
 800a052:	4770      	bx	lr
 800a054:	20000254 	.word	0x20000254
 800a058:	ffff0208 	.word	0xffff0208

0800a05c <memset>:
 800a05c:	4603      	mov	r3, r0
 800a05e:	4402      	add	r2, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <strcat>:
 800a06c:	4602      	mov	r2, r0
 800a06e:	b510      	push	{r4, lr}
 800a070:	7814      	ldrb	r4, [r2, #0]
 800a072:	4613      	mov	r3, r2
 800a074:	3201      	adds	r2, #1
 800a076:	2c00      	cmp	r4, #0
 800a078:	d1fa      	bne.n	800a070 <strcat+0x4>
 800a07a:	3b01      	subs	r3, #1
 800a07c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a080:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a084:	2a00      	cmp	r2, #0
 800a086:	d1f9      	bne.n	800a07c <strcat+0x10>
 800a088:	bd10      	pop	{r4, pc}

0800a08a <strstr>:
 800a08a:	780a      	ldrb	r2, [r1, #0]
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	b96a      	cbnz	r2, 800a0ac <strstr+0x22>
 800a090:	bd70      	pop	{r4, r5, r6, pc}
 800a092:	429a      	cmp	r2, r3
 800a094:	d109      	bne.n	800a0aa <strstr+0x20>
 800a096:	460c      	mov	r4, r1
 800a098:	4605      	mov	r5, r0
 800a09a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0f6      	beq.n	800a090 <strstr+0x6>
 800a0a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a0a6:	429e      	cmp	r6, r3
 800a0a8:	d0f7      	beq.n	800a09a <strstr+0x10>
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	7803      	ldrb	r3, [r0, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1ef      	bne.n	800a092 <strstr+0x8>
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	e7ec      	b.n	800a090 <strstr+0x6>
	...

0800a0b8 <__errno>:
 800a0b8:	4b01      	ldr	r3, [pc, #4]	@ (800a0c0 <__errno+0x8>)
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	20000254 	.word	0x20000254

0800a0c4 <__libc_init_array>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	4d0c      	ldr	r5, [pc, #48]	@ (800a0fc <__libc_init_array+0x38>)
 800a0ca:	4c0d      	ldr	r4, [pc, #52]	@ (800a100 <__libc_init_array+0x3c>)
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	42a6      	cmp	r6, r4
 800a0d2:	d109      	bne.n	800a0e8 <__libc_init_array+0x24>
 800a0d4:	f000 fc80 	bl	800a9d8 <_init>
 800a0d8:	2600      	movs	r6, #0
 800a0da:	4d0a      	ldr	r5, [pc, #40]	@ (800a104 <__libc_init_array+0x40>)
 800a0dc:	4c0a      	ldr	r4, [pc, #40]	@ (800a108 <__libc_init_array+0x44>)
 800a0de:	1b64      	subs	r4, r4, r5
 800a0e0:	10a4      	asrs	r4, r4, #2
 800a0e2:	42a6      	cmp	r6, r4
 800a0e4:	d105      	bne.n	800a0f2 <__libc_init_array+0x2e>
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ec:	4798      	blx	r3
 800a0ee:	3601      	adds	r6, #1
 800a0f0:	e7ee      	b.n	800a0d0 <__libc_init_array+0xc>
 800a0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f6:	4798      	blx	r3
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	e7f2      	b.n	800a0e2 <__libc_init_array+0x1e>
 800a0fc:	0800b7f4 	.word	0x0800b7f4
 800a100:	0800b7f4 	.word	0x0800b7f4
 800a104:	0800b7f4 	.word	0x0800b7f4
 800a108:	0800b7f8 	.word	0x0800b7f8

0800a10c <__retarget_lock_acquire_recursive>:
 800a10c:	4770      	bx	lr

0800a10e <__retarget_lock_release_recursive>:
 800a10e:	4770      	bx	lr

0800a110 <strcpy>:
 800a110:	4603      	mov	r3, r0
 800a112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a116:	f803 2b01 	strb.w	r2, [r3], #1
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d1f9      	bne.n	800a112 <strcpy+0x2>
 800a11e:	4770      	bx	lr

0800a120 <memcpy>:
 800a120:	440a      	add	r2, r1
 800a122:	4291      	cmp	r1, r2
 800a124:	f100 33ff 	add.w	r3, r0, #4294967295
 800a128:	d100      	bne.n	800a12c <memcpy+0xc>
 800a12a:	4770      	bx	lr
 800a12c:	b510      	push	{r4, lr}
 800a12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a132:	4291      	cmp	r1, r2
 800a134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a138:	d1f9      	bne.n	800a12e <memcpy+0xe>
 800a13a:	bd10      	pop	{r4, pc}

0800a13c <_free_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4605      	mov	r5, r0
 800a140:	2900      	cmp	r1, #0
 800a142:	d040      	beq.n	800a1c6 <_free_r+0x8a>
 800a144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a148:	1f0c      	subs	r4, r1, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfb8      	it	lt
 800a14e:	18e4      	addlt	r4, r4, r3
 800a150:	f000 f8de 	bl	800a310 <__malloc_lock>
 800a154:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c8 <_free_r+0x8c>)
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	b933      	cbnz	r3, 800a168 <_free_r+0x2c>
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	6014      	str	r4, [r2, #0]
 800a15e:	4628      	mov	r0, r5
 800a160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a164:	f000 b8da 	b.w	800a31c <__malloc_unlock>
 800a168:	42a3      	cmp	r3, r4
 800a16a:	d908      	bls.n	800a17e <_free_r+0x42>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	1821      	adds	r1, r4, r0
 800a170:	428b      	cmp	r3, r1
 800a172:	bf01      	itttt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	1809      	addeq	r1, r1, r0
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	e7ed      	b.n	800a15a <_free_r+0x1e>
 800a17e:	461a      	mov	r2, r3
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	b10b      	cbz	r3, 800a188 <_free_r+0x4c>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d9fa      	bls.n	800a17e <_free_r+0x42>
 800a188:	6811      	ldr	r1, [r2, #0]
 800a18a:	1850      	adds	r0, r2, r1
 800a18c:	42a0      	cmp	r0, r4
 800a18e:	d10b      	bne.n	800a1a8 <_free_r+0x6c>
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	4401      	add	r1, r0
 800a194:	1850      	adds	r0, r2, r1
 800a196:	4283      	cmp	r3, r0
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	d1e0      	bne.n	800a15e <_free_r+0x22>
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4408      	add	r0, r1
 800a1a2:	6010      	str	r0, [r2, #0]
 800a1a4:	6053      	str	r3, [r2, #4]
 800a1a6:	e7da      	b.n	800a15e <_free_r+0x22>
 800a1a8:	d902      	bls.n	800a1b0 <_free_r+0x74>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	e7d6      	b.n	800a15e <_free_r+0x22>
 800a1b0:	6820      	ldr	r0, [r4, #0]
 800a1b2:	1821      	adds	r1, r4, r0
 800a1b4:	428b      	cmp	r3, r1
 800a1b6:	bf01      	itttt	eq
 800a1b8:	6819      	ldreq	r1, [r3, #0]
 800a1ba:	685b      	ldreq	r3, [r3, #4]
 800a1bc:	1809      	addeq	r1, r1, r0
 800a1be:	6021      	streq	r1, [r4, #0]
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	6054      	str	r4, [r2, #4]
 800a1c4:	e7cb      	b.n	800a15e <_free_r+0x22>
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	20002494 	.word	0x20002494

0800a1cc <sbrk_aligned>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a20c <sbrk_aligned+0x40>)
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	6831      	ldr	r1, [r6, #0]
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	b911      	cbnz	r1, 800a1de <sbrk_aligned+0x12>
 800a1d8:	f000 fbaa 	bl	800a930 <_sbrk_r>
 800a1dc:	6030      	str	r0, [r6, #0]
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 fba5 	bl	800a930 <_sbrk_r>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	d103      	bne.n	800a1f2 <sbrk_aligned+0x26>
 800a1ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	1cc4      	adds	r4, r0, #3
 800a1f4:	f024 0403 	bic.w	r4, r4, #3
 800a1f8:	42a0      	cmp	r0, r4
 800a1fa:	d0f8      	beq.n	800a1ee <sbrk_aligned+0x22>
 800a1fc:	1a21      	subs	r1, r4, r0
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fb96 	bl	800a930 <_sbrk_r>
 800a204:	3001      	adds	r0, #1
 800a206:	d1f2      	bne.n	800a1ee <sbrk_aligned+0x22>
 800a208:	e7ef      	b.n	800a1ea <sbrk_aligned+0x1e>
 800a20a:	bf00      	nop
 800a20c:	20002490 	.word	0x20002490

0800a210 <_malloc_r>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	1ccd      	adds	r5, r1, #3
 800a216:	f025 0503 	bic.w	r5, r5, #3
 800a21a:	3508      	adds	r5, #8
 800a21c:	2d0c      	cmp	r5, #12
 800a21e:	bf38      	it	cc
 800a220:	250c      	movcc	r5, #12
 800a222:	2d00      	cmp	r5, #0
 800a224:	4606      	mov	r6, r0
 800a226:	db01      	blt.n	800a22c <_malloc_r+0x1c>
 800a228:	42a9      	cmp	r1, r5
 800a22a:	d904      	bls.n	800a236 <_malloc_r+0x26>
 800a22c:	230c      	movs	r3, #12
 800a22e:	6033      	str	r3, [r6, #0]
 800a230:	2000      	movs	r0, #0
 800a232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a30c <_malloc_r+0xfc>
 800a23a:	f000 f869 	bl	800a310 <__malloc_lock>
 800a23e:	f8d8 3000 	ldr.w	r3, [r8]
 800a242:	461c      	mov	r4, r3
 800a244:	bb44      	cbnz	r4, 800a298 <_malloc_r+0x88>
 800a246:	4629      	mov	r1, r5
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff ffbf 	bl	800a1cc <sbrk_aligned>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	4604      	mov	r4, r0
 800a252:	d158      	bne.n	800a306 <_malloc_r+0xf6>
 800a254:	f8d8 4000 	ldr.w	r4, [r8]
 800a258:	4627      	mov	r7, r4
 800a25a:	2f00      	cmp	r7, #0
 800a25c:	d143      	bne.n	800a2e6 <_malloc_r+0xd6>
 800a25e:	2c00      	cmp	r4, #0
 800a260:	d04b      	beq.n	800a2fa <_malloc_r+0xea>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	4639      	mov	r1, r7
 800a266:	4630      	mov	r0, r6
 800a268:	eb04 0903 	add.w	r9, r4, r3
 800a26c:	f000 fb60 	bl	800a930 <_sbrk_r>
 800a270:	4581      	cmp	r9, r0
 800a272:	d142      	bne.n	800a2fa <_malloc_r+0xea>
 800a274:	6821      	ldr	r1, [r4, #0]
 800a276:	4630      	mov	r0, r6
 800a278:	1a6d      	subs	r5, r5, r1
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7ff ffa6 	bl	800a1cc <sbrk_aligned>
 800a280:	3001      	adds	r0, #1
 800a282:	d03a      	beq.n	800a2fa <_malloc_r+0xea>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	442b      	add	r3, r5
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	f8d8 3000 	ldr.w	r3, [r8]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	bb62      	cbnz	r2, 800a2ec <_malloc_r+0xdc>
 800a292:	f8c8 7000 	str.w	r7, [r8]
 800a296:	e00f      	b.n	800a2b8 <_malloc_r+0xa8>
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	1b52      	subs	r2, r2, r5
 800a29c:	d420      	bmi.n	800a2e0 <_malloc_r+0xd0>
 800a29e:	2a0b      	cmp	r2, #11
 800a2a0:	d917      	bls.n	800a2d2 <_malloc_r+0xc2>
 800a2a2:	1961      	adds	r1, r4, r5
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	bf18      	it	ne
 800a2aa:	6059      	strne	r1, [r3, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	bf08      	it	eq
 800a2b0:	f8c8 1000 	streq.w	r1, [r8]
 800a2b4:	5162      	str	r2, [r4, r5]
 800a2b6:	604b      	str	r3, [r1, #4]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 f82f 	bl	800a31c <__malloc_unlock>
 800a2be:	f104 000b 	add.w	r0, r4, #11
 800a2c2:	1d23      	adds	r3, r4, #4
 800a2c4:	f020 0007 	bic.w	r0, r0, #7
 800a2c8:	1ac2      	subs	r2, r0, r3
 800a2ca:	bf1c      	itt	ne
 800a2cc:	1a1b      	subne	r3, r3, r0
 800a2ce:	50a3      	strne	r3, [r4, r2]
 800a2d0:	e7af      	b.n	800a232 <_malloc_r+0x22>
 800a2d2:	6862      	ldr	r2, [r4, #4]
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	bf0c      	ite	eq
 800a2d8:	f8c8 2000 	streq.w	r2, [r8]
 800a2dc:	605a      	strne	r2, [r3, #4]
 800a2de:	e7eb      	b.n	800a2b8 <_malloc_r+0xa8>
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	6864      	ldr	r4, [r4, #4]
 800a2e4:	e7ae      	b.n	800a244 <_malloc_r+0x34>
 800a2e6:	463c      	mov	r4, r7
 800a2e8:	687f      	ldr	r7, [r7, #4]
 800a2ea:	e7b6      	b.n	800a25a <_malloc_r+0x4a>
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d1fb      	bne.n	800a2ec <_malloc_r+0xdc>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	6053      	str	r3, [r2, #4]
 800a2f8:	e7de      	b.n	800a2b8 <_malloc_r+0xa8>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	f000 f80c 	bl	800a31c <__malloc_unlock>
 800a304:	e794      	b.n	800a230 <_malloc_r+0x20>
 800a306:	6005      	str	r5, [r0, #0]
 800a308:	e7d6      	b.n	800a2b8 <_malloc_r+0xa8>
 800a30a:	bf00      	nop
 800a30c:	20002494 	.word	0x20002494

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	@ (800a318 <__malloc_lock+0x8>)
 800a312:	f7ff befb 	b.w	800a10c <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	2000248c 	.word	0x2000248c

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	@ (800a324 <__malloc_unlock+0x8>)
 800a31e:	f7ff bef6 	b.w	800a10e <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	2000248c 	.word	0x2000248c

0800a328 <__ssputs_r>:
 800a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	461f      	mov	r7, r3
 800a32e:	688e      	ldr	r6, [r1, #8]
 800a330:	4682      	mov	sl, r0
 800a332:	42be      	cmp	r6, r7
 800a334:	460c      	mov	r4, r1
 800a336:	4690      	mov	r8, r2
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	d82d      	bhi.n	800a398 <__ssputs_r+0x70>
 800a33c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a344:	d026      	beq.n	800a394 <__ssputs_r+0x6c>
 800a346:	6965      	ldr	r5, [r4, #20]
 800a348:	6909      	ldr	r1, [r1, #16]
 800a34a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a34e:	eba3 0901 	sub.w	r9, r3, r1
 800a352:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a356:	1c7b      	adds	r3, r7, #1
 800a358:	444b      	add	r3, r9
 800a35a:	106d      	asrs	r5, r5, #1
 800a35c:	429d      	cmp	r5, r3
 800a35e:	bf38      	it	cc
 800a360:	461d      	movcc	r5, r3
 800a362:	0553      	lsls	r3, r2, #21
 800a364:	d527      	bpl.n	800a3b6 <__ssputs_r+0x8e>
 800a366:	4629      	mov	r1, r5
 800a368:	f7ff ff52 	bl	800a210 <_malloc_r>
 800a36c:	4606      	mov	r6, r0
 800a36e:	b360      	cbz	r0, 800a3ca <__ssputs_r+0xa2>
 800a370:	464a      	mov	r2, r9
 800a372:	6921      	ldr	r1, [r4, #16]
 800a374:	f7ff fed4 	bl	800a120 <memcpy>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	6126      	str	r6, [r4, #16]
 800a386:	444e      	add	r6, r9
 800a388:	6026      	str	r6, [r4, #0]
 800a38a:	463e      	mov	r6, r7
 800a38c:	6165      	str	r5, [r4, #20]
 800a38e:	eba5 0509 	sub.w	r5, r5, r9
 800a392:	60a5      	str	r5, [r4, #8]
 800a394:	42be      	cmp	r6, r7
 800a396:	d900      	bls.n	800a39a <__ssputs_r+0x72>
 800a398:	463e      	mov	r6, r7
 800a39a:	4632      	mov	r2, r6
 800a39c:	4641      	mov	r1, r8
 800a39e:	6820      	ldr	r0, [r4, #0]
 800a3a0:	f000 faac 	bl	800a8fc <memmove>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	1b9b      	subs	r3, r3, r6
 800a3aa:	60a3      	str	r3, [r4, #8]
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	4433      	add	r3, r6
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	f000 fad8 	bl	800a96c <_realloc_r>
 800a3bc:	4606      	mov	r6, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d1e0      	bne.n	800a384 <__ssputs_r+0x5c>
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	6921      	ldr	r1, [r4, #16]
 800a3c6:	f7ff feb9 	bl	800a13c <_free_r>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	f8ca 3000 	str.w	r3, [sl]
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	e7e9      	b.n	800a3b2 <__ssputs_r+0x8a>
	...

0800a3e0 <_svfiprintf_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4698      	mov	r8, r3
 800a3e6:	898b      	ldrh	r3, [r1, #12]
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	061b      	lsls	r3, r3, #24
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	b09d      	sub	sp, #116	@ 0x74
 800a3f2:	d510      	bpl.n	800a416 <_svfiprintf_r+0x36>
 800a3f4:	690b      	ldr	r3, [r1, #16]
 800a3f6:	b973      	cbnz	r3, 800a416 <_svfiprintf_r+0x36>
 800a3f8:	2140      	movs	r1, #64	@ 0x40
 800a3fa:	f7ff ff09 	bl	800a210 <_malloc_r>
 800a3fe:	6028      	str	r0, [r5, #0]
 800a400:	6128      	str	r0, [r5, #16]
 800a402:	b930      	cbnz	r0, 800a412 <_svfiprintf_r+0x32>
 800a404:	230c      	movs	r3, #12
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	b01d      	add	sp, #116	@ 0x74
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	2340      	movs	r3, #64	@ 0x40
 800a414:	616b      	str	r3, [r5, #20]
 800a416:	2300      	movs	r3, #0
 800a418:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41a:	2320      	movs	r3, #32
 800a41c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a420:	2330      	movs	r3, #48	@ 0x30
 800a422:	f04f 0901 	mov.w	r9, #1
 800a426:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a5c4 <_svfiprintf_r+0x1e4>
 800a42e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a432:	4623      	mov	r3, r4
 800a434:	469a      	mov	sl, r3
 800a436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43a:	b10a      	cbz	r2, 800a440 <_svfiprintf_r+0x60>
 800a43c:	2a25      	cmp	r2, #37	@ 0x25
 800a43e:	d1f9      	bne.n	800a434 <_svfiprintf_r+0x54>
 800a440:	ebba 0b04 	subs.w	fp, sl, r4
 800a444:	d00b      	beq.n	800a45e <_svfiprintf_r+0x7e>
 800a446:	465b      	mov	r3, fp
 800a448:	4622      	mov	r2, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff ff6b 	bl	800a328 <__ssputs_r>
 800a452:	3001      	adds	r0, #1
 800a454:	f000 80a7 	beq.w	800a5a6 <_svfiprintf_r+0x1c6>
 800a458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a45a:	445a      	add	r2, fp
 800a45c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a45e:	f89a 3000 	ldrb.w	r3, [sl]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 809f 	beq.w	800a5a6 <_svfiprintf_r+0x1c6>
 800a468:	2300      	movs	r3, #0
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a472:	f10a 0a01 	add.w	sl, sl, #1
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	9307      	str	r3, [sp, #28]
 800a47a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a47e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a480:	4654      	mov	r4, sl
 800a482:	2205      	movs	r2, #5
 800a484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a488:	484e      	ldr	r0, [pc, #312]	@ (800a5c4 <_svfiprintf_r+0x1e4>)
 800a48a:	f000 fa61 	bl	800a950 <memchr>
 800a48e:	9a04      	ldr	r2, [sp, #16]
 800a490:	b9d8      	cbnz	r0, 800a4ca <_svfiprintf_r+0xea>
 800a492:	06d0      	lsls	r0, r2, #27
 800a494:	bf44      	itt	mi
 800a496:	2320      	movmi	r3, #32
 800a498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a49c:	0711      	lsls	r1, r2, #28
 800a49e:	bf44      	itt	mi
 800a4a0:	232b      	movmi	r3, #43	@ 0x2b
 800a4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ac:	d015      	beq.n	800a4da <_svfiprintf_r+0xfa>
 800a4ae:	4654      	mov	r4, sl
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f04f 0c0a 	mov.w	ip, #10
 800a4b6:	9a07      	ldr	r2, [sp, #28]
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4be:	3b30      	subs	r3, #48	@ 0x30
 800a4c0:	2b09      	cmp	r3, #9
 800a4c2:	d94b      	bls.n	800a55c <_svfiprintf_r+0x17c>
 800a4c4:	b1b0      	cbz	r0, 800a4f4 <_svfiprintf_r+0x114>
 800a4c6:	9207      	str	r2, [sp, #28]
 800a4c8:	e014      	b.n	800a4f4 <_svfiprintf_r+0x114>
 800a4ca:	eba0 0308 	sub.w	r3, r0, r8
 800a4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	46a2      	mov	sl, r4
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	e7d2      	b.n	800a480 <_svfiprintf_r+0xa0>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	1d19      	adds	r1, r3, #4
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	9103      	str	r1, [sp, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	bfbb      	ittet	lt
 800a4e6:	425b      	neglt	r3, r3
 800a4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ec:	9307      	strge	r3, [sp, #28]
 800a4ee:	9307      	strlt	r3, [sp, #28]
 800a4f0:	bfb8      	it	lt
 800a4f2:	9204      	strlt	r2, [sp, #16]
 800a4f4:	7823      	ldrb	r3, [r4, #0]
 800a4f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4f8:	d10a      	bne.n	800a510 <_svfiprintf_r+0x130>
 800a4fa:	7863      	ldrb	r3, [r4, #1]
 800a4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4fe:	d132      	bne.n	800a566 <_svfiprintf_r+0x186>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	3402      	adds	r4, #2
 800a504:	1d1a      	adds	r2, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	9203      	str	r2, [sp, #12]
 800a50a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a5c8 <_svfiprintf_r+0x1e8>
 800a514:	2203      	movs	r2, #3
 800a516:	4650      	mov	r0, sl
 800a518:	7821      	ldrb	r1, [r4, #0]
 800a51a:	f000 fa19 	bl	800a950 <memchr>
 800a51e:	b138      	cbz	r0, 800a530 <_svfiprintf_r+0x150>
 800a520:	2240      	movs	r2, #64	@ 0x40
 800a522:	9b04      	ldr	r3, [sp, #16]
 800a524:	eba0 000a 	sub.w	r0, r0, sl
 800a528:	4082      	lsls	r2, r0
 800a52a:	4313      	orrs	r3, r2
 800a52c:	3401      	adds	r4, #1
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	2206      	movs	r2, #6
 800a536:	4825      	ldr	r0, [pc, #148]	@ (800a5cc <_svfiprintf_r+0x1ec>)
 800a538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a53c:	f000 fa08 	bl	800a950 <memchr>
 800a540:	2800      	cmp	r0, #0
 800a542:	d036      	beq.n	800a5b2 <_svfiprintf_r+0x1d2>
 800a544:	4b22      	ldr	r3, [pc, #136]	@ (800a5d0 <_svfiprintf_r+0x1f0>)
 800a546:	bb1b      	cbnz	r3, 800a590 <_svfiprintf_r+0x1b0>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	3307      	adds	r3, #7
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	3308      	adds	r3, #8
 800a552:	9303      	str	r3, [sp, #12]
 800a554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a556:	4433      	add	r3, r6
 800a558:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55a:	e76a      	b.n	800a432 <_svfiprintf_r+0x52>
 800a55c:	460c      	mov	r4, r1
 800a55e:	2001      	movs	r0, #1
 800a560:	fb0c 3202 	mla	r2, ip, r2, r3
 800a564:	e7a8      	b.n	800a4b8 <_svfiprintf_r+0xd8>
 800a566:	2300      	movs	r3, #0
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4619      	mov	r1, r3
 800a56e:	3401      	adds	r4, #1
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	4620      	mov	r0, r4
 800a574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a578:	3a30      	subs	r2, #48	@ 0x30
 800a57a:	2a09      	cmp	r2, #9
 800a57c:	d903      	bls.n	800a586 <_svfiprintf_r+0x1a6>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c6      	beq.n	800a510 <_svfiprintf_r+0x130>
 800a582:	9105      	str	r1, [sp, #20]
 800a584:	e7c4      	b.n	800a510 <_svfiprintf_r+0x130>
 800a586:	4604      	mov	r4, r0
 800a588:	2301      	movs	r3, #1
 800a58a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58e:	e7f0      	b.n	800a572 <_svfiprintf_r+0x192>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4638      	mov	r0, r7
 800a598:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d4 <_svfiprintf_r+0x1f4>)
 800a59a:	a904      	add	r1, sp, #16
 800a59c:	f3af 8000 	nop.w
 800a5a0:	1c42      	adds	r2, r0, #1
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	d1d6      	bne.n	800a554 <_svfiprintf_r+0x174>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	065b      	lsls	r3, r3, #25
 800a5aa:	f53f af2d 	bmi.w	800a408 <_svfiprintf_r+0x28>
 800a5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5b0:	e72c      	b.n	800a40c <_svfiprintf_r+0x2c>
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	4b06      	ldr	r3, [pc, #24]	@ (800a5d4 <_svfiprintf_r+0x1f4>)
 800a5bc:	a904      	add	r1, sp, #16
 800a5be:	f000 f87d 	bl	800a6bc <_printf_i>
 800a5c2:	e7ed      	b.n	800a5a0 <_svfiprintf_r+0x1c0>
 800a5c4:	0800b7b6 	.word	0x0800b7b6
 800a5c8:	0800b7bc 	.word	0x0800b7bc
 800a5cc:	0800b7c0 	.word	0x0800b7c0
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	0800a329 	.word	0x0800a329

0800a5d8 <_printf_common>:
 800a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5dc:	4616      	mov	r6, r2
 800a5de:	4698      	mov	r8, r3
 800a5e0:	688a      	ldr	r2, [r1, #8]
 800a5e2:	690b      	ldr	r3, [r1, #16]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bfb8      	it	lt
 800a5ea:	4613      	movlt	r3, r2
 800a5ec:	6033      	str	r3, [r6, #0]
 800a5ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5f8:	b10a      	cbz	r2, 800a5fe <_printf_common+0x26>
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	0699      	lsls	r1, r3, #26
 800a602:	bf42      	ittt	mi
 800a604:	6833      	ldrmi	r3, [r6, #0]
 800a606:	3302      	addmi	r3, #2
 800a608:	6033      	strmi	r3, [r6, #0]
 800a60a:	6825      	ldr	r5, [r4, #0]
 800a60c:	f015 0506 	ands.w	r5, r5, #6
 800a610:	d106      	bne.n	800a620 <_printf_common+0x48>
 800a612:	f104 0a19 	add.w	sl, r4, #25
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	6832      	ldr	r2, [r6, #0]
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dc2b      	bgt.n	800a678 <_printf_common+0xa0>
 800a620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	3b00      	subs	r3, #0
 800a628:	bf18      	it	ne
 800a62a:	2301      	movne	r3, #1
 800a62c:	0692      	lsls	r2, r2, #26
 800a62e:	d430      	bmi.n	800a692 <_printf_common+0xba>
 800a630:	4641      	mov	r1, r8
 800a632:	4638      	mov	r0, r7
 800a634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a638:	47c8      	blx	r9
 800a63a:	3001      	adds	r0, #1
 800a63c:	d023      	beq.n	800a686 <_printf_common+0xae>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	6922      	ldr	r2, [r4, #16]
 800a642:	f003 0306 	and.w	r3, r3, #6
 800a646:	2b04      	cmp	r3, #4
 800a648:	bf14      	ite	ne
 800a64a:	2500      	movne	r5, #0
 800a64c:	6833      	ldreq	r3, [r6, #0]
 800a64e:	f04f 0600 	mov.w	r6, #0
 800a652:	bf08      	it	eq
 800a654:	68e5      	ldreq	r5, [r4, #12]
 800a656:	f104 041a 	add.w	r4, r4, #26
 800a65a:	bf08      	it	eq
 800a65c:	1aed      	subeq	r5, r5, r3
 800a65e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a662:	bf08      	it	eq
 800a664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a668:	4293      	cmp	r3, r2
 800a66a:	bfc4      	itt	gt
 800a66c:	1a9b      	subgt	r3, r3, r2
 800a66e:	18ed      	addgt	r5, r5, r3
 800a670:	42b5      	cmp	r5, r6
 800a672:	d11a      	bne.n	800a6aa <_printf_common+0xd2>
 800a674:	2000      	movs	r0, #0
 800a676:	e008      	b.n	800a68a <_printf_common+0xb2>
 800a678:	2301      	movs	r3, #1
 800a67a:	4652      	mov	r2, sl
 800a67c:	4641      	mov	r1, r8
 800a67e:	4638      	mov	r0, r7
 800a680:	47c8      	blx	r9
 800a682:	3001      	adds	r0, #1
 800a684:	d103      	bne.n	800a68e <_printf_common+0xb6>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	3501      	adds	r5, #1
 800a690:	e7c1      	b.n	800a616 <_printf_common+0x3e>
 800a692:	2030      	movs	r0, #48	@ 0x30
 800a694:	18e1      	adds	r1, r4, r3
 800a696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6a0:	4422      	add	r2, r4
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6a8:	e7c2      	b.n	800a630 <_printf_common+0x58>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	4641      	mov	r1, r8
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	47c8      	blx	r9
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d0e6      	beq.n	800a686 <_printf_common+0xae>
 800a6b8:	3601      	adds	r6, #1
 800a6ba:	e7d9      	b.n	800a670 <_printf_common+0x98>

0800a6bc <_printf_i>:
 800a6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	7e0f      	ldrb	r7, [r1, #24]
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	2f78      	cmp	r7, #120	@ 0x78
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	469a      	mov	sl, r3
 800a6cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6d2:	d807      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6d4:	2f62      	cmp	r7, #98	@ 0x62
 800a6d6:	d80a      	bhi.n	800a6ee <_printf_i+0x32>
 800a6d8:	2f00      	cmp	r7, #0
 800a6da:	f000 80d3 	beq.w	800a884 <_printf_i+0x1c8>
 800a6de:	2f58      	cmp	r7, #88	@ 0x58
 800a6e0:	f000 80ba 	beq.w	800a858 <_printf_i+0x19c>
 800a6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6ec:	e03a      	b.n	800a764 <_printf_i+0xa8>
 800a6ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6f2:	2b15      	cmp	r3, #21
 800a6f4:	d8f6      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a6fc <_printf_i+0x40>)
 800a6f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a769 	.word	0x0800a769
 800a704:	0800a6e5 	.word	0x0800a6e5
 800a708:	0800a6e5 	.word	0x0800a6e5
 800a70c:	0800a6e5 	.word	0x0800a6e5
 800a710:	0800a6e5 	.word	0x0800a6e5
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a6e5 	.word	0x0800a6e5
 800a71c:	0800a6e5 	.word	0x0800a6e5
 800a720:	0800a6e5 	.word	0x0800a6e5
 800a724:	0800a6e5 	.word	0x0800a6e5
 800a728:	0800a86b 	.word	0x0800a86b
 800a72c:	0800a793 	.word	0x0800a793
 800a730:	0800a825 	.word	0x0800a825
 800a734:	0800a6e5 	.word	0x0800a6e5
 800a738:	0800a6e5 	.word	0x0800a6e5
 800a73c:	0800a88d 	.word	0x0800a88d
 800a740:	0800a6e5 	.word	0x0800a6e5
 800a744:	0800a793 	.word	0x0800a793
 800a748:	0800a6e5 	.word	0x0800a6e5
 800a74c:	0800a6e5 	.word	0x0800a6e5
 800a750:	0800a82d 	.word	0x0800a82d
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6032      	str	r2, [r6, #0]
 800a75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a764:	2301      	movs	r3, #1
 800a766:	e09e      	b.n	800a8a6 <_printf_i+0x1ea>
 800a768:	6833      	ldr	r3, [r6, #0]
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	1d19      	adds	r1, r3, #4
 800a76e:	6031      	str	r1, [r6, #0]
 800a770:	0606      	lsls	r6, r0, #24
 800a772:	d501      	bpl.n	800a778 <_printf_i+0xbc>
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	e003      	b.n	800a780 <_printf_i+0xc4>
 800a778:	0645      	lsls	r5, r0, #25
 800a77a:	d5fb      	bpl.n	800a774 <_printf_i+0xb8>
 800a77c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a780:	2d00      	cmp	r5, #0
 800a782:	da03      	bge.n	800a78c <_printf_i+0xd0>
 800a784:	232d      	movs	r3, #45	@ 0x2d
 800a786:	426d      	negs	r5, r5
 800a788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a78c:	230a      	movs	r3, #10
 800a78e:	4859      	ldr	r0, [pc, #356]	@ (800a8f4 <_printf_i+0x238>)
 800a790:	e011      	b.n	800a7b6 <_printf_i+0xfa>
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	6833      	ldr	r3, [r6, #0]
 800a796:	0608      	lsls	r0, r1, #24
 800a798:	f853 5b04 	ldr.w	r5, [r3], #4
 800a79c:	d402      	bmi.n	800a7a4 <_printf_i+0xe8>
 800a79e:	0649      	lsls	r1, r1, #25
 800a7a0:	bf48      	it	mi
 800a7a2:	b2ad      	uxthmi	r5, r5
 800a7a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7a6:	6033      	str	r3, [r6, #0]
 800a7a8:	bf14      	ite	ne
 800a7aa:	230a      	movne	r3, #10
 800a7ac:	2308      	moveq	r3, #8
 800a7ae:	4851      	ldr	r0, [pc, #324]	@ (800a8f4 <_printf_i+0x238>)
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7b6:	6866      	ldr	r6, [r4, #4]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	bfa8      	it	ge
 800a7bc:	6821      	ldrge	r1, [r4, #0]
 800a7be:	60a6      	str	r6, [r4, #8]
 800a7c0:	bfa4      	itt	ge
 800a7c2:	f021 0104 	bicge.w	r1, r1, #4
 800a7c6:	6021      	strge	r1, [r4, #0]
 800a7c8:	b90d      	cbnz	r5, 800a7ce <_printf_i+0x112>
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d04b      	beq.n	800a866 <_printf_i+0x1aa>
 800a7ce:	4616      	mov	r6, r2
 800a7d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7d4:	fb03 5711 	mls	r7, r3, r1, r5
 800a7d8:	5dc7      	ldrb	r7, [r0, r7]
 800a7da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7de:	462f      	mov	r7, r5
 800a7e0:	42bb      	cmp	r3, r7
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	d9f4      	bls.n	800a7d0 <_printf_i+0x114>
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d10b      	bne.n	800a802 <_printf_i+0x146>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	07df      	lsls	r7, r3, #31
 800a7ee:	d508      	bpl.n	800a802 <_printf_i+0x146>
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	6861      	ldr	r1, [r4, #4]
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	bfde      	ittt	le
 800a7f8:	2330      	movle	r3, #48	@ 0x30
 800a7fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a802:	1b92      	subs	r2, r2, r6
 800a804:	6122      	str	r2, [r4, #16]
 800a806:	464b      	mov	r3, r9
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f8cd a000 	str.w	sl, [sp]
 800a810:	aa03      	add	r2, sp, #12
 800a812:	f7ff fee1 	bl	800a5d8 <_printf_common>
 800a816:	3001      	adds	r0, #1
 800a818:	d14a      	bne.n	800a8b0 <_printf_i+0x1f4>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	b004      	add	sp, #16
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	f043 0320 	orr.w	r3, r3, #32
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	2778      	movs	r7, #120	@ 0x78
 800a82e:	4832      	ldr	r0, [pc, #200]	@ (800a8f8 <_printf_i+0x23c>)
 800a830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	061f      	lsls	r7, r3, #24
 800a83a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a83e:	d402      	bmi.n	800a846 <_printf_i+0x18a>
 800a840:	065f      	lsls	r7, r3, #25
 800a842:	bf48      	it	mi
 800a844:	b2ad      	uxthmi	r5, r5
 800a846:	6031      	str	r1, [r6, #0]
 800a848:	07d9      	lsls	r1, r3, #31
 800a84a:	bf44      	itt	mi
 800a84c:	f043 0320 	orrmi.w	r3, r3, #32
 800a850:	6023      	strmi	r3, [r4, #0]
 800a852:	b11d      	cbz	r5, 800a85c <_printf_i+0x1a0>
 800a854:	2310      	movs	r3, #16
 800a856:	e7ab      	b.n	800a7b0 <_printf_i+0xf4>
 800a858:	4826      	ldr	r0, [pc, #152]	@ (800a8f4 <_printf_i+0x238>)
 800a85a:	e7e9      	b.n	800a830 <_printf_i+0x174>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	f023 0320 	bic.w	r3, r3, #32
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	e7f6      	b.n	800a854 <_printf_i+0x198>
 800a866:	4616      	mov	r6, r2
 800a868:	e7bd      	b.n	800a7e6 <_printf_i+0x12a>
 800a86a:	6833      	ldr	r3, [r6, #0]
 800a86c:	6825      	ldr	r5, [r4, #0]
 800a86e:	1d18      	adds	r0, r3, #4
 800a870:	6961      	ldr	r1, [r4, #20]
 800a872:	6030      	str	r0, [r6, #0]
 800a874:	062e      	lsls	r6, r5, #24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	d501      	bpl.n	800a87e <_printf_i+0x1c2>
 800a87a:	6019      	str	r1, [r3, #0]
 800a87c:	e002      	b.n	800a884 <_printf_i+0x1c8>
 800a87e:	0668      	lsls	r0, r5, #25
 800a880:	d5fb      	bpl.n	800a87a <_printf_i+0x1be>
 800a882:	8019      	strh	r1, [r3, #0]
 800a884:	2300      	movs	r3, #0
 800a886:	4616      	mov	r6, r2
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	e7bc      	b.n	800a806 <_printf_i+0x14a>
 800a88c:	6833      	ldr	r3, [r6, #0]
 800a88e:	2100      	movs	r1, #0
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	6032      	str	r2, [r6, #0]
 800a894:	681e      	ldr	r6, [r3, #0]
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	4630      	mov	r0, r6
 800a89a:	f000 f859 	bl	800a950 <memchr>
 800a89e:	b108      	cbz	r0, 800a8a4 <_printf_i+0x1e8>
 800a8a0:	1b80      	subs	r0, r0, r6
 800a8a2:	6060      	str	r0, [r4, #4]
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ae:	e7aa      	b.n	800a806 <_printf_i+0x14a>
 800a8b0:	4632      	mov	r2, r6
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	47d0      	blx	sl
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	d0ad      	beq.n	800a81a <_printf_i+0x15e>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	079b      	lsls	r3, r3, #30
 800a8c2:	d413      	bmi.n	800a8ec <_printf_i+0x230>
 800a8c4:	68e0      	ldr	r0, [r4, #12]
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	4298      	cmp	r0, r3
 800a8ca:	bfb8      	it	lt
 800a8cc:	4618      	movlt	r0, r3
 800a8ce:	e7a6      	b.n	800a81e <_printf_i+0x162>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4632      	mov	r2, r6
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	47d0      	blx	sl
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d09d      	beq.n	800a81a <_printf_i+0x15e>
 800a8de:	3501      	adds	r5, #1
 800a8e0:	68e3      	ldr	r3, [r4, #12]
 800a8e2:	9903      	ldr	r1, [sp, #12]
 800a8e4:	1a5b      	subs	r3, r3, r1
 800a8e6:	42ab      	cmp	r3, r5
 800a8e8:	dcf2      	bgt.n	800a8d0 <_printf_i+0x214>
 800a8ea:	e7eb      	b.n	800a8c4 <_printf_i+0x208>
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	f104 0619 	add.w	r6, r4, #25
 800a8f2:	e7f5      	b.n	800a8e0 <_printf_i+0x224>
 800a8f4:	0800b7c7 	.word	0x0800b7c7
 800a8f8:	0800b7d8 	.word	0x0800b7d8

0800a8fc <memmove>:
 800a8fc:	4288      	cmp	r0, r1
 800a8fe:	b510      	push	{r4, lr}
 800a900:	eb01 0402 	add.w	r4, r1, r2
 800a904:	d902      	bls.n	800a90c <memmove+0x10>
 800a906:	4284      	cmp	r4, r0
 800a908:	4623      	mov	r3, r4
 800a90a:	d807      	bhi.n	800a91c <memmove+0x20>
 800a90c:	1e43      	subs	r3, r0, #1
 800a90e:	42a1      	cmp	r1, r4
 800a910:	d008      	beq.n	800a924 <memmove+0x28>
 800a912:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a91a:	e7f8      	b.n	800a90e <memmove+0x12>
 800a91c:	4601      	mov	r1, r0
 800a91e:	4402      	add	r2, r0
 800a920:	428a      	cmp	r2, r1
 800a922:	d100      	bne.n	800a926 <memmove+0x2a>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a92a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a92e:	e7f7      	b.n	800a920 <memmove+0x24>

0800a930 <_sbrk_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	2300      	movs	r3, #0
 800a934:	4d05      	ldr	r5, [pc, #20]	@ (800a94c <_sbrk_r+0x1c>)
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7f7 fca0 	bl	8002280 <_sbrk>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_sbrk_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_sbrk_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20002488 	.word	0x20002488

0800a950 <memchr>:
 800a950:	4603      	mov	r3, r0
 800a952:	b510      	push	{r4, lr}
 800a954:	b2c9      	uxtb	r1, r1
 800a956:	4402      	add	r2, r0
 800a958:	4293      	cmp	r3, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	d101      	bne.n	800a962 <memchr+0x12>
 800a95e:	2000      	movs	r0, #0
 800a960:	e003      	b.n	800a96a <memchr+0x1a>
 800a962:	7804      	ldrb	r4, [r0, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	428c      	cmp	r4, r1
 800a968:	d1f6      	bne.n	800a958 <memchr+0x8>
 800a96a:	bd10      	pop	{r4, pc}

0800a96c <_realloc_r>:
 800a96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a970:	4680      	mov	r8, r0
 800a972:	4615      	mov	r5, r2
 800a974:	460c      	mov	r4, r1
 800a976:	b921      	cbnz	r1, 800a982 <_realloc_r+0x16>
 800a978:	4611      	mov	r1, r2
 800a97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a97e:	f7ff bc47 	b.w	800a210 <_malloc_r>
 800a982:	b92a      	cbnz	r2, 800a990 <_realloc_r+0x24>
 800a984:	f7ff fbda 	bl	800a13c <_free_r>
 800a988:	2400      	movs	r4, #0
 800a98a:	4620      	mov	r0, r4
 800a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a990:	f000 f81a 	bl	800a9c8 <_malloc_usable_size_r>
 800a994:	4285      	cmp	r5, r0
 800a996:	4606      	mov	r6, r0
 800a998:	d802      	bhi.n	800a9a0 <_realloc_r+0x34>
 800a99a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a99e:	d8f4      	bhi.n	800a98a <_realloc_r+0x1e>
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	f7ff fc34 	bl	800a210 <_malloc_r>
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d0ec      	beq.n	800a988 <_realloc_r+0x1c>
 800a9ae:	42b5      	cmp	r5, r6
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	bf28      	it	cs
 800a9b6:	4632      	movcs	r2, r6
 800a9b8:	f7ff fbb2 	bl	800a120 <memcpy>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f7ff fbbc 	bl	800a13c <_free_r>
 800a9c4:	463c      	mov	r4, r7
 800a9c6:	e7e0      	b.n	800a98a <_realloc_r+0x1e>

0800a9c8 <_malloc_usable_size_r>:
 800a9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9cc:	1f18      	subs	r0, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfbc      	itt	lt
 800a9d2:	580b      	ldrlt	r3, [r1, r0]
 800a9d4:	18c0      	addlt	r0, r0, r3
 800a9d6:	4770      	bx	lr

0800a9d8 <_init>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	bf00      	nop
 800a9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9de:	bc08      	pop	{r3}
 800a9e0:	469e      	mov	lr, r3
 800a9e2:	4770      	bx	lr

0800a9e4 <_fini>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	bf00      	nop
 800a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ea:	bc08      	pop	{r3}
 800a9ec:	469e      	mov	lr, r3
 800a9ee:	4770      	bx	lr
