
modbus_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008764  08008764  0000a294  2**0
                  CONTENTS
  4 .ARM          00000008  08008764  08008764  00009764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800876c  0800876c  0000a294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008770  08008770  00009770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  08008774  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000294  08008a08  0000a294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08008a08  0000aaf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fce  00000000  00000000  0000a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d7  00000000  00000000  0001c28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  00020a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954f  00000000  00000000  00021631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017221  00000000  00000000  0003ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008766b  00000000  00000000  00051da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d940c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  000d9450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000dd394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000294 	.word	0x20000294
 8000128:	00000000 	.word	0x00000000
 800012c:	08007a38 	.word	0x08007a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000298 	.word	0x20000298
 8000148:	08007a38 	.word	0x08007a38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_at_response_error_check>:
char tx_buff[AT_TX_BUFF_SIZE] = "";
uint16_t RxLen;



at_state_t _at_response_error_check(char* rx_buff){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(find_substr(rx_buff, "ERROR")){
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <_at_response_error_check+0x24>)
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f000 f80c 	bl	8000184 <find_substr>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d001      	beq.n	8000176 <_at_response_error_check+0x1a>
		return AT_STATE_ERROR;
 8000172:	2300      	movs	r3, #0
 8000174:	e000      	b.n	8000178 <_at_response_error_check+0x1c>
	}
	return AT_STATE_OK;
 8000176:	2301      	movs	r3, #1
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08007a50 	.word	0x08007a50

08000184 <find_substr>:


bool find_substr(char* str, char* substr){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	char* pch = strstr(str, substr);
 800018e:	6839      	ldr	r1, [r7, #0]
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f006 ffb2 	bl	80070fa <strstr>
 8000196:	60f8      	str	r0, [r7, #12]
		if(pch != NULL){
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d001      	beq.n	80001a2 <find_substr+0x1e>
			return true;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <find_substr+0x20>
		}
		return false;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <flush_buff>:


void flush_buff(char* buffer){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	memset(buffer,0,strlen(buffer));
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffc9 	bl	800014c <strlen>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	2100      	movs	r1, #0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f006 ff83 	bl	80070cc <memset>
	strcpy(buffer, "");
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <at_read>:



at_state_t at_read(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af02      	add	r7, sp, #8
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 80001e2:	68b8      	ldr	r0, [r7, #8]
 80001e4:	f7ff ffe2 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80001e8:	4b19      	ldr	r3, [pc, #100]	@ (8000250 <at_read+0x7c>)
 80001ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <at_read+0x80>)
 80001ec:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	4817      	ldr	r0, [pc, #92]	@ (8000250 <at_read+0x7c>)
 80001f2:	f006 ff73 	bl	80070dc <strcat>
	strcat(tx_buff, "?\r\n");
 80001f6:	4816      	ldr	r0, [pc, #88]	@ (8000250 <at_read+0x7c>)
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b13      	ldr	r3, [pc, #76]	@ (8000250 <at_read+0x7c>)
 8000202:	4413      	add	r3, r2
 8000204:	4a14      	ldr	r2, [pc, #80]	@ (8000258 <at_read+0x84>)
 8000206:	6810      	ldr	r0, [r2, #0]
 8000208:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 800020a:	4811      	ldr	r0, [pc, #68]	@ (8000250 <at_read+0x7c>)
 800020c:	f7ff ff9e 	bl	800014c <strlen>
 8000210:	4603      	mov	r3, r0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	3301      	adds	r3, #1
 8000216:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	b29b      	uxth	r3, r3
 800021c:	461a      	mov	r2, r3
 800021e:	490c      	ldr	r1, [pc, #48]	@ (8000250 <at_read+0x7c>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f005 fe92 	bl	8005f4a <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 8000226:	887b      	ldrh	r3, [r7, #2]
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <at_read+0x88>)
 800022c:	2232      	movs	r2, #50	@ 0x32
 800022e:	68b9      	ldr	r1, [r7, #8]
 8000230:	68f8      	ldr	r0, [r7, #12]
 8000232:	f005 febf 	bl	8005fb4 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 8000236:	68b8      	ldr	r0, [r7, #8]
 8000238:	f7ff ff90 	bl	800015c <_at_response_error_check>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <at_read+0x72>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000242:	2301      	movs	r3, #1
 8000244:	e000      	b.n	8000248 <at_read+0x74>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3718      	adds	r7, #24
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200002b0 	.word	0x200002b0
 8000254:	002b5441 	.word	0x002b5441
 8000258:	08007a58 	.word	0x08007a58
 800025c:	200002e2 	.word	0x200002e2

08000260 <at_write>:



at_state_t at_write(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000260:	b580      	push	{r7, lr}
 8000262:	b08a      	sub	sp, #40	@ 0x28
 8000264:	af02      	add	r7, sp, #8
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800026e:	68b8      	ldr	r0, [r7, #8]
 8000270:	f7ff ff9c 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000274:	4b2f      	ldr	r3, [pc, #188]	@ (8000334 <at_write+0xd4>)
 8000276:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <at_write+0xd8>)
 8000278:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	482d      	ldr	r0, [pc, #180]	@ (8000334 <at_write+0xd4>)
 800027e:	f006 ff2d 	bl	80070dc <strcat>
	strcat(tx_buff, "=");
 8000282:	482c      	ldr	r0, [pc, #176]	@ (8000334 <at_write+0xd4>)
 8000284:	f7ff ff62 	bl	800014c <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	461a      	mov	r2, r3
 800028c:	4b29      	ldr	r3, [pc, #164]	@ (8000334 <at_write+0xd4>)
 800028e:	4413      	add	r3, r2
 8000290:	492a      	ldr	r1, [pc, #168]	@ (800033c <at_write+0xdc>)
 8000292:	461a      	mov	r2, r3
 8000294:	460b      	mov	r3, r1
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 800029a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800029e:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
 80002a4:	e00a      	b.n	80002bc <at_write+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	1d1a      	adds	r2, r3, #4
 80002aa:	617a      	str	r2, [r7, #20]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4619      	mov	r1, r3
 80002b0:	4820      	ldr	r0, [pc, #128]	@ (8000334 <at_write+0xd4>)
 80002b2:	f006 ff13 	bl	80070dc <strcat>
	for(int i=0;i<argc;i++){
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	3301      	adds	r3, #1
 80002ba:	61fb      	str	r3, [r7, #28]
 80002bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80002c0:	69fa      	ldr	r2, [r7, #28]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	dbef      	blt.n	80002a6 <at_write+0x46>
	}
	strcat(tx_buff, "\r\n");
 80002c6:	481b      	ldr	r0, [pc, #108]	@ (8000334 <at_write+0xd4>)
 80002c8:	f7ff ff40 	bl	800014c <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <at_write+0xd4>)
 80002d2:	4413      	add	r3, r2
 80002d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000340 <at_write+0xe0>)
 80002d6:	8811      	ldrh	r1, [r2, #0]
 80002d8:	7892      	ldrb	r2, [r2, #2]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 80002de:	4815      	ldr	r0, [pc, #84]	@ (8000334 <at_write+0xd4>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	3301      	adds	r3, #1
 80002ea:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80002ec:	7efb      	ldrb	r3, [r7, #27]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4910      	ldr	r1, [pc, #64]	@ (8000334 <at_write+0xd4>)
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f005 fe28 	bl	8005f4a <HAL_UART_Transmit_IT>
//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80002fa:	887b      	ldrh	r3, [r7, #2]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <at_write+0xe4>)
 8000300:	2232      	movs	r2, #50	@ 0x32
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f005 fe55 	bl	8005fb4 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f7ff ff26 	bl	800015c <_at_response_error_check>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d008      	beq.n	8000328 <at_write+0xc8>
		if(find_substr(rx_buff, AT_OK)){
 8000316:	490c      	ldr	r1, [pc, #48]	@ (8000348 <at_write+0xe8>)
 8000318:	68b8      	ldr	r0, [r7, #8]
 800031a:	f7ff ff33 	bl	8000184 <find_substr>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <at_write+0xc8>
			return AT_STATE_OK;
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <at_write+0xca>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000328:	2300      	movs	r3, #0
}
 800032a:	4618      	mov	r0, r3
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200002b0 	.word	0x200002b0
 8000338:	002b5441 	.word	0x002b5441
 800033c:	08007a5c 	.word	0x08007a5c
 8000340:	08007a60 	.word	0x08007a60
 8000344:	200002e2 	.word	0x200002e2
 8000348:	08007a64 	.word	0x08007a64

0800034c <at_execute>:



at_state_t at_execute(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af02      	add	r7, sp, #8
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800035a:	68b8      	ldr	r0, [r7, #8]
 800035c:	f7ff ff26 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <at_execute+0x24>
		strcpy(tx_buff, "AT+");
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <at_execute+0xa8>)
 800036a:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <at_execute+0xac>)
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	e007      	b.n	8000380 <at_execute+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 8000370:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <at_execute+0xa8>)
 8000372:	4a22      	ldr	r2, [pc, #136]	@ (80003fc <at_execute+0xb0>)
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	4611      	mov	r1, r2
 8000378:	8019      	strh	r1, [r3, #0]
 800037a:	3302      	adds	r3, #2
 800037c:	0c12      	lsrs	r2, r2, #16
 800037e:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	481c      	ldr	r0, [pc, #112]	@ (80003f4 <at_execute+0xa8>)
 8000384:	f006 feaa 	bl	80070dc <strcat>
	strcat(tx_buff, "\r\n");
 8000388:	481a      	ldr	r0, [pc, #104]	@ (80003f4 <at_execute+0xa8>)
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	461a      	mov	r2, r3
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <at_execute+0xa8>)
 8000394:	4413      	add	r3, r2
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <at_execute+0xb4>)
 8000398:	8811      	ldrh	r1, [r2, #0]
 800039a:	7892      	ldrb	r2, [r2, #2]
 800039c:	8019      	strh	r1, [r3, #0]
 800039e:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80003a0:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <at_execute+0xa8>)
 80003a2:	f7ff fed3 	bl	800014c <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	3301      	adds	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	490f      	ldr	r1, [pc, #60]	@ (80003f4 <at_execute+0xa8>)
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f005 fdc7 	bl	8005f4a <HAL_UART_Transmit_IT>
	//	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <at_execute+0xb8>)
 80003c2:	2232      	movs	r2, #50	@ 0x32
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	68f8      	ldr	r0, [r7, #12]
 80003c8:	f005 fdf4 	bl	8005fb4 <HAL_UARTEx_ReceiveToIdle>
	if(_at_response_error_check(rx_buff)){
 80003cc:	68b8      	ldr	r0, [r7, #8]
 80003ce:	f7ff fec5 	bl	800015c <_at_response_error_check>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <at_execute+0x9e>
		if(find_substr(rx_buff, AT_OK)){
 80003d8:	490b      	ldr	r1, [pc, #44]	@ (8000408 <at_execute+0xbc>)
 80003da:	68b8      	ldr	r0, [r7, #8]
 80003dc:	f7ff fed2 	bl	8000184 <find_substr>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <at_execute+0x9e>
			return AT_STATE_OK;
 80003e6:	2301      	movs	r3, #1
 80003e8:	e000      	b.n	80003ec <at_execute+0xa0>
		}
	}
	return AT_STATE_ERROR;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200002b0 	.word	0x200002b0
 80003f8:	002b5441 	.word	0x002b5441
 80003fc:	08007a68 	.word	0x08007a68
 8000400:	08007a60 	.word	0x08007a60
 8000404:	200002e2 	.word	0x200002e2
 8000408:	08007a64 	.word	0x08007a64

0800040c <at_read_blocking>:





at_state_t at_read_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800041a:	68b8      	ldr	r0, [r7, #8]
 800041c:	f7ff fec6 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <at_read_blocking+0x78>)
 8000422:	4a19      	ldr	r2, [pc, #100]	@ (8000488 <at_read_blocking+0x7c>)
 8000424:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <at_read_blocking+0x78>)
 800042a:	f006 fe57 	bl	80070dc <strcat>
	strcat(tx_buff, "?\r\n");
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <at_read_blocking+0x78>)
 8000430:	f7ff fe8c 	bl	800014c <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <at_read_blocking+0x78>)
 800043a:	4413      	add	r3, r2
 800043c:	4a13      	ldr	r2, [pc, #76]	@ (800048c <at_read_blocking+0x80>)
 800043e:	6810      	ldr	r0, [r2, #0]
 8000440:	6018      	str	r0, [r3, #0]
	uint8_t tx_size = strlen(tx_buff) + 1;
 8000442:	4810      	ldr	r0, [pc, #64]	@ (8000484 <at_read_blocking+0x78>)
 8000444:	f7ff fe82 	bl	800014c <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b2db      	uxtb	r3, r3
 800044c:	3301      	adds	r3, #1
 800044e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 8000450:	7dfb      	ldrb	r3, [r7, #23]
 8000452:	b29b      	uxth	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	490b      	ldr	r1, [pc, #44]	@ (8000484 <at_read_blocking+0x78>)
 8000458:	68f8      	ldr	r0, [r7, #12]
 800045a:	f005 fd76 	bl	8005f4a <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	2232      	movs	r2, #50	@ 0x32
 8000462:	68b9      	ldr	r1, [r7, #8]
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f005 fcde 	bl	8005e26 <HAL_UART_Receive>
//	HAL_UARTEx_ReceiveToIdle(pHuart, rx_buff, AT_RX_BUFF_SIZE, &RxLen, timeout);
	if(_at_response_error_check(rx_buff)){
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f7ff fe76 	bl	800015c <_at_response_error_check>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <at_read_blocking+0x6e>
//		char at_read_res[10] = "+";
//		strcat(at_read_res, cmd);
//		if(find_substr(rx_buff, at_read_res)){
			return AT_STATE_OK;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <at_read_blocking+0x70>
//		}
	}
	else{

	}
	return AT_STATE_ERROR;
 800047a:	2300      	movs	r3, #0

}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200002b0 	.word	0x200002b0
 8000488:	002b5441 	.word	0x002b5441
 800048c:	08007a58 	.word	0x08007a58

08000490 <at_write_blocking>:





at_state_t at_write_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout, uint8_t argc, ...){
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 800049e:	68b8      	ldr	r0, [r7, #8]
 80004a0:	f7ff fe84 	bl	80001ac <flush_buff>
	strcpy(tx_buff, "AT+");
 80004a4:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <at_write_blocking+0xe0>)
 80004a6:	4a33      	ldr	r2, [pc, #204]	@ (8000574 <at_write_blocking+0xe4>)
 80004a8:	601a      	str	r2, [r3, #0]
	strcat(tx_buff,cmd);
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4830      	ldr	r0, [pc, #192]	@ (8000570 <at_write_blocking+0xe0>)
 80004ae:	f006 fe15 	bl	80070dc <strcat>
	strcat(tx_buff, "=");
 80004b2:	482f      	ldr	r0, [pc, #188]	@ (8000570 <at_write_blocking+0xe0>)
 80004b4:	f7ff fe4a 	bl	800014c <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <at_write_blocking+0xe0>)
 80004be:	4413      	add	r3, r2
 80004c0:	492d      	ldr	r1, [pc, #180]	@ (8000578 <at_write_blocking+0xe8>)
 80004c2:	461a      	mov	r2, r3
 80004c4:	460b      	mov	r3, r1
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	8013      	strh	r3, [r2, #0]
	va_list args;
	va_start(args,argc);
 80004ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ce:	617b      	str	r3, [r7, #20]
	for(int i=0;i<argc;i++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	e00a      	b.n	80004ec <at_write_blocking+0x5c>
		strcat(tx_buff, (va_arg(args, char*)));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	1d1a      	adds	r2, r3, #4
 80004da:	617a      	str	r2, [r7, #20]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <at_write_blocking+0xe0>)
 80004e2:	f006 fdfb 	bl	80070dc <strcat>
	for(int i=0;i<argc;i++){
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3301      	adds	r3, #1
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dbef      	blt.n	80004d6 <at_write_blocking+0x46>
	}
	strcat(tx_buff, "\r\n");
 80004f6:	481e      	ldr	r0, [pc, #120]	@ (8000570 <at_write_blocking+0xe0>)
 80004f8:	f7ff fe28 	bl	800014c <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <at_write_blocking+0xe0>)
 8000502:	4413      	add	r3, r2
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <at_write_blocking+0xec>)
 8000506:	8811      	ldrh	r1, [r2, #0]
 8000508:	7892      	ldrb	r2, [r2, #2]
 800050a:	8019      	strh	r1, [r3, #0]
 800050c:	709a      	strb	r2, [r3, #2]
	va_end(args);

	uint8_t tx_size = strlen(tx_buff) + 1;
 800050e:	4818      	ldr	r0, [pc, #96]	@ (8000570 <at_write_blocking+0xe0>)
 8000510:	f7ff fe1c 	bl	800014c <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b2db      	uxtb	r3, r3
 8000518:	3301      	adds	r3, #1
 800051a:	76fb      	strb	r3, [r7, #27]

	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 800051c:	7efb      	ldrb	r3, [r7, #27]
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4913      	ldr	r1, [pc, #76]	@ (8000570 <at_write_blocking+0xe0>)
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f005 fd10 	bl	8005f4a <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	2232      	movs	r2, #50	@ 0x32
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f005 fc78 	bl	8005e26 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f7ff fe10 	bl	800015c <_at_response_error_check>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d011      	beq.n	8000566 <at_write_blocking+0xd6>
		if(find_substr(rx_buff, AT_OK)){
 8000542:	490f      	ldr	r1, [pc, #60]	@ (8000580 <at_write_blocking+0xf0>)
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f7ff fe1d 	bl	8000184 <find_substr>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <at_write_blocking+0xc4>
			return AT_STATE_OK;
 8000550:	2301      	movs	r3, #1
 8000552:	e009      	b.n	8000568 <at_write_blocking+0xd8>
		}
		if(find_substr(rx_buff, ">")){
 8000554:	490b      	ldr	r1, [pc, #44]	@ (8000584 <at_write_blocking+0xf4>)
 8000556:	68b8      	ldr	r0, [r7, #8]
 8000558:	f7ff fe14 	bl	8000184 <find_substr>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <at_write_blocking+0xd6>
			return AT_STATE_ENTER_INPUT;
 8000562:	2302      	movs	r3, #2
 8000564:	e000      	b.n	8000568 <at_write_blocking+0xd8>
	}
	else{

	}

	return AT_STATE_ERROR;
 8000566:	2300      	movs	r3, #0

}
 8000568:	4618      	mov	r0, r3
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200002b0 	.word	0x200002b0
 8000574:	002b5441 	.word	0x002b5441
 8000578:	08007a5c 	.word	0x08007a5c
 800057c:	08007a60 	.word	0x08007a60
 8000580:	08007a64 	.word	0x08007a64
 8000584:	08007a6c 	.word	0x08007a6c

08000588 <at_execute_blocking>:





at_state_t at_execute_blocking(UART_HandleTypeDef* pHuart, char* rx_buff, char* cmd, uint16_t timeout){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	807b      	strh	r3, [r7, #2]
	flush_buff(rx_buff);
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f7ff fe08 	bl	80001ac <flush_buff>
	if(strlen(cmd) > 0){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <at_execute_blocking+0x24>
		strcpy(tx_buff, "AT+");
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <at_execute_blocking+0xa4>)
 80005a6:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <at_execute_blocking+0xa8>)
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e007      	b.n	80005bc <at_execute_blocking+0x34>
	}
	else{
		strcpy(tx_buff, "AT");
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <at_execute_blocking+0xa4>)
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <at_execute_blocking+0xac>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	0c12      	lsrs	r2, r2, #16
 80005ba:	701a      	strb	r2, [r3, #0]
	}
	strcat(tx_buff,cmd);
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	481b      	ldr	r0, [pc, #108]	@ (800062c <at_execute_blocking+0xa4>)
 80005c0:	f006 fd8c 	bl	80070dc <strcat>
	strcat(tx_buff, "\r\n");
 80005c4:	4819      	ldr	r0, [pc, #100]	@ (800062c <at_execute_blocking+0xa4>)
 80005c6:	f7ff fdc1 	bl	800014c <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <at_execute_blocking+0xa4>)
 80005d0:	4413      	add	r3, r2
 80005d2:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <at_execute_blocking+0xb0>)
 80005d4:	8811      	ldrh	r1, [r2, #0]
 80005d6:	7892      	ldrb	r2, [r2, #2]
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	709a      	strb	r2, [r3, #2]
	uint8_t tx_size = strlen(tx_buff) + 1;
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <at_execute_blocking+0xa4>)
 80005de:	f7ff fdb5 	bl	800014c <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_IT(pHuart, tx_buff, tx_size);
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <at_execute_blocking+0xa4>)
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f005 fca9 	bl	8005f4a <HAL_UART_Transmit_IT>
	HAL_UART_Receive(pHuart, rx_buff, AT_RX_BUFF_SIZE, timeout);
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	2232      	movs	r2, #50	@ 0x32
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f005 fc11 	bl	8005e26 <HAL_UART_Receive>
	if(_at_response_error_check(rx_buff)){
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f7ff fda9 	bl	800015c <_at_response_error_check>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <at_execute_blocking+0x9a>
		if(find_substr(rx_buff, AT_OK)){
 8000610:	490a      	ldr	r1, [pc, #40]	@ (800063c <at_execute_blocking+0xb4>)
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f7ff fdb6 	bl	8000184 <find_substr>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <at_execute_blocking+0x9a>
			return AT_STATE_OK;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <at_execute_blocking+0x9c>
		}
	}
	return AT_STATE_ERROR;
 8000622:	2300      	movs	r3, #0

}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200002b0 	.word	0x200002b0
 8000630:	002b5441 	.word	0x002b5441
 8000634:	08007a68 	.word	0x08007a68
 8000638:	08007a60 	.word	0x08007a60
 800063c:	08007a64 	.word	0x08007a64

08000640 <CRC16>:


#include "crc16.h"

uint16_t CRC16(uint8_t *puchMsg, unsigned short usDataLen ) /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	uint8_t uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	@ 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	uint8_t uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	@ 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--){
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--){
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	807a      	strh	r2, [r7, #2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000100 	.word	0x20000100

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_DMA_Init+0x38>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 2);
 80006ca:	2202      	movs	r2, #2
 80006cc:	2102      	movs	r1, #2
 80006ce:	2010      	movs	r0, #16
 80006d0:	f001 ff76 	bl	80025c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d4:	2010      	movs	r0, #16
 80006d6:	f001 ff9f 	bl	8002618 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0xc0>)
 8000762:	f002 fd41 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <MX_GPIO_Init+0xc0>)
 800077e:	f002 fac5 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0xc8>)
 8000798:	f002 fab8 	bl	8002d0c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	10210000 	.word	0x10210000
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f002 fd5f 	bl	80032b4 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 fb16 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002e4 	.word	0x200002e4
 8000808:	40005400 	.word	0x40005400
 800080c:	000186a0 	.word	0x000186a0

08000810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <HAL_I2C_MspInit+0x70>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d123      	bne.n	8000878 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000848:	23c0      	movs	r3, #192	@ 0xc0
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084c:	2312      	movs	r3, #18
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	480b      	ldr	r0, [pc, #44]	@ (8000888 <HAL_I2C_MspInit+0x78>)
 800085c:	f002 fa56 	bl	8002d0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086a:	61d3      	str	r3, [r2, #28]
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_I2C_MspInit+0x74>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000
 8000888:	40010c00 	.word	0x40010c00

0800088c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	rtc_set_alarm_seconds_it(hrtc, REPEAT_DELAY);
 8000894:	210a      	movs	r1, #10
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 fe2e 	bl	80014f8 <rtc_set_alarm_seconds_it>
	repeative_task();
 800089c:	f000 f9b0 	bl	8000c00 <repeative_task>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008a0:	2102      	movs	r1, #2
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <HAL_RTC_AlarmAEventCallback+0x24>)
 80008a4:	f002 fccc 	bl	8003240 <HAL_GPIO_TogglePin>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010800 	.word	0x40010800

080008b4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008c4:	d109      	bne.n	80008da <HAL_GPIO_EXTI_Callback+0x26>
		if(sim_reboot(&sim)){
 80008c6:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008c8:	f000 fee6 	bl	8001698 <sim_reboot>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <HAL_GPIO_EXTI_Callback+0x26>
			oled_printl(&oled, "sim reboot");
 80008d2:	4905      	ldr	r1, [pc, #20]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x38>)
 80008d6:	f000 fd19 	bl	800130c <oled_printl>
		}
	}

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000338 	.word	0x20000338
 80008e8:	08007a70 	.word	0x08007a70
 80008ec:	2000034c 	.word	0x2000034c

080008f0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_UART_TxCpltCallback+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d103      	bne.n	800090e <HAL_UART_TxCpltCallback+0x1e>
		oled_printl(&oled, "modbus req sent");
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <HAL_UART_TxCpltCallback+0x2c>)
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_UART_TxCpltCallback+0x30>)
 800090a:	f000 fcff 	bl	800130c <oled_printl>
	}

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000020c 	.word	0x2000020c
 800091c:	08007a7c 	.word	0x08007a7c
 8000920:	2000034c 	.word	0x2000034c

08000924 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PHUART_MODBUS->Instance){

	}
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <HAL_UARTEx_RxEventCallback>:





void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
	oled_printl(&oled, "rx event");
 8000944:	4932      	ldr	r1, [pc, #200]	@ (8000a10 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000948:	f000 fce0 	bl	800130c <oled_printl>
	if(huart->Instance == PHUART_MODBUS->Instance){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	429a      	cmp	r2, r3
 8000958:	d155      	bne.n	8000a06 <HAL_UARTEx_RxEventCallback+0xce>
		oled_printl(&oled, "modbus response");
 800095a:	4930      	ldr	r1, [pc, #192]	@ (8000a1c <HAL_UARTEx_RxEventCallback+0xe4>)
 800095c:	482d      	ldr	r0, [pc, #180]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 800095e:	f000 fcd5 	bl	800130c <oled_printl>
		MODBUS_MASTER_res normal_res = {0};
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
		MODBUS_MASTER_exception exception = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	809a      	strh	r2, [r3, #4]

		if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_OK){
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	2139      	movs	r1, #57	@ 0x39
 8000982:	4827      	ldr	r0, [pc, #156]	@ (8000a20 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000984:	f000 fad8 	bl	8000f38 <MODBUS_MASTER_response_handler>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d121      	bne.n	80009d2 <HAL_UARTEx_RxEventCallback+0x9a>
			uint8_t* register_data = normal_res.register_data;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	61fb      	str	r3, [r7, #28]
			if(!register_data){
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d104      	bne.n	80009a2 <HAL_UARTEx_RxEventCallback+0x6a>
				oled_printl(&oled, "register NULL");
 8000998:	4922      	ldr	r1, [pc, #136]	@ (8000a24 <HAL_UARTEx_RxEventCallback+0xec>)
 800099a:	481e      	ldr	r0, [pc, #120]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 800099c:	f000 fcb6 	bl	800130c <oled_printl>
 80009a0:	e003      	b.n	80009aa <HAL_UARTEx_RxEventCallback+0x72>
			}
			else{
				oled_printl(&oled, "MODBUS_RES_OK");
 80009a2:	4921      	ldr	r1, [pc, #132]	@ (8000a28 <HAL_UARTEx_RxEventCallback+0xf0>)
 80009a4:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 80009a6:	f000 fcb1 	bl	800130c <oled_printl>
			}
			sprintf(mqtt_payload_buff, "0x%X", (uint16_t)((register_data[0]<<8) | register_data[1]));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3301      	adds	r3, #1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	491a      	ldr	r1, [pc, #104]	@ (8000a2c <HAL_UARTEx_RxEventCallback+0xf4>)
 80009c4:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <HAL_UARTEx_RxEventCallback+0xf8>)
 80009c6:	f006 fb61 	bl	800708c <siprintf>
			// now publish the data
			ready_to_send = true;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <HAL_UARTEx_RxEventCallback+0xfc>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]


	}


}
 80009d0:	e019      	b.n	8000a06 <HAL_UARTEx_RxEventCallback+0xce>
		else if(MODBUS_MASTER_response_handler(&master, MODBUS_SLAVE_ADDR, &normal_res, &exception) == MODBUS_RES_EXCEPTION){
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	f107 0210 	add.w	r2, r7, #16
 80009da:	2139      	movs	r1, #57	@ 0x39
 80009dc:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <HAL_UARTEx_RxEventCallback+0xe8>)
 80009de:	f000 faab 	bl	8000f38 <MODBUS_MASTER_response_handler>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10a      	bne.n	80009fe <HAL_UARTEx_RxEventCallback+0xc6>
			oled_printl(&oled, "MODBUS_RES_EXCEPTION");
 80009e8:	4913      	ldr	r1, [pc, #76]	@ (8000a38 <HAL_UARTEx_RxEventCallback+0x100>)
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 80009ec:	f000 fc8e 	bl	800130c <oled_printl>
			sprintf(oled_buff, "exception 0x%X", (uint16_t) exception.exception_code);
 80009f0:	7abb      	ldrb	r3, [r7, #10]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4911      	ldr	r1, [pc, #68]	@ (8000a3c <HAL_UARTEx_RxEventCallback+0x104>)
 80009f6:	4812      	ldr	r0, [pc, #72]	@ (8000a40 <HAL_UARTEx_RxEventCallback+0x108>)
 80009f8:	f006 fb48 	bl	800708c <siprintf>
}
 80009fc:	e003      	b.n	8000a06 <HAL_UARTEx_RxEventCallback+0xce>
			oled_printl(&oled, "UNKNOWN RESPONSE!");
 80009fe:	4911      	ldr	r1, [pc, #68]	@ (8000a44 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000a02:	f000 fc83 	bl	800130c <oled_printl>
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08007a8c 	.word	0x08007a8c
 8000a14:	2000034c 	.word	0x2000034c
 8000a18:	2000020c 	.word	0x2000020c
 8000a1c:	08007a98 	.word	0x08007a98
 8000a20:	20000374 	.word	0x20000374
 8000a24:	08007aa8 	.word	0x08007aa8
 8000a28:	08007ab8 	.word	0x08007ab8
 8000a2c:	08007ac8 	.word	0x08007ac8
 8000a30:	200003c8 	.word	0x200003c8
 8000a34:	200003eb 	.word	0x200003eb
 8000a38:	08007ad0 	.word	0x08007ad0
 8000a3c:	08007ae8 	.word	0x08007ae8
 8000a40:	200003dc 	.word	0x200003dc
 8000a44:	08007af8 	.word	0x08007af8

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f001 fc45 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f879 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f7ff fe47 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5a:	f7ff fe27 	bl	80006ac <MX_DMA_Init>
  MX_I2C1_Init();
 8000a5e:	f7ff fea9 	bl	80007b4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000a62:	f000 fcbb 	bl	80013dc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000a66:	f001 fb01 	bl	800206c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a6a:	f001 fb29 	bl	80020c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  oled_init(&oled, &hi2c1);
 8000a6e:	4921      	ldr	r1, [pc, #132]	@ (8000af4 <main+0xac>)
 8000a70:	4821      	ldr	r0, [pc, #132]	@ (8000af8 <main+0xb0>)
 8000a72:	f000 fc8d 	bl	8001390 <oled_init>
  sim_init(&sim, PHUART_SIM, "mtnirancell", "", "");
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <main+0xb4>)
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <main+0xb8>)
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <main+0xb8>)
 8000a80:	4a20      	ldr	r2, [pc, #128]	@ (8000b04 <main+0xbc>)
 8000a82:	4821      	ldr	r0, [pc, #132]	@ (8000b08 <main+0xc0>)
 8000a84:	f000 fd88 	bl	8001598 <sim_init>
  mqtt_init(&mqtt_conn, &sim, "stm32", "185.165.30.166", "1883", "", "", MQTT_KEEPTIME);
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <main+0xc4>)
 8000a8a:	9303      	str	r3, [sp, #12]
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <main+0xb8>)
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <main+0xb8>)
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <main+0xc8>)
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <main+0xcc>)
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b18 <main+0xd0>)
 8000a9c:	491a      	ldr	r1, [pc, #104]	@ (8000b08 <main+0xc0>)
 8000a9e:	481f      	ldr	r0, [pc, #124]	@ (8000b1c <main+0xd4>)
 8000aa0:	f000 fadc 	bl	800105c <mqtt_init>
  MODBUS_MASTER_init(&master, PHUART_MODBUS, modbus_tx_buff, modbus_rx_buff);
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <main+0xd8>)
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <main+0xdc>)
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <main+0xe0>)
 8000aac:	481f      	ldr	r0, [pc, #124]	@ (8000b2c <main+0xe4>)
 8000aae:	f000 f9cd 	bl	8000e4c <MODBUS_MASTER_init>


setup:
  if(setup()){
 8000ab2:	f000 f8b1 	bl	8000c18 <setup>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00e      	beq.n	8000ada <main+0x92>
	  mqtt_publish_string(&mqtt_conn, "0", "0", "stm32", "connected");
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <main+0xe8>)
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <main+0xd0>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <main+0xec>)
 8000ac4:	491b      	ldr	r1, [pc, #108]	@ (8000b34 <main+0xec>)
 8000ac6:	4815      	ldr	r0, [pc, #84]	@ (8000b1c <main+0xd4>)
 8000ac8:	f000 fb76 	bl	80011b8 <mqtt_publish_string>
	  repeative_task();
 8000acc:	f000 f898 	bl	8000c00 <repeative_task>
	  rtc_set_alarm_seconds_it(&hrtc, REPEAT_DELAY);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <main+0xf0>)
 8000ad4:	f000 fd10 	bl	80014f8 <rtc_set_alarm_seconds_it>
 8000ad8:	e007      	b.n	8000aea <main+0xa2>
  }
  else{
	  oled_printl(&oled, "sim reboot");
 8000ada:	4918      	ldr	r1, [pc, #96]	@ (8000b3c <main+0xf4>)
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <main+0xb0>)
 8000ade:	f000 fc15 	bl	800130c <oled_printl>
	  sim_reboot(&sim);
 8000ae2:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <main+0xc0>)
 8000ae4:	f000 fdd8 	bl	8001698 <sim_reboot>
	  goto setup;
 8000ae8:	e7e3      	b.n	8000ab2 <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  publish("stm32/", mqtt_payload_buff);
 8000aea:	4915      	ldr	r1, [pc, #84]	@ (8000b40 <main+0xf8>)
 8000aec:	4815      	ldr	r0, [pc, #84]	@ (8000b44 <main+0xfc>)
 8000aee:	f000 f977 	bl	8000de0 <publish>
 8000af2:	e7fa      	b.n	8000aea <main+0xa2>
 8000af4:	200002e4 	.word	0x200002e4
 8000af8:	2000034c 	.word	0x2000034c
 8000afc:	20000208 	.word	0x20000208
 8000b00:	08007b0c 	.word	0x08007b0c
 8000b04:	08007b10 	.word	0x08007b10
 8000b08:	20000338 	.word	0x20000338
 8000b0c:	08007b34 	.word	0x08007b34
 8000b10:	08007b38 	.word	0x08007b38
 8000b14:	08007b1c 	.word	0x08007b1c
 8000b18:	08007b2c 	.word	0x08007b2c
 8000b1c:	20000354 	.word	0x20000354
 8000b20:	2000020c 	.word	0x2000020c
 8000b24:	20000388 	.word	0x20000388
 8000b28:	20000380 	.word	0x20000380
 8000b2c:	20000374 	.word	0x20000374
 8000b30:	08007b44 	.word	0x08007b44
 8000b34:	08007b40 	.word	0x08007b40
 8000b38:	20000450 	.word	0x20000450
 8000b3c:	08007a70 	.word	0x08007a70
 8000b40:	200003c8 	.word	0x200003c8
 8000b44:	08007b50 	.word	0x08007b50

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	@ 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b52:	2228      	movs	r2, #40	@ 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 fab8 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b94:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f8ca 	bl	8003d38 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000baa:	f000 f93f 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fc22 	bl	8004414 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd6:	f000 f929 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000bde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fe48 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bf2:	f000 f91b 	bl	8000e2c <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	@ 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <repeative_task>:

/* USER CODE BEGIN 4 */


void repeative_task(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	MODBUS_MASTER_read_coils(&master, MODBUS_SLAVE_ADDR, 0, 5);
 8000c04:	2305      	movs	r3, #5
 8000c06:	2200      	movs	r2, #0
 8000c08:	2139      	movs	r1, #57	@ 0x39
 8000c0a:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <repeative_task+0x14>)
 8000c0c:	f000 fa0b 	bl	8001026 <MODBUS_MASTER_read_coils>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000374 	.word	0x20000374

08000c18 <setup>:




bool setup(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	  oled_printl(&oled, "Please wait");
 8000c1e:	495f      	ldr	r1, [pc, #380]	@ (8000d9c <setup+0x184>)
 8000c20:	485f      	ldr	r0, [pc, #380]	@ (8000da0 <setup+0x188>)
 8000c22:	f000 fb73 	bl	800130c <oled_printl>
	  HAL_Delay(15000);
 8000c26:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000c2a:	f001 fbb9 	bl	80023a0 <HAL_Delay>
	  oled_printl(&oled, "sending AT..");
 8000c2e:	495d      	ldr	r1, [pc, #372]	@ (8000da4 <setup+0x18c>)
 8000c30:	485b      	ldr	r0, [pc, #364]	@ (8000da0 <setup+0x188>)
 8000c32:	f000 fb6b 	bl	800130c <oled_printl>
	  if(sim_test_at(&sim)){
 8000c36:	485c      	ldr	r0, [pc, #368]	@ (8000da8 <setup+0x190>)
 8000c38:	f000 fd0c 	bl	8001654 <sim_test_at>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <setup+0x3a>
		  oled_printl(&oled, "AT OK!");
 8000c42:	495a      	ldr	r1, [pc, #360]	@ (8000dac <setup+0x194>)
 8000c44:	4856      	ldr	r0, [pc, #344]	@ (8000da0 <setup+0x188>)
 8000c46:	f000 fb61 	bl	800130c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_AT_OK){
 8000c4a:	e002      	b.n	8000c52 <setup+0x3a>
		  sim_test_at(&sim);
 8000c4c:	4856      	ldr	r0, [pc, #344]	@ (8000da8 <setup+0x190>)
 8000c4e:	f000 fd01 	bl	8001654 <sim_test_at>
	  while(sim.state < SIM_STATE_AT_OK){
 8000c52:	4b55      	ldr	r3, [pc, #340]	@ (8000da8 <setup+0x190>)
 8000c54:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dbf7      	blt.n	8000c4c <setup+0x34>
	  }
	  if(sim_report_error_enable(&sim)){
 8000c5c:	4852      	ldr	r0, [pc, #328]	@ (8000da8 <setup+0x190>)
 8000c5e:	f000 fd4d 	bl	80016fc <sim_report_error_enable>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <setup+0x58>
		  oled_printl(&oled, "+CMEE=2");
 8000c68:	4951      	ldr	r1, [pc, #324]	@ (8000db0 <setup+0x198>)
 8000c6a:	484d      	ldr	r0, [pc, #308]	@ (8000da0 <setup+0x188>)
 8000c6c:	f000 fb4e 	bl	800130c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_REPORT_ERROR_ENABLED){}
 8000c70:	bf00      	nop
 8000c72:	4b4d      	ldr	r3, [pc, #308]	@ (8000da8 <setup+0x190>)
 8000c74:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	ddfa      	ble.n	8000c72 <setup+0x5a>
	  if(sim_is_ready(&sim)){
 8000c7c:	484a      	ldr	r0, [pc, #296]	@ (8000da8 <setup+0x190>)
 8000c7e:	f000 fd63 	bl	8001748 <sim_is_ready>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <setup+0x78>
		  oled_printl(&oled, "ready");
 8000c88:	494a      	ldr	r1, [pc, #296]	@ (8000db4 <setup+0x19c>)
 8000c8a:	4845      	ldr	r0, [pc, #276]	@ (8000da0 <setup+0x188>)
 8000c8c:	f000 fb3e 	bl	800130c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_PIN_READY){}
 8000c90:	bf00      	nop
 8000c92:	4b45      	ldr	r3, [pc, #276]	@ (8000da8 <setup+0x190>)
 8000c94:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	ddfa      	ble.n	8000c92 <setup+0x7a>
	  if(sim_registered(&sim)){
 8000c9c:	4842      	ldr	r0, [pc, #264]	@ (8000da8 <setup+0x190>)
 8000c9e:	f000 fda3 	bl	80017e8 <sim_registered>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <setup+0x98>
		  oled_printl(&oled, "registered");
 8000ca8:	4943      	ldr	r1, [pc, #268]	@ (8000db8 <setup+0x1a0>)
 8000caa:	483d      	ldr	r0, [pc, #244]	@ (8000da0 <setup+0x188>)
 8000cac:	f000 fb2e 	bl	800130c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CREG_OK){}
 8000cb0:	bf00      	nop
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <setup+0x190>)
 8000cb4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	ddfa      	ble.n	8000cb2 <setup+0x9a>
	  if(sim_gprs_registered(&sim)){
 8000cbc:	483a      	ldr	r0, [pc, #232]	@ (8000da8 <setup+0x190>)
 8000cbe:	f000 fdc1 	bl	8001844 <sim_gprs_registered>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <setup+0xb8>
		  oled_printl(&oled, "gprs registered");
 8000cc8:	493c      	ldr	r1, [pc, #240]	@ (8000dbc <setup+0x1a4>)
 8000cca:	4835      	ldr	r0, [pc, #212]	@ (8000da0 <setup+0x188>)
 8000ccc:	f000 fb1e 	bl	800130c <oled_printl>
	  }
	  while(sim.state < SIM_STATE_CGREG_OK){}
 8000cd0:	bf00      	nop
 8000cd2:	4b35      	ldr	r3, [pc, #212]	@ (8000da8 <setup+0x190>)
 8000cd4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	ddfa      	ble.n	8000cd2 <setup+0xba>

	  //mqtt disconnect
	  if(!mqtt_disconnect(&mqtt_conn)){
 8000cdc:	4838      	ldr	r0, [pc, #224]	@ (8000dc0 <setup+0x1a8>)
 8000cde:	f000 fa4b 	bl	8001178 <mqtt_disconnect>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <setup+0xde>
	  	  oled_printl(&oled, "broker disconnect error!");
 8000cee:	4935      	ldr	r1, [pc, #212]	@ (8000dc4 <setup+0x1ac>)
 8000cf0:	482b      	ldr	r0, [pc, #172]	@ (8000da0 <setup+0x188>)
 8000cf2:	f000 fb0b 	bl	800130c <oled_printl>
	   }


	  // gprs disconnect
	  if(!sim_gprs_disconnect(&sim)){
 8000cf6:	482c      	ldr	r0, [pc, #176]	@ (8000da8 <setup+0x190>)
 8000cf8:	f000 fe0c 	bl	8001914 <sim_gprs_disconnect>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <setup+0xf8>
		  oled_printl(&oled, "gprs disconnected already!");
 8000d08:	492f      	ldr	r1, [pc, #188]	@ (8000dc8 <setup+0x1b0>)
 8000d0a:	4825      	ldr	r0, [pc, #148]	@ (8000da0 <setup+0x188>)
 8000d0c:	f000 fafe 	bl	800130c <oled_printl>
	  }

	  HAL_Delay(5000);
 8000d10:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d14:	f001 fb44 	bl	80023a0 <HAL_Delay>
	  if(sim_gprs_connect(&sim)){
 8000d18:	4823      	ldr	r0, [pc, #140]	@ (8000da8 <setup+0x190>)
 8000d1a:	f000 fdc1 	bl	80018a0 <sim_gprs_connect>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d030      	beq.n	8000d86 <setup+0x16e>
	//	  sim_event_listen_once(&sim);
		  uint8_t i = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	71fb      	strb	r3, [r7, #7]
		  oled_printl(&oled, "activatin app network");
 8000d28:	4928      	ldr	r1, [pc, #160]	@ (8000dcc <setup+0x1b4>)
 8000d2a:	481d      	ldr	r0, [pc, #116]	@ (8000da0 <setup+0x188>)
 8000d2c:	f000 faee 	bl	800130c <oled_printl>
		  while(!(sim.app_network)){
 8000d30:	e012      	b.n	8000d58 <setup+0x140>
			  i++;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	3301      	adds	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
			  HAL_Delay(5000);
 8000d38:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d3c:	f001 fb30 	bl	80023a0 <HAL_Delay>
			  oled_printl(&oled, "retrying app net");
 8000d40:	4923      	ldr	r1, [pc, #140]	@ (8000dd0 <setup+0x1b8>)
 8000d42:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <setup+0x188>)
 8000d44:	f000 fae2 	bl	800130c <oled_printl>
			  sim_gprs_connect(&sim);
 8000d48:	4817      	ldr	r0, [pc, #92]	@ (8000da8 <setup+0x190>)
 8000d4a:	f000 fda9 	bl	80018a0 <sim_gprs_connect>

			  if(i>3){
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d901      	bls.n	8000d58 <setup+0x140>
				  return false;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e01d      	b.n	8000d94 <setup+0x17c>
		  while(!(sim.app_network)){
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <setup+0x190>)
 8000d5a:	7c5b      	ldrb	r3, [r3, #17]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1e5      	bne.n	8000d32 <setup+0x11a>
			  }
		  }
	//	  HAL_UART_AbortReceive_IT(sim.huart);

		  oled_printl(&oled, "Connecting to broker");
 8000d66:	491b      	ldr	r1, [pc, #108]	@ (8000dd4 <setup+0x1bc>)
 8000d68:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <setup+0x188>)
 8000d6a:	f000 facf 	bl	800130c <oled_printl>
		  if(mqtt_connect(&mqtt_conn)){
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <setup+0x1a8>)
 8000d70:	f000 f99c 	bl	80010ac <mqtt_connect>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <setup+0x17a>
			  oled_printl(&oled, "Connected to broker");
 8000d7a:	4917      	ldr	r1, [pc, #92]	@ (8000dd8 <setup+0x1c0>)
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <setup+0x188>)
 8000d7e:	f000 fac5 	bl	800130c <oled_printl>
			  return true;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e006      	b.n	8000d94 <setup+0x17c>
		  }
	  }
	  else{
	  	  oled_printl(&oled, "app network FAILED");
 8000d86:	4915      	ldr	r1, [pc, #84]	@ (8000ddc <setup+0x1c4>)
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <setup+0x188>)
 8000d8a:	f000 fabf 	bl	800130c <oled_printl>
	  	  return false;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <setup+0x17c>
	  }
	  return false;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	08007b58 	.word	0x08007b58
 8000da0:	2000034c 	.word	0x2000034c
 8000da4:	08007b64 	.word	0x08007b64
 8000da8:	20000338 	.word	0x20000338
 8000dac:	08007b74 	.word	0x08007b74
 8000db0:	08007b7c 	.word	0x08007b7c
 8000db4:	08007b84 	.word	0x08007b84
 8000db8:	08007b8c 	.word	0x08007b8c
 8000dbc:	08007b98 	.word	0x08007b98
 8000dc0:	20000354 	.word	0x20000354
 8000dc4:	08007ba8 	.word	0x08007ba8
 8000dc8:	08007bc4 	.word	0x08007bc4
 8000dcc:	08007be0 	.word	0x08007be0
 8000dd0:	08007bf8 	.word	0x08007bf8
 8000dd4:	08007c0c 	.word	0x08007c0c
 8000dd8:	08007c24 	.word	0x08007c24
 8000ddc:	08007c38 	.word	0x08007c38

08000de0 <publish>:



void publish(char* topic, char* payload){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	if(ready_to_send){
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <publish+0x38>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00e      	beq.n	8000e10 <publish+0x30>
		mqtt_publish_string(&mqtt_conn, "0", "0", topic, payload);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <publish+0x3c>)
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <publish+0x3c>)
 8000dfc:	4808      	ldr	r0, [pc, #32]	@ (8000e20 <publish+0x40>)
 8000dfe:	f000 f9db 	bl	80011b8 <mqtt_publish_string>
		oled_printl(&oled, "published");
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <publish+0x44>)
 8000e04:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <publish+0x48>)
 8000e06:	f000 fa81 	bl	800130c <oled_printl>
		ready_to_send = false;
 8000e0a:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <publish+0x38>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	}

}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200003eb 	.word	0x200003eb
 8000e1c:	08007b40 	.word	0x08007b40
 8000e20:	20000354 	.word	0x20000354
 8000e24:	08007c4c 	.word	0x08007c4c
 8000e28:	2000034c 	.word	0x2000034c

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <MODBUS_MASTER_init>:
void MODBUS_MASTER_init(
		MODBUS_MASTER_InitTypeDef *master,
		UART_HandleTypeDef *huart,
		uint8_t *pchTxBuffer,
		uint8_t *pchRxBuffer)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
	master->huart = huart;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]
	master->pchRxBuffer = pchRxBuffer;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	609a      	str	r2, [r3, #8]
	master->pchTxBuffer = pchTxBuffer;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <MODBUS_MASTER_request>:


void MODBUS_MASTER_request(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint8_t function_code, uint16_t register_addr, uint16_t number_of_points){
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4611      	mov	r1, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	4603      	mov	r3, r0
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70bb      	strb	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	803b      	strh	r3, [r7, #0]
	uint16_t rx_size = number_of_points * 2 + 5;
 8000e90:	8b3b      	ldrh	r3, [r7, #24]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3305      	adds	r3, #5
 8000e98:	81fb      	strh	r3, [r7, #14]


	pMaster->pchTxBuffer[0] = slave_addr;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	78fa      	ldrb	r2, [r7, #3]
 8000ea0:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[1] = function_code;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	78ba      	ldrb	r2, [r7, #2]
 8000eaa:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[2] = register_addr>>8;
 8000eac:	883b      	ldrh	r3, [r7, #0]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[3] = register_addr;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	3303      	adds	r3, #3
 8000ec2:	883a      	ldrh	r2, [r7, #0]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[4] = number_of_points>>8;
 8000ec8:	8b3b      	ldrh	r3, [r7, #24]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[5] = number_of_points;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	3305      	adds	r3, #5
 8000ede:	8b3a      	ldrh	r2, [r7, #24]
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
	uint16_t crc = CRC16(pMaster->pchTxBuffer, 6);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2106      	movs	r1, #6
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fba8 	bl	8000640 <CRC16>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	81bb      	strh	r3, [r7, #12]
	pMaster->pchTxBuffer[6] = crc&0xff;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	3306      	adds	r3, #6
 8000efa:	89ba      	ldrh	r2, [r7, #12]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
	pMaster->pchTxBuffer[7] = (crc>>8)&0xff;
 8000f00:	89bb      	ldrh	r3, [r7, #12]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	3307      	adds	r3, #7
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]


	HAL_UART_Transmit_IT(pMaster->huart, pMaster->pchTxBuffer, TX_SIZE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f005 f815 	bl	8005f4a <HAL_UART_Transmit_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(pMaster->huart, pMaster->pchRxBuffer, rx_size);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	89fa      	ldrh	r2, [r7, #14]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f005 f916 	bl	800615c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <MODBUS_MASTER_response_handler>:
		MODBUS_MASTER_InitTypeDef *pMaster,
		uint8_t slave_addr,
		MODBUS_MASTER_res *pNormalRes,
		MODBUS_MASTER_exception *pException
		)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	460b      	mov	r3, r1
 8000f46:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_size = strlen(pMaster->pchRxBuffer);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f8fd 	bl	800014c <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]
	if(pMaster->pchRxBuffer[0] == slave_addr){
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	7afa      	ldrb	r2, [r7, #11]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d15c      	bne.n	800101c <MODBUS_MASTER_response_handler+0xe4>

		if(pMaster->pchRxBuffer[1] >= 0x80){
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da22      	bge.n	8000fb6 <MODBUS_MASTER_response_handler+0x7e>
			// Exception
			pNormalRes = NULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
			pException->slave_addr = pMaster->pchRxBuffer[0];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	701a      	strb	r2, [r3, #0]
			pException->function_code = pMaster->pchRxBuffer[1];
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	785a      	ldrb	r2, [r3, #1]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	705a      	strb	r2, [r3, #1]
			pException->exception_code = pMaster->pchRxBuffer[2];
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	789a      	ldrb	r2, [r3, #2]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	709a      	strb	r2, [r3, #2]
			pException->crc = (pMaster->pchRxBuffer[3] >> 8) | (pMaster->pchRxBuffer[4]);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	3303      	adds	r3, #3
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	121b      	asrs	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	809a      	strh	r2, [r3, #4]

			return MODBUS_RES_EXCEPTION;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e033      	b.n	800101e <MODBUS_MASTER_response_handler+0xe6>
		}

		else{
			pException = NULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
			pNormalRes->slave_addr = pMaster->pchRxBuffer[0];
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	701a      	strb	r2, [r3, #0]
			pNormalRes->function_code = pMaster->pchRxBuffer[1];
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	785a      	ldrb	r2, [r3, #1]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	705a      	strb	r2, [r3, #1]
			pNormalRes->byte_count = pMaster->pchRxBuffer[2];
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	789a      	ldrb	r2, [r3, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	709a      	strb	r2, [r3, #2]

			uint8_t byte_cnt = pNormalRes->byte_count;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	75bb      	strb	r3, [r7, #22]
			pNormalRes->crc = pMaster->pchRxBuffer + 3 + byte_cnt;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	811a      	strh	r2, [r3, #8]
			memset(pMaster->pchRxBuffer+3+byte_cnt, 0, strlen(pNormalRes->crc));	// remove crc from rxBuff
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	18d4      	adds	r4, r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	891b      	ldrh	r3, [r3, #8]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8a5 	bl	800014c <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	4620      	mov	r0, r4
 800100a:	f006 f85f 	bl	80070cc <memset>

			pNormalRes->register_data = pMaster->pchRxBuffer+3;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	1cda      	adds	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]


			//clear crc from response


			return MODBUS_RES_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	e000      	b.n	800101e <MODBUS_MASTER_response_handler+0xe6>
		}
	}
	else{
		return MODBUS_RES_UNKNOWN;
 800101c:	2302      	movs	r3, #2
	}
}
 800101e:	4618      	mov	r0, r3
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <MODBUS_MASTER_read_coils>:



void MODBUS_MASTER_read_coils(MODBUS_MASTER_InitTypeDef *pMaster, uint8_t slave_addr, uint16_t register_addr, uint16_t number_of_points){
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af02      	add	r7, sp, #8
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4603      	mov	r3, r0
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	460b      	mov	r3, r1
 800103a:	813b      	strh	r3, [r7, #8]
 800103c:	4613      	mov	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
	MODBUS_MASTER_request(pMaster, slave_addr, 1, register_addr, number_of_points);
 8001040:	893a      	ldrh	r2, [r7, #8]
 8001042:	7af9      	ldrb	r1, [r7, #11]
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	2201      	movs	r2, #1
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ff12 	bl	8000e76 <MODBUS_MASTER_request>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <mqtt_init>:
	char* url,
	char* port,
	char* username,
	char* password,
	char* keep_time)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
	pMqttConn->sim = pSim;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	601a      	str	r2, [r3, #0]
	pMqttConn->client_id = client_id;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	605a      	str	r2, [r3, #4]
	pMqttConn->url = url;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	609a      	str	r2, [r3, #8]
	pMqttConn->port = port;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	60da      	str	r2, [r3, #12]
	pMqttConn->username = username;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	611a      	str	r2, [r3, #16]
	pMqttConn->password = password;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a3a      	ldr	r2, [r7, #32]
 800108c:	615a      	str	r2, [r3, #20]
	pMqttConn->keep_time = keep_time;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001092:	619a      	str	r2, [r3, #24]
	pMqttConn->connected = false;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
	flush_buff(mqtt_rx_buff);
 800109a:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <mqtt_init+0x4c>)
 800109c:	f7ff f886 	bl	80001ac <flush_buff>


}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003ec 	.word	0x200003ec

080010ac <mqtt_connect>:



bool mqtt_connect(mqtt_conn_t* pMqttConn){
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af06      	add	r7, sp, #24
 80010b2:	6078      	str	r0, [r7, #4]
	if(pMqttConn->sim->app_network){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	7c5b      	ldrb	r3, [r3, #17]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d045      	beq.n	800114a <mqtt_connect+0x9e>
		if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 5, "\"URL\",\"", pMqttConn->url, "\",\"", pMqttConn->port, "\"")){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <mqtt_connect+0xb0>)
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68d2      	ldr	r2, [r2, #12]
 80010d0:	4c23      	ldr	r4, [pc, #140]	@ (8001160 <mqtt_connect+0xb4>)
 80010d2:	9405      	str	r4, [sp, #20]
 80010d4:	9204      	str	r2, [sp, #16]
 80010d6:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <mqtt_connect+0xb8>)
 80010d8:	9203      	str	r2, [sp, #12]
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <mqtt_connect+0xbc>)
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	2305      	movs	r3, #5
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010e8:	460a      	mov	r2, r1
 80010ea:	4920      	ldr	r1, [pc, #128]	@ (800116c <mqtt_connect+0xc0>)
 80010ec:	f7ff f8b8 	bl	8000260 <at_write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d02c      	beq.n	8001150 <mqtt_connect+0xa4>
			if(at_write(pMqttConn->sim->huart, mqtt_rx_buff, smconf, MQTT_AT_MIN_TIMEOUT, 2, "\"KEEPTIME\",", pMqttConn->keep_time)){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <mqtt_connect+0xb0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <mqtt_connect+0xc4>)
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2302      	movs	r3, #2
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001112:	4916      	ldr	r1, [pc, #88]	@ (800116c <mqtt_connect+0xc0>)
 8001114:	f7ff f8a4 	bl	8000260 <at_write>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <mqtt_connect+0xa4>

				HAL_Delay(2000);
 800111e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001122:	f001 f93d 	bl	80023a0 <HAL_Delay>
				if(at_execute_blocking(pMqttConn->sim->huart, mqtt_rx_buff, smconn, 20000)>0){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <mqtt_connect+0xc8>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001134:	490d      	ldr	r1, [pc, #52]	@ (800116c <mqtt_connect+0xc0>)
 8001136:	f7ff fa27 	bl	8000588 <at_execute_blocking>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <mqtt_connect+0xa4>
					pMqttConn->connected = true;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	771a      	strb	r2, [r3, #28]
					return true;
 8001146:	2301      	movs	r3, #1
 8001148:	e003      	b.n	8001152 <mqtt_connect+0xa6>
				}
			}
		}
	}
	else{
		pMqttConn->connected = false;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	771a      	strb	r2, [r3, #28]
	}
	return false;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000210 	.word	0x20000210
 8001160:	08007c80 	.word	0x08007c80
 8001164:	08007c84 	.word	0x08007c84
 8001168:	08007c88 	.word	0x08007c88
 800116c:	200003ec 	.word	0x200003ec
 8001170:	08007c90 	.word	0x08007c90
 8001174:	20000214 	.word	0x20000214

08001178 <mqtt_disconnect>:




bool mqtt_disconnect(mqtt_conn_t* pMqttConn){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(at_execute(pMqttConn->sim->huart, mqtt_rx_buff, smdisc, 5000)){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <mqtt_disconnect+0x38>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800118e:	4909      	ldr	r1, [pc, #36]	@ (80011b4 <mqtt_disconnect+0x3c>)
 8001190:	f7ff f8dc 	bl	800034c <at_execute>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <mqtt_disconnect+0x2c>
		pMqttConn->connected = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
		return true;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <mqtt_disconnect+0x2e>
	}
	return false;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000021c 	.word	0x2000021c
 80011b4:	200003ec 	.word	0x200003ec

080011b8 <mqtt_publish_string>:





bool mqtt_publish_string(mqtt_conn_t* pMqttConn, char* qos, char* retain, char* topic, char* payload){
 80011b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011bc:	b095      	sub	sp, #84	@ 0x54
 80011be:	af0a      	add	r7, sp, #40	@ 0x28
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
	if(pMqttConn->connected){
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	7f1b      	ldrb	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8084 	beq.w	80012da <mqtt_publish_string+0x122>
		uint8_t content_length = strlen(payload);
 80011d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80011d4:	f7fe ffba 	bl	800014c <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		char content_len[5];
		sprintf(content_len, "%d", content_length);
 80011de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4940      	ldr	r1, [pc, #256]	@ (80012e8 <mqtt_publish_string+0x130>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 ff4f 	bl	800708c <siprintf>
		if(pMqttConn->connected){
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	7f1b      	ldrb	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d071      	beq.n	80012da <mqtt_publish_string+0x122>
			if(at_write_blocking(
					pMqttConn->sim->huart,
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
			if(at_write_blocking(
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <mqtt_publish_string+0x134>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	9308      	str	r3, [sp, #32]
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <mqtt_publish_string+0x138>)
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	9306      	str	r3, [sp, #24]
 800120c:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <mqtt_publish_string+0x13c>)
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	9304      	str	r3, [sp, #16]
 8001216:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <mqtt_publish_string+0x140>)
 8001218:	9303      	str	r3, [sp, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <mqtt_publish_string+0x144>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2308      	movs	r3, #8
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800122a:	4935      	ldr	r1, [pc, #212]	@ (8001300 <mqtt_publish_string+0x148>)
 800122c:	f7ff f930 	bl	8000490 <at_write_blocking>
 8001230:	4603      	mov	r3, r0
 8001232:	2b02      	cmp	r3, #2
 8001234:	d151      	bne.n	80012da <mqtt_publish_string+0x122>
					content_len,
					"\",",
					qos,
					",",
					retain) == AT_STATE_ENTER_INPUT)
			{
 8001236:	466b      	mov	r3, sp
 8001238:	461e      	mov	r6, r3
				char msg[content_length+5];
 800123a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800123e:	1d59      	adds	r1, r3, #5
 8001240:	1e4b      	subs	r3, r1, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	460a      	mov	r2, r1
 8001246:	2300      	movs	r3, #0
 8001248:	4690      	mov	r8, r2
 800124a:	4699      	mov	r9, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800125c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001260:	460a      	mov	r2, r1
 8001262:	2300      	movs	r3, #0
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	00eb      	lsls	r3, r5, #3
 8001272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001276:	00e2      	lsls	r2, r4, #3
 8001278:	460b      	mov	r3, r1
 800127a:	3307      	adds	r3, #7
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	ebad 0d03 	sub.w	sp, sp, r3
 8001284:	ab0a      	add	r3, sp, #40	@ 0x28
 8001286:	3300      	adds	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
//				sprintf(msg, "%s\x1A\r\n", payload);
				sprintf(msg, "%s", payload);
 800128a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800128c:	491d      	ldr	r1, [pc, #116]	@ (8001304 <mqtt_publish_string+0x14c>)
 800128e:	69f8      	ldr	r0, [r7, #28]
 8001290:	f005 fefc 	bl	800708c <siprintf>
				HAL_UART_Transmit(pMqttConn->sim->huart, msg , strlen(msg), MQTT_AT_MIN_TIMEOUT);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681c      	ldr	r4, [r3, #0]
 800129a:	69f8      	ldr	r0, [r7, #28]
 800129c:	f7fe ff56 	bl	800014c <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012a8:	69f9      	ldr	r1, [r7, #28]
 80012aa:	4620      	mov	r0, r4
 80012ac:	f004 fd38 	bl	8005d20 <HAL_UART_Transmit>
				sprintf(msg, "%c", (char) 26);
 80012b0:	221a      	movs	r2, #26
 80012b2:	4915      	ldr	r1, [pc, #84]	@ (8001308 <mqtt_publish_string+0x150>)
 80012b4:	69f8      	ldr	r0, [r7, #28]
 80012b6:	f005 fee9 	bl	800708c <siprintf>
				HAL_UART_Transmit_IT(pMqttConn->sim->huart, msg , strlen(msg));
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	69f8      	ldr	r0, [r7, #28]
 80012c2:	f7fe ff43 	bl	800014c <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	69f9      	ldr	r1, [r7, #28]
 80012ce:	4620      	mov	r0, r4
 80012d0:	f004 fe3b 	bl	8005f4a <HAL_UART_Transmit_IT>
				return true;
 80012d4:	2301      	movs	r3, #1
 80012d6:	46b5      	mov	sp, r6
 80012d8:	e000      	b.n	80012dc <mqtt_publish_string+0x124>
			}
		}
	}
	return false;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	372c      	adds	r7, #44	@ 0x2c
 80012e0:	46bd      	mov	sp, r7
 80012e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012e6:	bf00      	nop
 80012e8:	08007c9c 	.word	0x08007c9c
 80012ec:	20000218 	.word	0x20000218
 80012f0:	08007ca0 	.word	0x08007ca0
 80012f4:	08007ca4 	.word	0x08007ca4
 80012f8:	08007c84 	.word	0x08007c84
 80012fc:	08007c80 	.word	0x08007c80
 8001300:	200003ec 	.word	0x200003ec
 8001304:	08007ca8 	.word	0x08007ca8
 8001308:	08007cac 	.word	0x08007cac

0800130c <oled_printl>:
	ssd1306_UpdateScreen(pOled->pHi2c);
}



void oled_printl(oled_t *pOled, const char* str){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	if(pOled->current_line < 6){
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d81d      	bhi.n	800135a <oled_printl+0x4e>
		uint8_t y = pOled->current_line * 10;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	791b      	ldrb	r3, [r3, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(0, y);
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4619      	mov	r1, r3
 8001330:	2000      	movs	r0, #0
 8001332:	f000 fdaf 	bl	8001e94 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8001336:	4a15      	ldr	r2, [pc, #84]	@ (800138c <oled_printl+0x80>)
 8001338:	2301      	movs	r3, #1
 800133a:	ca06      	ldmia	r2, {r1, r2}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f000 fd83 	bl	8001e48 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc6c 	bl	8001c24 <ssd1306_UpdateScreen>
		pOled->current_line++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	711a      	strb	r2, [r3, #4]
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString(str, Font_7x10, White);
		ssd1306_UpdateScreen(pOled->pHi2c);
		pOled->current_line = 1;
	}
}
 8001358:	e014      	b.n	8001384 <oled_printl+0x78>
		ssd1306_Fill(Black);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fc40 	bl	8001be0 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	2000      	movs	r0, #0
 8001364:	f000 fd96 	bl	8001e94 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8001368:	4a08      	ldr	r2, [pc, #32]	@ (800138c <oled_printl+0x80>)
 800136a:	2301      	movs	r3, #1
 800136c:	ca06      	ldmia	r2, {r1, r2}
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f000 fd6a 	bl	8001e48 <ssd1306_WriteString>
		ssd1306_UpdateScreen(pOled->pHi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc53 	bl	8001c24 <ssd1306_UpdateScreen>
		pOled->current_line = 1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	711a      	strb	r2, [r3, #4]
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000200 	.word	0x20000200

08001390 <oled_init>:


void oled_init(oled_t *pOled, I2C_HandleTypeDef *pHi2c){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	 ssd1306_Init(pHi2c);
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f000 fb00 	bl	80019a0 <ssd1306_Init>
	 ssd1306_Fill(Black);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 fc1d 	bl	8001be0 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 fd73 	bl	8001e94 <ssd1306_SetCursor>
	 ssd1306_WriteString("Loading...", Font_7x10, White);
 80013ae:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <oled_init+0x44>)
 80013b0:	2301      	movs	r3, #1
 80013b2:	ca06      	ldmia	r2, {r1, r2}
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <oled_init+0x48>)
 80013b6:	f000 fd47 	bl	8001e48 <ssd1306_WriteString>
	 ssd1306_UpdateScreen(pOled->pHi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fc30 	bl	8001c24 <ssd1306_UpdateScreen>
	 pOled->pHi2c = pHi2c;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000200 	.word	0x20000200
 80013d8:	08007ccc 	.word	0x08007ccc

080013dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2100      	movs	r1, #0
 80013e8:	460a      	mov	r2, r1
 80013ea:	801a      	strh	r2, [r3, #0]
 80013ec:	460a      	mov	r2, r1
 80013ee:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013fc:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <MX_RTC_Init+0xac>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	@ (800148c <MX_RTC_Init+0xb0>)
 8001400:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_RTC_Init+0xac>)
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_RTC_Init+0xac>)
 800140c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001410:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001412:	481d      	ldr	r0, [pc, #116]	@ (8001488 <MX_RTC_Init+0xac>)
 8001414:	f003 fc08 	bl	8004c28 <HAL_RTC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800141e:	f7ff fd05 	bl	8000e2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001422:	2300      	movs	r3, #0
 8001424:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001426:	2300      	movs	r3, #0
 8001428:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <MX_RTC_Init+0xac>)
 8001438:	f003 fcb6 	bl	8004da8 <HAL_RTC_SetTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001442:	f7ff fcf3 	bl	8000e2c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001446:	2301      	movs	r3, #1
 8001448:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800144a:	2301      	movs	r3, #1
 800144c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800144e:	2301      	movs	r3, #1
 8001450:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001452:	2300      	movs	r3, #0
 8001454:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2201      	movs	r2, #1
 800145c:	4619      	mov	r1, r3
 800145e:	480a      	ldr	r0, [pc, #40]	@ (8001488 <MX_RTC_Init+0xac>)
 8001460:	f003 fe6e 	bl	8005140 <HAL_RTC_SetDate>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800146a:	f7ff fcdf 	bl	8000e2c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800146e:	2300      	movs	r3, #0
 8001470:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001472:	2300      	movs	r3, #0
 8001474:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001476:	2300      	movs	r3, #0
 8001478:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
//  }
//  /* USER CODE BEGIN RTC_Init 2 */
//
//  /* USER CODE END RTC_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000450 	.word	0x20000450
 800148c:	40002800 	.word	0x40002800

08001490 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <HAL_RTC_MspInit+0x5c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d120      	bne.n	80014e4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80014a2:	f002 fc3d 	bl	8003d20 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_RTC_MspInit+0x60>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_RTC_MspInit+0x60>)
 80014ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_RTC_MspInit+0x60>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_RTC_MspInit+0x64>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2003      	movs	r0, #3
 80014ca:	f001 f879 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f001 f8a2 	bl	8002618 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2029      	movs	r0, #41	@ 0x29
 80014da:	f001 f871 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014de:	2029      	movs	r0, #41	@ 0x29
 80014e0:	f001 f89a 	bl	8002618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40002800 	.word	0x40002800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	4242043c 	.word	0x4242043c

080014f8 <rtc_set_alarm_seconds_it>:

#include "rtc_delay.h"



void rtc_set_alarm_seconds_it(RTC_HandleTypeDef* hrtc, uint16_t seconds){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
	RTC_AlarmTypeDef sAlarm;

	    // Get the current time
	    RTC_TimeTypeDef sTime;
	    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f003 fd31 	bl	8004f74 <HAL_RTC_GetTime>

	    // Calculate alarm time (current time + period)
	    sAlarm.AlarmTime.Seconds = sTime.Seconds + seconds;
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	74bb      	strb	r3, [r7, #18]
	    sAlarm.AlarmTime.Minutes = sTime.Minutes;
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	747b      	strb	r3, [r7, #17]
	    sAlarm.AlarmTime.Hours = sTime.Hours;
 8001522:	7b3b      	ldrb	r3, [r7, #12]
 8001524:	743b      	strb	r3, [r7, #16]

	    // Normalize alarm time
	    if (sAlarm.AlarmTime.Seconds >= 60) {
 8001526:	7cbb      	ldrb	r3, [r7, #18]
 8001528:	2b3b      	cmp	r3, #59	@ 0x3b
 800152a:	d907      	bls.n	800153c <rtc_set_alarm_seconds_it+0x44>
	        sAlarm.AlarmTime.Seconds -= 60;
 800152c:	7cbb      	ldrb	r3, [r7, #18]
 800152e:	3b3c      	subs	r3, #60	@ 0x3c
 8001530:	b2db      	uxtb	r3, r3
 8001532:	74bb      	strb	r3, [r7, #18]
	        sAlarm.AlarmTime.Minutes++;
 8001534:	7c7b      	ldrb	r3, [r7, #17]
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	747b      	strb	r3, [r7, #17]
	    }
	    if (sAlarm.AlarmTime.Minutes >= 60) {
 800153c:	7c7b      	ldrb	r3, [r7, #17]
 800153e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001540:	d907      	bls.n	8001552 <rtc_set_alarm_seconds_it+0x5a>
	        sAlarm.AlarmTime.Minutes -= 60;
 8001542:	7c7b      	ldrb	r3, [r7, #17]
 8001544:	3b3c      	subs	r3, #60	@ 0x3c
 8001546:	b2db      	uxtb	r3, r3
 8001548:	747b      	strb	r3, [r7, #17]
	        sAlarm.AlarmTime.Hours++;
 800154a:	7c3b      	ldrb	r3, [r7, #16]
 800154c:	3301      	adds	r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	743b      	strb	r3, [r7, #16]
	    }
	    if (sAlarm.AlarmTime.Hours >= 24) {
 8001552:	7c3b      	ldrb	r3, [r7, #16]
 8001554:	2b17      	cmp	r3, #23
 8001556:	d903      	bls.n	8001560 <rtc_set_alarm_seconds_it+0x68>
	        sAlarm.AlarmTime.Hours -= 24;
 8001558:	7c3b      	ldrb	r3, [r7, #16]
 800155a:	3b18      	subs	r3, #24
 800155c:	b2db      	uxtb	r3, r3
 800155e:	743b      	strb	r3, [r7, #16]
	    }

	    sAlarm.Alarm = RTC_ALARM_A;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

	    if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f003 ff05 	bl	800537c <HAL_RTC_SetAlarm_IT>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <rtc_set_alarm_seconds_it+0x84>
	        Error_Handler();
 8001578:	f7ff fc58 	bl	8000e2c <Error_Handler>
	    }

}
 800157c:	bf00      	nop
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_sim_finish_operation>:
char sim_event_buff[SIM_EVENT_BUFF_SIZE];
uint16_t sim_event_rx_len;



bool _sim_finish_operation(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	flush_buff(sim_rx_buff);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <_sim_finish_operation+0x10>)
 800158a:	f7fe fe0f 	bl	80001ac <flush_buff>
	return true;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000464 	.word	0x20000464

08001598 <sim_init>:


void sim_init(sim_t* psim, UART_HandleTypeDef* huart, char* apn, char* username, char* password){
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
	psim->huart = huart;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	601a      	str	r2, [r3, #0]
	psim->apn = apn;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	605a      	str	r2, [r3, #4]
	psim->username = username;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	609a      	str	r2, [r3, #8]
	psim->password = password;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	60da      	str	r2, [r3, #12]
	psim->app_network = false;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	745a      	strb	r2, [r3, #17]


}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <sim_event_poll_once>:
}




void sim_event_poll_once(sim_t* psim, uint32_t timeout){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
//	HAL_UARTEx_ReceiveToIdle(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, &sim_event_rx_len, timeout);
	HAL_UART_Receive(psim->huart, sim_event_buff, SIM_EVENT_BUFF_SIZE, timeout);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2232      	movs	r2, #50	@ 0x32
 80015e2:	4903      	ldr	r1, [pc, #12]	@ (80015f0 <sim_event_poll_once+0x20>)
 80015e4:	f004 fc1f 	bl	8005e26 <HAL_UART_Receive>

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000498 	.word	0x20000498

080015f4 <sim_event_handler>:




void sim_event_handler(sim_t* psim, char* event_buff){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]

	if(strlen(event_buff) > 0){
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01b      	beq.n	800163e <sim_event_handler+0x4a>
		if(find_substr(event_buff, "+APP")){
 8001606:	4910      	ldr	r1, [pc, #64]	@ (8001648 <sim_event_handler+0x54>)
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f7fe fdbb 	bl	8000184 <find_substr>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d014      	beq.n	800163e <sim_event_handler+0x4a>
			if(find_substr(event_buff, "ACTIVE")){
 8001614:	490d      	ldr	r1, [pc, #52]	@ (800164c <sim_event_handler+0x58>)
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f7fe fdb4 	bl	8000184 <find_substr>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <sim_event_handler+0x36>
				psim->app_network = true;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	745a      	strb	r2, [r3, #17]
			else if(find_substr(event_buff, "DEACTIVE")){
				psim->app_network = false;
			}
		}
	}
}
 8001628:	e009      	b.n	800163e <sim_event_handler+0x4a>
			else if(find_substr(event_buff, "DEACTIVE")){
 800162a:	4909      	ldr	r1, [pc, #36]	@ (8001650 <sim_event_handler+0x5c>)
 800162c:	6838      	ldr	r0, [r7, #0]
 800162e:	f7fe fda9 	bl	8000184 <find_substr>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <sim_event_handler+0x4a>
				psim->app_network = false;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	745a      	strb	r2, [r3, #17]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08007d3c 	.word	0x08007d3c
 800164c:	08007d44 	.word	0x08007d44
 8001650:	08007d4c 	.word	0x08007d4c

08001654 <sim_test_at>:





bool sim_test_at(sim_t* psim){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(at_execute(psim->huart, sim_rx_buff, "", SIM_AT_MIN_TIMEOUT)){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <sim_test_at+0x3c>)
 8001666:	490b      	ldr	r1, [pc, #44]	@ (8001694 <sim_test_at+0x40>)
 8001668:	f7fe fe70 	bl	800034c <at_execute>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <sim_test_at+0x2c>
			psim->state = SIM_STATE_AT_OK;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	741a      	strb	r2, [r3, #16]
			return _sim_finish_operation();
 8001678:	f7ff ff84 	bl	8001584 <_sim_finish_operation>
 800167c:	4603      	mov	r3, r0
 800167e:	e003      	b.n	8001688 <sim_test_at+0x34>
	}
	else{
		psim->state = SIM_STATE_OFF;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	22ff      	movs	r2, #255	@ 0xff
 8001684:	741a      	strb	r2, [r3, #16]
	}
	return false;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	08007d58 	.word	0x08007d58
 8001694:	20000464 	.word	0x20000464

08001698 <sim_reboot>:



bool sim_reboot(sim_t* psim){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af04      	add	r7, sp, #16
 800169e:	6078      	str	r0, [r7, #4]
	sim_init(psim, psim->huart, psim->apn, psim->username, psim->password);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff6f 	bl	8001598 <sim_init>
	if(at_write_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT, 2, "1,", "1")){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <sim_reboot+0x54>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <sim_reboot+0x58>)
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <sim_reboot+0x5c>)
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2302      	movs	r3, #2
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016d2:	4909      	ldr	r1, [pc, #36]	@ (80016f8 <sim_reboot+0x60>)
 80016d4:	f7fe fedc 	bl	8000490 <at_write_blocking>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <sim_reboot+0x4a>
		return true;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <sim_reboot+0x4c>
	}
	return false;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000220 	.word	0x20000220
 80016f0:	08007d5c 	.word	0x08007d5c
 80016f4:	08007d60 	.word	0x08007d60
 80016f8:	20000464 	.word	0x20000464

080016fc <sim_report_error_enable>:



bool sim_report_error_enable(sim_t* psim){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af02      	add	r7, sp, #8
 8001702:	6078      	str	r0, [r7, #4]
	if(at_write(psim->huart, sim_rx_buff, cmee, 5000, 1, "2")){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <sim_report_error_enable+0x40>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <sim_report_error_enable+0x44>)
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2301      	movs	r3, #1
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001718:	490a      	ldr	r1, [pc, #40]	@ (8001744 <sim_report_error_enable+0x48>)
 800171a:	f7fe fda1 	bl	8000260 <at_write>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <sim_report_error_enable+0x36>
		psim->state = SIM_STATE_REPORT_ERROR_ENABLED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	741a      	strb	r2, [r3, #16]
		return _sim_finish_operation();
 800172a:	f7ff ff2b 	bl	8001584 <_sim_finish_operation>
 800172e:	4603      	mov	r3, r0
 8001730:	e000      	b.n	8001734 <sim_report_error_enable+0x38>
	}
	return false;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000228 	.word	0x20000228
 8001740:	08007d64 	.word	0x08007d64
 8001744:	20000464 	.word	0x20000464

08001748 <sim_is_ready>:




bool sim_is_ready(sim_t* psim){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if(psim->state >= SIM_STATE_AT_OK){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db36      	blt.n	80017c8 <sim_is_ready+0x80>
		if(at_read_blocking(psim->huart, sim_rx_buff, cpin, SIM_AT_MIN_TIMEOUT)){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <sim_is_ready+0x8c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001766:	491c      	ldr	r1, [pc, #112]	@ (80017d8 <sim_is_ready+0x90>)
 8001768:	f7fe fe50 	bl	800040c <at_read_blocking>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <sim_is_ready+0x3e>
			if(find_substr(sim_rx_buff, "READY")){
 8001772:	491a      	ldr	r1, [pc, #104]	@ (80017dc <sim_is_ready+0x94>)
 8001774:	4818      	ldr	r0, [pc, #96]	@ (80017d8 <sim_is_ready+0x90>)
 8001776:	f7fe fd05 	bl	8000184 <find_substr>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <sim_is_ready+0x3e>
				psim->state = SIM_STATE_PIN_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	741a      	strb	r2, [r3, #16]
			}
			else{

			}
		}
		if(psim->state == SIM_STATE_PIN_READY){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d119      	bne.n	80017c4 <sim_is_ready+0x7c>
			if(at_read_blocking(psim->huart, sim_rx_buff, cfun, SIM_AT_MIN_TIMEOUT)){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <sim_is_ready+0x98>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800179c:	490e      	ldr	r1, [pc, #56]	@ (80017d8 <sim_is_ready+0x90>)
 800179e:	f7fe fe35 	bl	800040c <at_read_blocking>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <sim_is_ready+0x7c>
				if(find_substr(sim_rx_buff, "+CFUN: 1")){
 80017a8:	490e      	ldr	r1, [pc, #56]	@ (80017e4 <sim_is_ready+0x9c>)
 80017aa:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <sim_is_ready+0x90>)
 80017ac:	f7fe fcea 	bl	8000184 <find_substr>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <sim_is_ready+0x7c>
					psim->state = SIM_STATE_FULL_FUNC;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	741a      	strb	r2, [r3, #16]
					return _sim_finish_operation();
 80017bc:	f7ff fee2 	bl	8001584 <_sim_finish_operation>
 80017c0:	4603      	mov	r3, r0
 80017c2:	e002      	b.n	80017ca <sim_is_ready+0x82>
				else{

				}
			}
		}
		return false;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <sim_is_ready+0x82>
	}
	return false;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000224 	.word	0x20000224
 80017d8:	20000464 	.word	0x20000464
 80017dc:	08007d68 	.word	0x08007d68
 80017e0:	20000220 	.word	0x20000220
 80017e4:	08007d70 	.word	0x08007d70

080017e8 <sim_registered>:


bool sim_registered(sim_t* psim){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_FULL_FUNC){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d119      	bne.n	800182e <sim_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, creg, 5000)){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <sim_registered+0x50>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <sim_registered+0x54>)
 8001808:	f7fe fce4 	bl	80001d4 <at_read>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <sim_registered+0x46>
			if(find_substr(sim_rx_buff, "+CREG: 0,1")){
 8001812:	490b      	ldr	r1, [pc, #44]	@ (8001840 <sim_registered+0x58>)
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <sim_registered+0x54>)
 8001816:	f7fe fcb5 	bl	8000184 <find_substr>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <sim_registered+0x46>
				psim->state = SIM_STATE_CREG_OK;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001826:	f7ff fead 	bl	8001584 <_sim_finish_operation>
 800182a:	4603      	mov	r3, r0
 800182c:	e000      	b.n	8001830 <sim_registered+0x48>
			else{

			}
		}
	}
	return false;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000022c 	.word	0x2000022c
 800183c:	20000464 	.word	0x20000464
 8001840:	08007d7c 	.word	0x08007d7c

08001844 <sim_gprs_registered>:



bool sim_gprs_registered(sim_t* psim){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CREG_OK){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d119      	bne.n	800188a <sim_gprs_registered+0x46>
		if(at_read(psim->huart, sim_rx_buff, cgreg, 5000)){
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <sim_gprs_registered+0x50>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <sim_gprs_registered+0x54>)
 8001864:	f7fe fcb6 	bl	80001d4 <at_read>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00d      	beq.n	800188a <sim_gprs_registered+0x46>
			if(find_substr(sim_rx_buff, "+CGREG: 0,1")){
 800186e:	490b      	ldr	r1, [pc, #44]	@ (800189c <sim_gprs_registered+0x58>)
 8001870:	4809      	ldr	r0, [pc, #36]	@ (8001898 <sim_gprs_registered+0x54>)
 8001872:	f7fe fc87 	bl	8000184 <find_substr>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <sim_gprs_registered+0x46>
				psim->state = SIM_STATE_CGREG_OK;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2205      	movs	r2, #5
 8001880:	741a      	strb	r2, [r3, #16]
				return _sim_finish_operation();
 8001882:	f7ff fe7f 	bl	8001584 <_sim_finish_operation>
 8001886:	4603      	mov	r3, r0
 8001888:	e000      	b.n	800188c <sim_gprs_registered+0x48>

			}
		}
	}

	return false;
 800188a:	2300      	movs	r3, #0

}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000230 	.word	0x20000230
 8001898:	20000464 	.word	0x20000464
 800189c:	08007d88 	.word	0x08007d88

080018a0 <sim_gprs_connect>:



bool sim_gprs_connect(sim_t* psim){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d11d      	bne.n	80018ee <sim_gprs_connect+0x4e>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 100, 2, "1,",SIM_APN_MTN) > 0){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <sim_gprs_connect+0x60>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <sim_gprs_connect+0x64>)
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <sim_gprs_connect+0x68>)
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2364      	movs	r3, #100	@ 0x64
 80018c8:	4910      	ldr	r1, [pc, #64]	@ (800190c <sim_gprs_connect+0x6c>)
 80018ca:	f7fe fde1 	bl	8000490 <at_write_blocking>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dd0c      	ble.n	80018ee <sim_gprs_connect+0x4e>
//			sim_event_handler(psim);
			sim_event_poll_once(psim, 10000);
 80018d4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fe79 	bl	80015d0 <sim_event_poll_once>
			sim_event_handler(psim, sim_event_buff);
 80018de:	490c      	ldr	r1, [pc, #48]	@ (8001910 <sim_gprs_connect+0x70>)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fe87 	bl	80015f4 <sim_event_handler>
			return _sim_finish_operation();
 80018e6:	f7ff fe4d 	bl	8001584 <_sim_finish_operation>
 80018ea:	4603      	mov	r3, r0
 80018ec:	e003      	b.n	80018f6 <sim_gprs_connect+0x56>
		}

	}
	flush_buff(sim_rx_buff);
 80018ee:	4807      	ldr	r0, [pc, #28]	@ (800190c <sim_gprs_connect+0x6c>)
 80018f0:	f7fe fc5c 	bl	80001ac <flush_buff>
	return false;
 80018f4:	2300      	movs	r3, #0

}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000234 	.word	0x20000234
 8001904:	08007d94 	.word	0x08007d94
 8001908:	08007d60 	.word	0x08007d60
 800190c:	20000464 	.word	0x20000464
 8001910:	20000498 	.word	0x20000498

08001914 <sim_gprs_disconnect>:



bool sim_gprs_disconnect(sim_t* psim){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
	if(psim->state == SIM_STATE_CGREG_OK){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d116      	bne.n	8001954 <sim_gprs_disconnect+0x40>
		if(at_write_blocking(psim->huart, sim_rx_buff, cnact, 5000, 1, "0") > 0){
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <sim_gprs_disconnect+0x50>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <sim_gprs_disconnect+0x54>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2301      	movs	r3, #1
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f241 3388 	movw	r3, #5000	@ 0x1388
 800193a:	490c      	ldr	r1, [pc, #48]	@ (800196c <sim_gprs_disconnect+0x58>)
 800193c:	f7fe fda8 	bl	8000490 <at_write_blocking>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	dd06      	ble.n	8001954 <sim_gprs_disconnect+0x40>
			psim->app_network = false;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	745a      	strb	r2, [r3, #17]
//			sim_event_handler(psim);
//			sim_event_poll_once(psim, 60000);
//			sim_event_handler(psim);
			return _sim_finish_operation();
 800194c:	f7ff fe1a 	bl	8001584 <_sim_finish_operation>
 8001950:	4603      	mov	r3, r0
 8001952:	e003      	b.n	800195c <sim_gprs_disconnect+0x48>
		}

	}
	flush_buff(sim_rx_buff);
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <sim_gprs_disconnect+0x58>)
 8001956:	f7fe fc29 	bl	80001ac <flush_buff>
	return false;
 800195a:	2300      	movs	r3, #0

}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000234 	.word	0x20000234
 8001968:	08007da4 	.word	0x08007da4
 800196c:	20000464 	.word	0x20000464

08001970 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af04      	add	r7, sp, #16
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800197c:	230a      	movs	r3, #10
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	2301      	movs	r3, #1
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	1cfb      	adds	r3, r7, #3
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	2200      	movs	r2, #0
 800198c:	2178      	movs	r1, #120	@ 0x78
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f001 fe52 	bl	8003638 <HAL_I2C_Mem_Write>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80019a8:	2064      	movs	r0, #100	@ 0x64
 80019aa:	f000 fcf9 	bl	80023a0 <HAL_Delay>
    int status = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80019b2:	21ae      	movs	r1, #174	@ 0xae
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffdb 	bl	8001970 <ssd1306_WriteCommand>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80019c4:	2120      	movs	r1, #32
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffd2 	bl	8001970 <ssd1306_WriteCommand>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019d6:	2110      	movs	r1, #16
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffc9 	bl	8001970 <ssd1306_WriteCommand>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80019e8:	21b0      	movs	r1, #176	@ 0xb0
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffc0 	bl	8001970 <ssd1306_WriteCommand>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80019fa:	21c8      	movs	r1, #200	@ 0xc8
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffb7 	bl	8001970 <ssd1306_WriteCommand>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffae 	bl	8001970 <ssd1306_WriteCommand>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001a1e:	2110      	movs	r1, #16
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffa5 	bl	8001970 <ssd1306_WriteCommand>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001a30:	2140      	movs	r1, #64	@ 0x40
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff9c 	bl	8001970 <ssd1306_WriteCommand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001a42:	2181      	movs	r1, #129	@ 0x81
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff93 	bl	8001970 <ssd1306_WriteCommand>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001a54:	21ff      	movs	r1, #255	@ 0xff
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff8a 	bl	8001970 <ssd1306_WriteCommand>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001a66:	21a1      	movs	r1, #161	@ 0xa1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff81 	bl	8001970 <ssd1306_WriteCommand>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001a78:	21a6      	movs	r1, #166	@ 0xa6
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff78 	bl	8001970 <ssd1306_WriteCommand>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001a8a:	21a8      	movs	r1, #168	@ 0xa8
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff6f 	bl	8001970 <ssd1306_WriteCommand>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001a9c:	213f      	movs	r1, #63	@ 0x3f
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff66 	bl	8001970 <ssd1306_WriteCommand>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aae:	21a4      	movs	r1, #164	@ 0xa4
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff5d 	bl	8001970 <ssd1306_WriteCommand>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001ac0:	21d3      	movs	r1, #211	@ 0xd3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff54 	bl	8001970 <ssd1306_WriteCommand>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff4b 	bl	8001970 <ssd1306_WriteCommand>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001ae4:	21d5      	movs	r1, #213	@ 0xd5
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff42 	bl	8001970 <ssd1306_WriteCommand>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001af6:	21f0      	movs	r1, #240	@ 0xf0
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff39 	bl	8001970 <ssd1306_WriteCommand>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001b08:	21d9      	movs	r1, #217	@ 0xd9
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff30 	bl	8001970 <ssd1306_WriteCommand>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b1a:	2122      	movs	r1, #34	@ 0x22
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff27 	bl	8001970 <ssd1306_WriteCommand>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001b2c:	21da      	movs	r1, #218	@ 0xda
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff1e 	bl	8001970 <ssd1306_WriteCommand>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001b3e:	2112      	movs	r1, #18
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff15 	bl	8001970 <ssd1306_WriteCommand>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001b50:	21db      	movs	r1, #219	@ 0xdb
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff0c 	bl	8001970 <ssd1306_WriteCommand>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001b62:	2120      	movs	r1, #32
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff03 	bl	8001970 <ssd1306_WriteCommand>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001b74:	218d      	movs	r1, #141	@ 0x8d
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fefa 	bl	8001970 <ssd1306_WriteCommand>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001b86:	2114      	movs	r1, #20
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fef1 	bl	8001970 <ssd1306_WriteCommand>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001b98:	21af      	movs	r1, #175	@ 0xaf
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fee8 	bl	8001970 <ssd1306_WriteCommand>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <ssd1306_Init+0x214>
        return 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e00f      	b.n	8001bd4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f000 f813 	bl	8001be0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f832 	bl	8001c24 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <ssd1306_Init+0x23c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <ssd1306_Init+0x23c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <ssd1306_Init+0x23c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	715a      	strb	r2, [r3, #5]

    return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200008cc 	.word	0x200008cc

08001be0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00d      	b.n	8001c0c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <ssd1306_Fill+0x1a>
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	e000      	b.n	8001bfc <ssd1306_Fill+0x1c>
 8001bfa:	21ff      	movs	r1, #255	@ 0xff
 8001bfc:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <ssd1306_Fill+0x40>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	460a      	mov	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d3ed      	bcc.n	8001bf0 <ssd1306_Fill+0x10>
    }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	200004cc 	.word	0x200004cc

08001c24 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e020      	b.n	8001c74 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3b50      	subs	r3, #80	@ 0x50
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe98 	bl	8001970 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001c40:	2100      	movs	r1, #0
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fe94 	bl	8001970 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001c48:	2110      	movs	r1, #16
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe90 	bl	8001970 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	4a0b      	ldr	r2, [pc, #44]	@ (8001c84 <ssd1306_UpdateScreen+0x60>)
 8001c56:	4413      	add	r3, r2
 8001c58:	2264      	movs	r2, #100	@ 0x64
 8001c5a:	9202      	str	r2, [sp, #8]
 8001c5c:	2280      	movs	r2, #128	@ 0x80
 8001c5e:	9201      	str	r2, [sp, #4]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	2240      	movs	r2, #64	@ 0x40
 8001c66:	2178      	movs	r1, #120	@ 0x78
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f001 fce5 	bl	8003638 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b07      	cmp	r3, #7
 8001c78:	d9db      	bls.n	8001c32 <ssd1306_UpdateScreen+0xe>
    }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200004cc 	.word	0x200004cc

08001c88 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	460b      	mov	r3, r1
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	4613      	mov	r3, r2
 8001c98:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db48      	blt.n	8001d34 <ssd1306_DrawPixel+0xac>
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ca6:	d845      	bhi.n	8001d34 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <ssd1306_DrawPixel+0xb8>)
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11a      	bne.n	8001cfa <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	b2d8      	uxtb	r0, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	01db      	lsls	r3, r3, #7
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d44 <ssd1306_DrawPixel+0xbc>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	79bb      	ldrb	r3, [r7, #6]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b259      	sxtb	r1, r3
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	4603      	mov	r3, r0
 8001cee:	01db      	lsls	r3, r3, #7
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b2c9      	uxtb	r1, r1
 8001cf4:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <ssd1306_DrawPixel+0xbc>)
 8001cf6:	54d1      	strb	r1, [r2, r3]
 8001cf8:	e01d      	b.n	8001d36 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	4413      	add	r3, r2
 8001d08:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <ssd1306_DrawPixel+0xbc>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	b25a      	sxtb	r2, r3
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	b259      	sxtb	r1, r3
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4603      	mov	r3, r0
 8001d28:	01db      	lsls	r3, r3, #7
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b2c9      	uxtb	r1, r1
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <ssd1306_DrawPixel+0xbc>)
 8001d30:	54d1      	strb	r1, [r2, r3]
 8001d32:	e000      	b.n	8001d36 <ssd1306_DrawPixel+0xae>
        return;
 8001d34:	bf00      	nop
    }
}
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200008cc 	.word	0x200008cc
 8001d44:	200004cc 	.word	0x200004cc

08001d48 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4604      	mov	r4, r0
 8001d50:	1d38      	adds	r0, r7, #4
 8001d52:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d60:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	793b      	ldrb	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d6c:	dc06      	bgt.n	8001d7c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001d70:	885b      	ldrh	r3, [r3, #2]
 8001d72:	461a      	mov	r2, r3
 8001d74:	797b      	ldrb	r3, [r7, #5]
 8001d76:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d7a:	dd01      	ble.n	8001d80 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e05c      	b.n	8001e3a <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e04c      	b.n	8001e20 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3b20      	subs	r3, #32
 8001d8c:	7979      	ldrb	r1, [r7, #5]
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4619      	mov	r1, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	440b      	add	r3, r1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	e034      	b.n	8001e10 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d012      	beq.n	8001ddc <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001db6:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	7bba      	ldrb	r2, [r7, #14]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7ff ff57 	bl	8001c88 <ssd1306_DrawPixel>
 8001dda:	e016      	b.n	8001e0a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b2d8      	uxtb	r0, r3
 8001dea:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001dec:	885b      	ldrh	r3, [r3, #2]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	b2d9      	uxtb	r1, r3
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	f7ff ff3f 	bl	8001c88 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	793b      	ldrb	r3, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d3c5      	bcc.n	8001da6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	461a      	mov	r2, r3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d3ad      	bcc.n	8001d86 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	793a      	ldrb	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <ssd1306_WriteChar+0xfc>)
 8001e36:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200008cc 	.word	0x200008cc

08001e48 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	1d38      	adds	r0, r7, #4
 8001e52:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e56:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001e58:	e012      	b.n	8001e80 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	7818      	ldrb	r0, [r3, #0]
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	1d3a      	adds	r2, r7, #4
 8001e62:	ca06      	ldmia	r2, {r1, r2}
 8001e64:	f7ff ff70 	bl	8001d48 <ssd1306_WriteChar>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d002      	beq.n	8001e7a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	e008      	b.n	8001e8c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e8      	bne.n	8001e5a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <ssd1306_SetCursor+0x2c>)
 8001eaa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <ssd1306_SetCursor+0x2c>)
 8001eb2:	805a      	strh	r2, [r3, #2]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200008cc 	.word	0x200008cc

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_MspInit+0x5c>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_MspInit+0x60>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_MspInit+0x60>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <NMI_Handler+0x4>

08001f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <MemManage_Handler+0x4>

08001f40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f78:	f000 f9f6 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <RTC_IRQHandler+0x10>)
 8001f86:	f003 fdd5 	bl	8005b34 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000450 	.word	0x20000450

08001f94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <DMA1_Channel6_IRQHandler+0x10>)
 8001f9a:	f000 fd83 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000968 	.word	0x20000968

08001fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <USART1_IRQHandler+0x10>)
 8001fae:	f004 f933 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200008d8 	.word	0x200008d8

08001fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <USART2_IRQHandler+0x10>)
 8001fc2:	f004 f929 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000920 	.word	0x20000920

08001fd0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <RTC_Alarm_IRQHandler+0x10>)
 8001fd6:	f003 fae1 	bl	800559c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000450 	.word	0x20000450

08001fe4 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001fe8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001fec:	f001 f94a 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f005 f880 	bl	8007128 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20005000 	.word	0x20005000
 8002054:	00000400 	.word	0x00000400
 8002058:	200008d4 	.word	0x200008d4
 800205c:	20000af8 	.word	0x20000af8

08002060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <MX_USART1_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800207c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_USART1_UART_Init+0x4c>)
 80020a4:	f003 fd90 	bl	8005bc8 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f7fe febd 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200008d8 	.word	0x200008d8
 80020bc:	40013800 	.word	0x40013800

080020c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <MX_USART2_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_USART2_UART_Init+0x4c>)
 80020f8:	f003 fd66 	bl	8005bc8 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f7fe fe93 	bl	8000e2c <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000920 	.word	0x20000920
 8002110:	40004400 	.word	0x40004400

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a52      	ldr	r2, [pc, #328]	@ (8002278 <HAL_UART_MspInit+0x164>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d13a      	bne.n	80021aa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002134:	4b51      	ldr	r3, [pc, #324]	@ (800227c <HAL_UART_MspInit+0x168>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a50      	ldr	r2, [pc, #320]	@ (800227c <HAL_UART_MspInit+0x168>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <HAL_UART_MspInit+0x168>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_UART_MspInit+0x168>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a4a      	ldr	r2, [pc, #296]	@ (800227c <HAL_UART_MspInit+0x168>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b48      	ldr	r3, [pc, #288]	@ (800227c <HAL_UART_MspInit+0x168>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4619      	mov	r1, r3
 8002178:	4841      	ldr	r0, [pc, #260]	@ (8002280 <HAL_UART_MspInit+0x16c>)
 800217a:	f000 fdc7 	bl	8002d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800217e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4619      	mov	r1, r3
 8002192:	483b      	ldr	r0, [pc, #236]	@ (8002280 <HAL_UART_MspInit+0x16c>)
 8002194:	f000 fdba 	bl	8002d0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2025      	movs	r0, #37	@ 0x25
 800219e:	f000 fa0f 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021a2:	2025      	movs	r0, #37	@ 0x25
 80021a4:	f000 fa38 	bl	8002618 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021a8:	e062      	b.n	8002270 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a35      	ldr	r2, [pc, #212]	@ (8002284 <HAL_UART_MspInit+0x170>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d15d      	bne.n	8002270 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	4a30      	ldr	r2, [pc, #192]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021be:	61d3      	str	r3, [r2, #28]
 80021c0:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a2a      	ldr	r2, [pc, #168]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_UART_MspInit+0x168>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e4:	2304      	movs	r3, #4
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4822      	ldr	r0, [pc, #136]	@ (8002280 <HAL_UART_MspInit+0x16c>)
 80021f8:	f000 fd88 	bl	8002d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021fc:	2308      	movs	r3, #8
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	481c      	ldr	r0, [pc, #112]	@ (8002280 <HAL_UART_MspInit+0x16c>)
 8002210:	f000 fd7c 	bl	8002d0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002216:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_UART_MspInit+0x178>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_UART_MspInit+0x174>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_UART_MspInit+0x174>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <HAL_UART_MspInit+0x174>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002244:	4810      	ldr	r0, [pc, #64]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002246:	f000 fa0b 	bl	8002660 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002250:	f7fe fdec 	bl	8000e2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <HAL_UART_MspInit+0x174>)
 8002258:	63da      	str	r2, [r3, #60]	@ 0x3c
 800225a:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <HAL_UART_MspInit+0x174>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 3);
 8002260:	2203      	movs	r2, #3
 8002262:	2103      	movs	r1, #3
 8002264:	2026      	movs	r0, #38	@ 0x26
 8002266:	f000 f9ab 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226a:	2026      	movs	r0, #38	@ 0x26
 800226c:	f000 f9d4 	bl	8002618 <HAL_NVIC_EnableIRQ>
}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013800 	.word	0x40013800
 800227c:	40021000 	.word	0x40021000
 8002280:	40010800 	.word	0x40010800
 8002284:	40004400 	.word	0x40004400
 8002288:	20000968 	.word	0x20000968
 800228c:	4002006c 	.word	0x4002006c

08002290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002290:	f7ff fee6 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002294:	480b      	ldr	r0, [pc, #44]	@ (80022c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002296:	490c      	ldr	r1, [pc, #48]	@ (80022c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002298:	4a0c      	ldr	r2, [pc, #48]	@ (80022cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022ac:	4c09      	ldr	r4, [pc, #36]	@ (80022d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ba:	f004 ff3b 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022be:	f7fe fbc3 	bl	8000a48 <main>
  bx lr
 80022c2:	4770      	bx	lr
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80022cc:	08008774 	.word	0x08008774
  ldr r2, =_sbss
 80022d0:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80022d4:	20000af8 	.word	0x20000af8

080022d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <HAL_Init+0x28>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <HAL_Init+0x28>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 f947 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	200f      	movs	r0, #15
 80022f4:	f000 f808 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fde4 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f98e 	bl	8002648 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f93c 	bl	80025c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000238 	.word	0x20000238
 8002360:	20000240 	.word	0x20000240
 8002364:	2000023c 	.word	0x2000023c

08002368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_IncTick+0x1c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_IncTick+0x20>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a03      	ldr	r2, [pc, #12]	@ (8002388 <HAL_IncTick+0x20>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000240 	.word	0x20000240
 8002388:	200009ac 	.word	0x200009ac

0800238c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b02      	ldr	r3, [pc, #8]	@ (800239c <HAL_GetTick+0x10>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	200009ac 	.word	0x200009ac

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fff0 	bl	800238c <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_Delay+0x44>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffe0 	bl	800238c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000240 	.word	0x20000240

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4906      	ldr	r1, [pc, #24]	@ (8002480 <__NVIC_EnableIRQ+0x34>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff90 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d00f      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d00c      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d009      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d006      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d003      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80025a6:	2191      	movs	r1, #145	@ 0x91
 80025a8:	4804      	ldr	r0, [pc, #16]	@ (80025bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80025aa:	f7fe fc45 	bl	8000e38 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff1a 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	08007db4 	.word	0x08007db4

080025c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d903      	bls.n	80025e0 <HAL_NVIC_SetPriority+0x20>
 80025d8:	21a9      	movs	r1, #169	@ 0xa9
 80025da:	480e      	ldr	r0, [pc, #56]	@ (8002614 <HAL_NVIC_SetPriority+0x54>)
 80025dc:	f7fe fc2c 	bl	8000e38 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d903      	bls.n	80025ee <HAL_NVIC_SetPriority+0x2e>
 80025e6:	21aa      	movs	r1, #170	@ 0xaa
 80025e8:	480a      	ldr	r0, [pc, #40]	@ (8002614 <HAL_NVIC_SetPriority+0x54>)
 80025ea:	f7fe fc25 	bl	8000e38 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ee:	f7ff ff1f 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7ff ff6d 	bl	80024d8 <NVIC_EncodePriority>
 80025fe:	4602      	mov	r2, r0
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3c 	bl	8002484 <__NVIC_SetPriority>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08007db4 	.word	0x08007db4

08002618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da03      	bge.n	8002632 <HAL_NVIC_EnableIRQ+0x1a>
 800262a:	21bd      	movs	r1, #189	@ 0xbd
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_NVIC_EnableIRQ+0x2c>)
 800262e:	f7fe fc03 	bl	8000e38 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff08 	bl	800244c <__NVIC_EnableIRQ>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	08007db4 	.word	0x08007db4

08002648 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff73 	bl	800253c <SysTick_Config>
 8002656:	4603      	mov	r3, r0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0da      	b.n	800282c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_DMA_Init+0x1d4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d021      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6c      	ldr	r2, [pc, #432]	@ (8002838 <HAL_DMA_Init+0x1d8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01c      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6b      	ldr	r2, [pc, #428]	@ (800283c <HAL_DMA_Init+0x1dc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d017      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a69      	ldr	r2, [pc, #420]	@ (8002840 <HAL_DMA_Init+0x1e0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d012      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a68      	ldr	r2, [pc, #416]	@ (8002844 <HAL_DMA_Init+0x1e4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a66      	ldr	r2, [pc, #408]	@ (8002848 <HAL_DMA_Init+0x1e8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d008      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_DMA_Init+0x1ec>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_DMA_Init+0x64>
 80026bc:	2199      	movs	r1, #153	@ 0x99
 80026be:	4864      	ldr	r0, [pc, #400]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 80026c0:	f7fe fbba 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <HAL_DMA_Init+0x86>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d008      	beq.n	80026e6 <HAL_DMA_Init+0x86>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026dc:	d003      	beq.n	80026e6 <HAL_DMA_Init+0x86>
 80026de:	219a      	movs	r1, #154	@ 0x9a
 80026e0:	485b      	ldr	r0, [pc, #364]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 80026e2:	f7fe fba9 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b40      	cmp	r3, #64	@ 0x40
 80026ec:	d007      	beq.n	80026fe <HAL_DMA_Init+0x9e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_DMA_Init+0x9e>
 80026f6:	219b      	movs	r1, #155	@ 0x9b
 80026f8:	4855      	ldr	r0, [pc, #340]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 80026fa:	f7fe fb9d 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b80      	cmp	r3, #128	@ 0x80
 8002704:	d007      	beq.n	8002716 <HAL_DMA_Init+0xb6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_DMA_Init+0xb6>
 800270e:	219c      	movs	r1, #156	@ 0x9c
 8002710:	484f      	ldr	r0, [pc, #316]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 8002712:	f7fe fb91 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <HAL_DMA_Init+0xda>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002726:	d008      	beq.n	800273a <HAL_DMA_Init+0xda>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002730:	d003      	beq.n	800273a <HAL_DMA_Init+0xda>
 8002732:	219d      	movs	r1, #157	@ 0x9d
 8002734:	4846      	ldr	r0, [pc, #280]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 8002736:	f7fe fb7f 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_DMA_Init+0xfe>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274a:	d008      	beq.n	800275e <HAL_DMA_Init+0xfe>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002754:	d003      	beq.n	800275e <HAL_DMA_Init+0xfe>
 8002756:	219e      	movs	r1, #158	@ 0x9e
 8002758:	483d      	ldr	r0, [pc, #244]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 800275a:	f7fe fb6d 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_DMA_Init+0x116>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b20      	cmp	r3, #32
 800276c:	d003      	beq.n	8002776 <HAL_DMA_Init+0x116>
 800276e:	219f      	movs	r1, #159	@ 0x9f
 8002770:	4837      	ldr	r0, [pc, #220]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 8002772:	f7fe fb61 	bl	8000e38 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_DMA_Init+0x144>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002786:	d00d      	beq.n	80027a4 <HAL_DMA_Init+0x144>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002790:	d008      	beq.n	80027a4 <HAL_DMA_Init+0x144>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800279a:	d003      	beq.n	80027a4 <HAL_DMA_Init+0x144>
 800279c:	21a0      	movs	r1, #160	@ 0xa0
 800279e:	482c      	ldr	r0, [pc, #176]	@ (8002850 <HAL_DMA_Init+0x1f0>)
 80027a0:	f7fe fb4a 	bl	8000e38 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_DMA_Init+0x1f4>)
 80027ac:	4413      	add	r3, r2
 80027ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002858 <HAL_DMA_Init+0x1f8>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a27      	ldr	r2, [pc, #156]	@ (800285c <HAL_DMA_Init+0x1fc>)
 80027c0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027d8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020080 	.word	0x40020080
 8002850:	08007df0 	.word	0x08007df0
 8002854:	bffdfff8 	.word	0xbffdfff8
 8002858:	cccccccd 	.word	0xcccccccd
 800285c:	40020000 	.word	0x40020000

08002860 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_DMA_Start_IT+0x20>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d304      	bcc.n	800288a <HAL_DMA_Start_IT+0x2a>
 8002880:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8002884:	482c      	ldr	r0, [pc, #176]	@ (8002938 <HAL_DMA_Start_IT+0xd8>)
 8002886:	f7fe fad7 	bl	8000e38 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x38>
 8002894:	2302      	movs	r3, #2
 8002896:	e04b      	b.n	8002930 <HAL_DMA_Start_IT+0xd0>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d13a      	bne.n	8002922 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9ed 	bl	8002cb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 020e 	orr.w	r2, r2, #14
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00f      	b.n	8002910 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 020a 	orr.w	r2, r2, #10
 800290e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08007df0 	.word	0x08007df0

0800293c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e020      	b.n	80029a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 020e 	bic.w	r2, r2, #14
 8002974:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d005      	beq.n	80029d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e051      	b.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 020e 	bic.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_DMA_Abort_IT+0xd4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d029      	beq.n	8002a56 <HAL_DMA_Abort_IT+0xa2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_DMA_Abort_IT+0xd8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x9e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <HAL_DMA_Abort_IT+0xdc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01a      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x98>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_DMA_Abort_IT+0xe0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d012      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x92>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <HAL_DMA_Abort_IT+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00a      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a9c <HAL_DMA_Abort_IT+0xe8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d102      	bne.n	8002a3a <HAL_DMA_Abort_IT+0x86>
 8002a34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a38:	e00e      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a3e:	e00b      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a44:	e008      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a4a:	e005      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a50:	e002      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a52:	2310      	movs	r3, #16
 8002a54:	e000      	b.n	8002a58 <HAL_DMA_Abort_IT+0xa4>
 8002a56:	2301      	movs	r3, #1
 8002a58:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_DMA_Abort_IT+0xec>)
 8002a5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
    } 
  }
  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40020008 	.word	0x40020008
 8002a8c:	4002001c 	.word	0x4002001c
 8002a90:	40020030 	.word	0x40020030
 8002a94:	40020044 	.word	0x40020044
 8002a98:	40020058 	.word	0x40020058
 8002a9c:	4002006c 	.word	0x4002006c
 8002aa0:	40020000 	.word	0x40020000

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04f      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xc8>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a66      	ldr	r2, [pc, #408]	@ (8002c94 <HAL_DMA_IRQHandler+0x1f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d029      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xae>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_DMA_IRQHandler+0x1f4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xaa>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a63      	ldr	r2, [pc, #396]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01a      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xa4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a62      	ldr	r2, [pc, #392]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d012      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x9e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <HAL_DMA_IRQHandler+0x200>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x98>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <HAL_DMA_IRQHandler+0x204>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d102      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x92>
 8002b30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b34:	e00e      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b3a:	e00b      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b40:	e008      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b46:	e005      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b4c:	e002      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b4e:	2340      	movs	r3, #64	@ 0x40
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_IRQHandler+0xb0>
 8002b52:	2304      	movs	r3, #4
 8002b54:	4a55      	ldr	r2, [pc, #340]	@ (8002cac <HAL_DMA_IRQHandler+0x208>)
 8002b56:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8094 	beq.w	8002c8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b6a:	e08e      	b.n	8002c8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	2202      	movs	r2, #2
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d056      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x186>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d051      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020a 	bic.w	r2, r2, #10
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a38      	ldr	r2, [pc, #224]	@ (8002c94 <HAL_DMA_IRQHandler+0x1f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d029      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x166>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a37      	ldr	r2, [pc, #220]	@ (8002c98 <HAL_DMA_IRQHandler+0x1f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x162>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a35      	ldr	r2, [pc, #212]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x15c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x156>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a32      	ldr	r2, [pc, #200]	@ (8002ca4 <HAL_DMA_IRQHandler+0x200>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x150>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a31      	ldr	r2, [pc, #196]	@ (8002ca8 <HAL_DMA_IRQHandler+0x204>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMA_IRQHandler+0x14a>
 8002be8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf2:	e00b      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf8:	e008      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bfe:	e005      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c04:	e002      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002c06:	2320      	movs	r3, #32
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_IRQHandler+0x168>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <HAL_DMA_IRQHandler+0x208>)
 8002c0e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d034      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c28:	e02f      	b.n	8002c8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2208      	movs	r2, #8
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x1e8>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 020e 	bic.w	r2, r2, #14
 8002c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
    }
  }
  return;
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
}
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40020008 	.word	0x40020008
 8002c98:	4002001c 	.word	0x4002001c
 8002c9c:	40020030 	.word	0x40020030
 8002ca0:	40020044 	.word	0x40020044
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	4002006c 	.word	0x4002006c
 8002cac:	40020000 	.word	0x40020000

08002cb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d108      	bne.n	8002cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cee:	e007      	b.n	8002d00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a96      	ldr	r2, [pc, #600]	@ (8002f7c <HAL_GPIO_Init+0x270>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0x42>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a95      	ldr	r2, [pc, #596]	@ (8002f80 <HAL_GPIO_Init+0x274>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <HAL_GPIO_Init+0x42>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a94      	ldr	r2, [pc, #592]	@ (8002f84 <HAL_GPIO_Init+0x278>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <HAL_GPIO_Init+0x42>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a93      	ldr	r2, [pc, #588]	@ (8002f88 <HAL_GPIO_Init+0x27c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x42>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a92      	ldr	r2, [pc, #584]	@ (8002f8c <HAL_GPIO_Init+0x280>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x42>
 8002d46:	21bd      	movs	r1, #189	@ 0xbd
 8002d48:	4891      	ldr	r0, [pc, #580]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002d4a:	f7fe f875 	bl	8000e38 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_GPIO_Init+0x56>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d303      	bcc.n	8002d6a <HAL_GPIO_Init+0x5e>
 8002d62:	21be      	movs	r1, #190	@ 0xbe
 8002d64:	488a      	ldr	r0, [pc, #552]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002d66:	f7fe f867 	bl	8000e38 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 821d 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f000 8218 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b11      	cmp	r3, #17
 8002d84:	f000 8213 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f000 820e 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	f000 8209 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a7c      	ldr	r2, [pc, #496]	@ (8002f94 <HAL_GPIO_Init+0x288>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f000 8203 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a7a      	ldr	r2, [pc, #488]	@ (8002f98 <HAL_GPIO_Init+0x28c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f000 81fd 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a78      	ldr	r2, [pc, #480]	@ (8002f9c <HAL_GPIO_Init+0x290>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	f000 81f7 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a76      	ldr	r2, [pc, #472]	@ (8002fa0 <HAL_GPIO_Init+0x294>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f000 81f1 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a74      	ldr	r2, [pc, #464]	@ (8002fa4 <HAL_GPIO_Init+0x298>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f000 81eb 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a72      	ldr	r2, [pc, #456]	@ (8002fa8 <HAL_GPIO_Init+0x29c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f000 81e5 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	f000 81e0 	beq.w	80031ae <HAL_GPIO_Init+0x4a2>
 8002dee:	21bf      	movs	r1, #191	@ 0xbf
 8002df0:	4867      	ldr	r0, [pc, #412]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002df2:	f7fe f821 	bl	8000e38 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df6:	e1da      	b.n	80031ae <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f040 81c9 	bne.w	80031a8 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a58      	ldr	r2, [pc, #352]	@ (8002f7c <HAL_GPIO_Init+0x270>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x13a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a57      	ldr	r2, [pc, #348]	@ (8002f80 <HAL_GPIO_Init+0x274>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <HAL_GPIO_Init+0x13a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a56      	ldr	r2, [pc, #344]	@ (8002f84 <HAL_GPIO_Init+0x278>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <HAL_GPIO_Init+0x13a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a55      	ldr	r2, [pc, #340]	@ (8002f88 <HAL_GPIO_Init+0x27c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a54      	ldr	r2, [pc, #336]	@ (8002f8c <HAL_GPIO_Init+0x280>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x13a>
 8002e3e:	21cd      	movs	r1, #205	@ 0xcd
 8002e40:	4853      	ldr	r0, [pc, #332]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002e42:	f7fd fff9 	bl	8000e38 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a57      	ldr	r2, [pc, #348]	@ (8002fa8 <HAL_GPIO_Init+0x29c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f000 80c2 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
 8002e52:	4a55      	ldr	r2, [pc, #340]	@ (8002fa8 <HAL_GPIO_Init+0x29c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f200 80e8 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002e5a:	4a50      	ldr	r2, [pc, #320]	@ (8002f9c <HAL_GPIO_Init+0x290>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	f000 80ba 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
 8002e62:	4a4e      	ldr	r2, [pc, #312]	@ (8002f9c <HAL_GPIO_Init+0x290>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	f200 80e0 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa4 <HAL_GPIO_Init+0x298>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	f000 80b2 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
 8002e72:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa4 <HAL_GPIO_Init+0x298>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f200 80d8 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002e7a:	4a47      	ldr	r2, [pc, #284]	@ (8002f98 <HAL_GPIO_Init+0x28c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f000 80aa 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
 8002e82:	4a45      	ldr	r2, [pc, #276]	@ (8002f98 <HAL_GPIO_Init+0x28c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	f200 80d0 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002e8a:	4a45      	ldr	r2, [pc, #276]	@ (8002fa0 <HAL_GPIO_Init+0x294>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f000 80a2 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
 8002e92:	4a43      	ldr	r2, [pc, #268]	@ (8002fa0 <HAL_GPIO_Init+0x294>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	f200 80c8 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	d82c      	bhi.n	8002ef8 <HAL_GPIO_Init+0x1ec>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	f200 80c3 	bhi.w	800302a <HAL_GPIO_Init+0x31e>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_GPIO_Init+0x1a0>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002fd7 	.word	0x08002fd7
 8002eb0:	08002f01 	.word	0x08002f01
 8002eb4:	08002f53 	.word	0x08002f53
 8002eb8:	08003025 	.word	0x08003025
 8002ebc:	0800302b 	.word	0x0800302b
 8002ec0:	0800302b 	.word	0x0800302b
 8002ec4:	0800302b 	.word	0x0800302b
 8002ec8:	0800302b 	.word	0x0800302b
 8002ecc:	0800302b 	.word	0x0800302b
 8002ed0:	0800302b 	.word	0x0800302b
 8002ed4:	0800302b 	.word	0x0800302b
 8002ed8:	0800302b 	.word	0x0800302b
 8002edc:	0800302b 	.word	0x0800302b
 8002ee0:	0800302b 	.word	0x0800302b
 8002ee4:	0800302b 	.word	0x0800302b
 8002ee8:	0800302b 	.word	0x0800302b
 8002eec:	0800302b 	.word	0x0800302b
 8002ef0:	08002f29 	.word	0x08002f29
 8002ef4:	08002fad 	.word	0x08002fad
 8002ef8:	4a26      	ldr	r2, [pc, #152]	@ (8002f94 <HAL_GPIO_Init+0x288>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d06b      	beq.n	8002fd6 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efe:	e094      	b.n	800302a <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d00b      	beq.n	8002f20 <HAL_GPIO_Init+0x214>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <HAL_GPIO_Init+0x214>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x214>
 8002f18:	21d5      	movs	r1, #213	@ 0xd5
 8002f1a:	481d      	ldr	r0, [pc, #116]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002f1c:	f7fd ff8c 	bl	8000e38 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	623b      	str	r3, [r7, #32]
          break;
 8002f26:	e081      	b.n	800302c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d00b      	beq.n	8002f48 <HAL_GPIO_Init+0x23c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d007      	beq.n	8002f48 <HAL_GPIO_Init+0x23c>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x23c>
 8002f40:	21dc      	movs	r1, #220	@ 0xdc
 8002f42:	4813      	ldr	r0, [pc, #76]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002f44:	f7fd ff78 	bl	8000e38 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	e06c      	b.n	800302c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d00b      	beq.n	8002f72 <HAL_GPIO_Init+0x266>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d007      	beq.n	8002f72 <HAL_GPIO_Init+0x266>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x266>
 8002f6a:	21e3      	movs	r1, #227	@ 0xe3
 8002f6c:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <HAL_GPIO_Init+0x284>)
 8002f6e:	f7fd ff63 	bl	8000e38 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	3308      	adds	r3, #8
 8002f78:	623b      	str	r3, [r7, #32]
          break;
 8002f7a:	e057      	b.n	800302c <HAL_GPIO_Init+0x320>
 8002f7c:	40010800 	.word	0x40010800
 8002f80:	40010c00 	.word	0x40010c00
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	40011800 	.word	0x40011800
 8002f90:	08007e28 	.word	0x08007e28
 8002f94:	10110000 	.word	0x10110000
 8002f98:	10210000 	.word	0x10210000
 8002f9c:	10310000 	.word	0x10310000
 8002fa0:	10120000 	.word	0x10120000
 8002fa4:	10220000 	.word	0x10220000
 8002fa8:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00b      	beq.n	8002fcc <HAL_GPIO_Init+0x2c0>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_Init+0x2c0>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2c0>
 8002fc4:	21ea      	movs	r1, #234	@ 0xea
 8002fc6:	4880      	ldr	r0, [pc, #512]	@ (80031c8 <HAL_GPIO_Init+0x4bc>)
 8002fc8:	f7fd ff36 	bl	8000e38 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	623b      	str	r3, [r7, #32]
          break;
 8002fd4:	e02a      	b.n	800302c <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_GPIO_Init+0x2ea>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x2ea>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2ea>
 8002fee:	21f7      	movs	r1, #247	@ 0xf7
 8002ff0:	4875      	ldr	r0, [pc, #468]	@ (80031c8 <HAL_GPIO_Init+0x4bc>)
 8002ff2:	f7fd ff21 	bl	8000e38 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffe:	2304      	movs	r3, #4
 8003000:	623b      	str	r3, [r7, #32]
          break;
 8003002:	e013      	b.n	800302c <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800300c:	2308      	movs	r3, #8
 800300e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	611a      	str	r2, [r3, #16]
          break;
 8003016:	e009      	b.n	800302c <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	615a      	str	r2, [r3, #20]
          break;
 8003022:	e003      	b.n	800302c <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	e000      	b.n	800302c <HAL_GPIO_Init+0x320>
          break;
 800302a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2bff      	cmp	r3, #255	@ 0xff
 8003030:	d801      	bhi.n	8003036 <HAL_GPIO_Init+0x32a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	e001      	b.n	800303a <HAL_GPIO_Init+0x32e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2bff      	cmp	r3, #255	@ 0xff
 8003040:	d802      	bhi.n	8003048 <HAL_GPIO_Init+0x33c>
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	e002      	b.n	800304e <HAL_GPIO_Init+0x342>
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	3b08      	subs	r3, #8
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	210f      	movs	r1, #15
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8096 	beq.w	80031a8 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800307c:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <HAL_GPIO_Init+0x4c0>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_GPIO_Init+0x4c0>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6193      	str	r3, [r2, #24]
 8003088:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <HAL_GPIO_Init+0x4c0>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003094:	4a4e      	ldr	r2, [pc, #312]	@ (80031d0 <HAL_GPIO_Init+0x4c4>)
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a46      	ldr	r2, [pc, #280]	@ (80031d4 <HAL_GPIO_Init+0x4c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_GPIO_Init+0x3dc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a45      	ldr	r2, [pc, #276]	@ (80031d8 <HAL_GPIO_Init+0x4cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00d      	beq.n	80030e4 <HAL_GPIO_Init+0x3d8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a44      	ldr	r2, [pc, #272]	@ (80031dc <HAL_GPIO_Init+0x4d0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <HAL_GPIO_Init+0x3d4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a43      	ldr	r2, [pc, #268]	@ (80031e0 <HAL_GPIO_Init+0x4d4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_GPIO_Init+0x3d0>
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x3de>
 80030dc:	2304      	movs	r3, #4
 80030de:	e004      	b.n	80030ea <HAL_GPIO_Init+0x3de>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e002      	b.n	80030ea <HAL_GPIO_Init+0x3de>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_GPIO_Init+0x3de>
 80030e8:	2300      	movs	r3, #0
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	0092      	lsls	r2, r2, #2
 80030f2:	4093      	lsls	r3, r2
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030fa:	4935      	ldr	r1, [pc, #212]	@ (80031d0 <HAL_GPIO_Init+0x4c4>)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003114:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4932      	ldr	r1, [pc, #200]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003122:	4b30      	ldr	r3, [pc, #192]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	492e      	ldr	r1, [pc, #184]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800312c:	4013      	ands	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4928      	ldr	r1, [pc, #160]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800314a:	4b26      	ldr	r3, [pc, #152]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	43db      	mvns	r3, r3
 8003152:	4924      	ldr	r1, [pc, #144]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003154:	4013      	ands	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	491e      	ldr	r1, [pc, #120]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	43db      	mvns	r3, r3
 800317a:	491a      	ldr	r1, [pc, #104]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800317c:	4013      	ands	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800318c:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4914      	ldr	r1, [pc, #80]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800319a:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	4910      	ldr	r1, [pc, #64]	@ (80031e4 <HAL_GPIO_Init+0x4d8>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	3301      	adds	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f ae1d 	bne.w	8002df8 <HAL_GPIO_Init+0xec>
  }
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	3728      	adds	r7, #40	@ 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	08007e28 	.word	0x08007e28
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010800 	.word	0x40010800
 80031d8:	40010c00 	.word	0x40010c00
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	40010400 	.word	0x40010400

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
 80031f4:	4613      	mov	r3, r2
 80031f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <HAL_GPIO_WritePin+0x20>
 80031fe:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8003202:	480e      	ldr	r0, [pc, #56]	@ (800323c <HAL_GPIO_WritePin+0x54>)
 8003204:	f7fd fe18 	bl	8000e38 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_GPIO_WritePin+0x36>
 800320e:	787b      	ldrb	r3, [r7, #1]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d004      	beq.n	800321e <HAL_GPIO_WritePin+0x36>
 8003214:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8003218:	4808      	ldr	r0, [pc, #32]	@ (800323c <HAL_GPIO_WritePin+0x54>)
 800321a:	f7fd fe0d 	bl	8000e38 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800321e:	787b      	ldrb	r3, [r7, #1]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003224:	887a      	ldrh	r2, [r7, #2]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800322a:	e003      	b.n	8003234 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	041a      	lsls	r2, r3, #16
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	08007e28 	.word	0x08007e28

08003240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_GPIO_TogglePin+0x1c>
 8003252:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8003256:	480a      	ldr	r0, [pc, #40]	@ (8003280 <HAL_GPIO_TogglePin+0x40>)
 8003258:	f7fd fdee 	bl	8000e38 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	041a      	lsls	r2, r3, #16
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43d9      	mvns	r1, r3
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	400b      	ands	r3, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	611a      	str	r2, [r3, #16]
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	08007e28 	.word	0x08007e28

08003284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329a:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fb06 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1b4      	b.n	8003630 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a9b      	ldr	r2, [pc, #620]	@ (8003538 <HAL_I2C_Init+0x284>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_I2C_Init+0x30>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a99      	ldr	r2, [pc, #612]	@ (800353c <HAL_I2C_Init+0x288>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_I2C_Init+0x30>
 80032da:	f240 11db 	movw	r1, #475	@ 0x1db
 80032de:	4898      	ldr	r0, [pc, #608]	@ (8003540 <HAL_I2C_Init+0x28c>)
 80032e0:	f7fd fdaa 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <HAL_I2C_Init+0x42>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a94      	ldr	r2, [pc, #592]	@ (8003544 <HAL_I2C_Init+0x290>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d904      	bls.n	8003300 <HAL_I2C_Init+0x4c>
 80032f6:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80032fa:	4891      	ldr	r0, [pc, #580]	@ (8003540 <HAL_I2C_Init+0x28c>)
 80032fc:	f7fd fd9c 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_I2C_Init+0x68>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003310:	d004      	beq.n	800331c <HAL_I2C_Init+0x68>
 8003312:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8003316:	488a      	ldr	r0, [pc, #552]	@ (8003540 <HAL_I2C_Init+0x28c>)
 8003318:	f7fd fd8e 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d304      	bcc.n	8003330 <HAL_I2C_Init+0x7c>
 8003326:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800332a:	4885      	ldr	r0, [pc, #532]	@ (8003540 <HAL_I2C_Init+0x28c>)
 800332c:	f7fd fd84 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003338:	d009      	beq.n	800334e <HAL_I2C_Init+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003342:	d004      	beq.n	800334e <HAL_I2C_Init+0x9a>
 8003344:	f240 11df 	movw	r1, #479	@ 0x1df
 8003348:	487d      	ldr	r0, [pc, #500]	@ (8003540 <HAL_I2C_Init+0x28c>)
 800334a:	f7fd fd75 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_I2C_Init+0xb4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d004      	beq.n	8003368 <HAL_I2C_Init+0xb4>
 800335e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003362:	4877      	ldr	r0, [pc, #476]	@ (8003540 <HAL_I2C_Init+0x28c>)
 8003364:	f7fd fd68 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_I2C_Init+0xca>
 8003374:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8003378:	4871      	ldr	r0, [pc, #452]	@ (8003540 <HAL_I2C_Init+0x28c>)
 800337a:	f7fd fd5d 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_I2C_Init+0xe4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d004      	beq.n	8003398 <HAL_I2C_Init+0xe4>
 800338e:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8003392:	486b      	ldr	r0, [pc, #428]	@ (8003540 <HAL_I2C_Init+0x28c>)
 8003394:	f7fd fd50 	bl	8000e38 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_I2C_Init+0xfe>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2b80      	cmp	r3, #128	@ 0x80
 80033a6:	d004      	beq.n	80033b2 <HAL_I2C_Init+0xfe>
 80033a8:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80033ac:	4864      	ldr	r0, [pc, #400]	@ (8003540 <HAL_I2C_Init+0x28c>)
 80033ae:	f7fd fd43 	bl	8000e38 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fa22 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	@ 0x24
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003404:	f001 f9f4 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a4e      	ldr	r2, [pc, #312]	@ (8003548 <HAL_I2C_Init+0x294>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d807      	bhi.n	8003424 <HAL_I2C_Init+0x170>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a4d      	ldr	r2, [pc, #308]	@ (800354c <HAL_I2C_Init+0x298>)
 8003418:	4293      	cmp	r3, r2
 800341a:	bf94      	ite	ls
 800341c:	2301      	movls	r3, #1
 800341e:	2300      	movhi	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e006      	b.n	8003432 <HAL_I2C_Init+0x17e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a4a      	ldr	r2, [pc, #296]	@ (8003550 <HAL_I2C_Init+0x29c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	bf94      	ite	ls
 800342c:	2301      	movls	r3, #1
 800342e:	2300      	movhi	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0fa      	b.n	8003630 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a45      	ldr	r2, [pc, #276]	@ (8003554 <HAL_I2C_Init+0x2a0>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0c9b      	lsrs	r3, r3, #18
 8003444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a37      	ldr	r2, [pc, #220]	@ (8003548 <HAL_I2C_Init+0x294>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d802      	bhi.n	8003474 <HAL_I2C_Init+0x1c0>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3301      	adds	r3, #1
 8003472:	e009      	b.n	8003488 <HAL_I2C_Init+0x1d4>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	4a36      	ldr	r2, [pc, #216]	@ (8003558 <HAL_I2C_Init+0x2a4>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	3301      	adds	r3, #1
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	430b      	orrs	r3, r1
 800348e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800349a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4929      	ldr	r1, [pc, #164]	@ (8003548 <HAL_I2C_Init+0x294>)
 80034a4:	428b      	cmp	r3, r1
 80034a6:	d819      	bhi.n	80034dc <HAL_I2C_Init+0x228>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e59      	subs	r1, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034bc:	400b      	ands	r3, r1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_I2C_Init+0x224>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1e59      	subs	r1, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d6:	e064      	b.n	80035a2 <HAL_I2C_Init+0x2ee>
 80034d8:	2304      	movs	r3, #4
 80034da:	e062      	b.n	80035a2 <HAL_I2C_Init+0x2ee>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <HAL_I2C_Init+0x254>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e012      	b.n	800352e <HAL_I2C_Init+0x27a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e58      	subs	r0, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d014      	beq.n	800355c <HAL_I2C_Init+0x2a8>
 8003532:	2301      	movs	r3, #1
 8003534:	e035      	b.n	80035a2 <HAL_I2C_Init+0x2ee>
 8003536:	bf00      	nop
 8003538:	40005400 	.word	0x40005400
 800353c:	40005800 	.word	0x40005800
 8003540:	08007e64 	.word	0x08007e64
 8003544:	00061a80 	.word	0x00061a80
 8003548:	000186a0 	.word	0x000186a0
 800354c:	001e847f 	.word	0x001e847f
 8003550:	003d08ff 	.word	0x003d08ff
 8003554:	431bde83 	.word	0x431bde83
 8003558:	10624dd3 	.word	0x10624dd3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10e      	bne.n	8003582 <HAL_I2C_Init+0x2ce>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003580:	e00f      	b.n	80035a2 <HAL_I2C_Init+0x2ee>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e58      	subs	r0, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	0099      	lsls	r1, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	fbb0 f3f3 	udiv	r3, r0, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	6809      	ldr	r1, [r1, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035d0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6911      	ldr	r1, [r2, #16]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68d2      	ldr	r2, [r2, #12]
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003652:	f7fe fe9b 	bl	800238c <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d007      	beq.n	800366e <HAL_I2C_Mem_Write+0x36>
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d004      	beq.n	800366e <HAL_I2C_Mem_Write+0x36>
 8003664:	f640 2106 	movw	r1, #2566	@ 0xa06
 8003668:	4873      	ldr	r0, [pc, #460]	@ (8003838 <HAL_I2C_Mem_Write+0x200>)
 800366a:	f7fd fbe5 	bl	8000e38 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 80d9 	bne.w	800382e <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	496d      	ldr	r1, [pc, #436]	@ (800383c <HAL_I2C_Mem_Write+0x204>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f972 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
 8003694:	e0cc      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x6c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0c5      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d007      	beq.n	80036ca <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2221      	movs	r2, #33	@ 0x21
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2240      	movs	r2, #64	@ 0x40
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a4d      	ldr	r2, [pc, #308]	@ (8003840 <HAL_I2C_Mem_Write+0x208>)
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800370c:	88f8      	ldrh	r0, [r7, #6]
 800370e:	893a      	ldrh	r2, [r7, #8]
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4603      	mov	r3, r0
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f891 	bl	8003844 <I2C_RequestMemoryWrite>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d052      	beq.n	80037ce <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e081      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fa37 	bl	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b04      	cmp	r3, #4
 8003742:	d107      	bne.n	8003754 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e06b      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d11b      	bne.n	80037ce <HAL_I2C_Mem_Write+0x196>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1aa      	bne.n	800372c <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa2a 	bl	8003c34 <I2C_WaitOnBTFFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d107      	bne.n	80037fe <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e016      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	08007e64 	.word	0x08007e64
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000

08003844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800386c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2200      	movs	r2, #0
 8003876:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f878 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003894:	d103      	bne.n	800389e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e05f      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	492d      	ldr	r1, [pc, #180]	@ (800396c <I2C_RequestMemoryWrite+0x128>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f8d3 	bl	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04c      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f95e 	bl	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02b      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e021      	b.n	8003960 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f938 	bl	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e005      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	00010002 	.word	0x00010002

08003970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003980:	e048      	b.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d044      	beq.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fcff 	bl	800238c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d139      	bne.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10d      	bne.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	e00c      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d116      	bne.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e023      	b.n	8003a5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10d      	bne.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	43da      	mvns	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	e00c      	b.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d093      	beq.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a72:	e071      	b.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a82:	d123      	bne.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e067      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d041      	beq.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	f7fe fc5a 	bl	800238c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d136      	bne.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10c      	bne.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e00b      	b.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e021      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10c      	bne.n	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e00b      	b.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f af6d 	bne.w	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb0:	e034      	b.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f886 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d028      	beq.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fbdf 	bl	800238c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bea:	2b80      	cmp	r3, #128	@ 0x80
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d1c3      	bne.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c40:	e034      	b.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f83e 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e034      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d028      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fe fb97 	bl	800238c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11d      	bne.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d016      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d1c3      	bne.n	8003c42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cda:	d11b      	bne.n	8003d14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	420e0020 	.word	0x420e0020

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e35a      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x54>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <HAL_RCC_OscConfig+0x54>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d110      	bne.n	8003d8c <HAL_RCC_OscConfig+0x54>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_RCC_OscConfig+0x54>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <HAL_RCC_OscConfig+0x54>
 8003d82:	f240 1165 	movw	r1, #357	@ 0x165
 8003d86:	488f      	ldr	r0, [pc, #572]	@ (8003fc4 <HAL_RCC_OscConfig+0x28c>)
 8003d88:	f7fd f856 	bl	8000e38 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 809a 	beq.w	8003ece <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x88>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003daa:	d009      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x88>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d004      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x88>
 8003db6:	f240 116b 	movw	r1, #363	@ 0x16b
 8003dba:	4882      	ldr	r0, [pc, #520]	@ (8003fc4 <HAL_RCC_OscConfig+0x28c>)
 8003dbc:	f7fd f83c 	bl	8000e38 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc0:	4b81      	ldr	r3, [pc, #516]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00c      	beq.n	8003de6 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d112      	bne.n	8003dfe <HAL_RCC_OscConfig+0xc6>
 8003dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	4b78      	ldr	r3, [pc, #480]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d168      	bne.n	8003ecc <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e300      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0xde>
 8003e08:	4b6f      	ldr	r3, [pc, #444]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0x13c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x100>
 8003e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a69      	ldr	r2, [pc, #420]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b67      	ldr	r3, [pc, #412]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a66      	ldr	r2, [pc, #408]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0x13c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x124>
 8003e42:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a60      	ldr	r2, [pc, #384]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0x13c>
 8003e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a59      	ldr	r2, [pc, #356]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b57      	ldr	r3, [pc, #348]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a56      	ldr	r2, [pc, #344]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fa86 	bl	800238c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fa82 	bl	800238c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e2b4      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x14c>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fa72 	bl	800238c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fa6e 	bl	800238c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e2a0      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b42      	ldr	r3, [pc, #264]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x174>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8080 	beq.w	8003fdc <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1be>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d004      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1be>
 8003eec:	f240 119f 	movw	r1, #415	@ 0x19f
 8003ef0:	4834      	ldr	r0, [pc, #208]	@ (8003fc4 <HAL_RCC_OscConfig+0x28c>)
 8003ef2:	f7fc ffa1 	bl	8000e38 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b1f      	cmp	r3, #31
 8003efc:	d904      	bls.n	8003f08 <HAL_RCC_OscConfig+0x1d0>
 8003efe:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8003f02:	4830      	ldr	r0, [pc, #192]	@ (8003fc4 <HAL_RCC_OscConfig+0x28c>)
 8003f04:	f7fc ff98 	bl	8000e38 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f08:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f14:	4b2c      	ldr	r3, [pc, #176]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d11c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x222>
 8003f20:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2c:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x20c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e25d      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	4b20      	ldr	r3, [pc, #128]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	491d      	ldr	r1, [pc, #116]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f58:	e040      	b.n	8003fdc <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d020      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f62:	4b1a      	ldr	r3, [pc, #104]	@ (8003fcc <HAL_RCC_OscConfig+0x294>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fa10 	bl	800238c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fe fa0c 	bl	800238c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e23e      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490a      	ldr	r1, [pc, #40]	@ (8003fc8 <HAL_RCC_OscConfig+0x290>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	e01b      	b.n	8003fdc <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_OscConfig+0x294>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fe f9ef 	bl	800238c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb0:	e00e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f9eb 	bl	800238c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d907      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e21d      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
 8003fc4:	08007e9c 	.word	0x08007e9c
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd0:	4b7d      	ldr	r3, [pc, #500]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ea      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d040      	beq.n	800406a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_OscConfig+0x2ca>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d004      	beq.n	8004002 <HAL_RCC_OscConfig+0x2ca>
 8003ff8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003ffc:	4873      	ldr	r0, [pc, #460]	@ (80041cc <HAL_RCC_OscConfig+0x494>)
 8003ffe:	f7fc ff1b 	bl	8000e38 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b71      	ldr	r3, [pc, #452]	@ (80041d0 <HAL_RCC_OscConfig+0x498>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fe f9bc 	bl	800238c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fe f9b8 	bl	800238c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1ea      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b67      	ldr	r3, [pc, #412]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004036:	2001      	movs	r0, #1
 8004038:	f000 fc02 	bl	8004840 <RCC_Delay>
 800403c:	e015      	b.n	800406a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	4b64      	ldr	r3, [pc, #400]	@ (80041d0 <HAL_RCC_OscConfig+0x498>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7fe f9a2 	bl	800238c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404c:	f7fe f99e 	bl	800238c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1d0      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405e:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80bf 	beq.w	80041f6 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_RCC_OscConfig+0x366>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d008      	beq.n	800409e <HAL_RCC_OscConfig+0x366>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d004      	beq.n	800409e <HAL_RCC_OscConfig+0x366>
 8004094:	f240 210f 	movw	r1, #527	@ 0x20f
 8004098:	484c      	ldr	r0, [pc, #304]	@ (80041cc <HAL_RCC_OscConfig+0x494>)
 800409a:	f7fc fecd 	bl	8000e38 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b47      	ldr	r3, [pc, #284]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a46      	ldr	r2, [pc, #280]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b44      	ldr	r3, [pc, #272]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b43      	ldr	r3, [pc, #268]	@ (80041d4 <HAL_RCC_OscConfig+0x49c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <HAL_RCC_OscConfig+0x49c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3f      	ldr	r2, [pc, #252]	@ (80041d4 <HAL_RCC_OscConfig+0x49c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fe f955 	bl	800238c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fe f951 	bl	800238c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	@ 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e183      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b36      	ldr	r3, [pc, #216]	@ (80041d4 <HAL_RCC_OscConfig+0x49c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x3e2>
 800410c:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4a2d      	ldr	r2, [pc, #180]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6213      	str	r3, [r2, #32]
 8004118:	e02d      	b.n	8004176 <HAL_RCC_OscConfig+0x43e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x404>
 8004122:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a28      	ldr	r2, [pc, #160]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6213      	str	r3, [r2, #32]
 800412e:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4a25      	ldr	r2, [pc, #148]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	6213      	str	r3, [r2, #32]
 800413a:	e01c      	b.n	8004176 <HAL_RCC_OscConfig+0x43e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d10c      	bne.n	800415e <HAL_RCC_OscConfig+0x426>
 8004144:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a1f      	ldr	r2, [pc, #124]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6213      	str	r3, [r2, #32]
 800415c:	e00b      	b.n	8004176 <HAL_RCC_OscConfig+0x43e>
 800415e:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a19      	ldr	r2, [pc, #100]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6213      	str	r3, [r2, #32]
 800416a:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d015      	beq.n	80041aa <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fe f905 	bl	800238c <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fe f901 	bl	800238c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e131      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <HAL_RCC_OscConfig+0x490>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ee      	beq.n	8004186 <HAL_RCC_OscConfig+0x44e>
 80041a8:	e01c      	b.n	80041e4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe f8ef 	bl	800238c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	e012      	b.n	80041d8 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fe f8eb 	bl	800238c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d909      	bls.n	80041d8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e11b      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
 80041c8:	40021000 	.word	0x40021000
 80041cc:	08007e9c 	.word	0x08007e9c
 80041d0:	42420480 	.word	0x42420480
 80041d4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	4b8b      	ldr	r3, [pc, #556]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e6      	bne.n	80041b2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ea:	4b87      	ldr	r3, [pc, #540]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4a86      	ldr	r2, [pc, #536]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 80041f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_RCC_OscConfig+0x4e0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d008      	beq.n	8004218 <HAL_RCC_OscConfig+0x4e0>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d004      	beq.n	8004218 <HAL_RCC_OscConfig+0x4e0>
 800420e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8004212:	487e      	ldr	r0, [pc, #504]	@ (800440c <HAL_RCC_OscConfig+0x6d4>)
 8004214:	f7fc fe10 	bl	8000e38 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80ee 	beq.w	80043fe <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004222:	4b79      	ldr	r3, [pc, #484]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	f000 80ce 	beq.w	80043cc <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b02      	cmp	r3, #2
 8004236:	f040 80b2 	bne.w	800439e <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_OscConfig+0x51e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424a:	d004      	beq.n	8004256 <HAL_RCC_OscConfig+0x51e>
 800424c:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004250:	486e      	ldr	r0, [pc, #440]	@ (800440c <HAL_RCC_OscConfig+0x6d4>)
 8004252:	f7fc fdf1 	bl	8000e38 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d04a      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004266:	d045      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004270:	d040      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800427a:	d03b      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800428e:	d031      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004298:	d02c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80042a2:	d027      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ac:	d022      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80042b6:	d01d      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80042c0:	d018      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042d4:	d00e      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80042de:	d009      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80042e8:	d004      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5bc>
 80042ea:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80042ee:	4847      	ldr	r0, [pc, #284]	@ (800440c <HAL_RCC_OscConfig+0x6d4>)
 80042f0:	f7fc fda2 	bl	8000e38 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCC_OscConfig+0x6d8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fe f847 	bl	800238c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fe f843 	bl	800238c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e075      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004314:	4b3c      	ldr	r3, [pc, #240]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004328:	d116      	bne.n	8004358 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_OscConfig+0x60e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433a:	d004      	beq.n	8004346 <HAL_RCC_OscConfig+0x60e>
 800433c:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8004340:	4832      	ldr	r0, [pc, #200]	@ (800440c <HAL_RCC_OscConfig+0x6d4>)
 8004342:	f7fc fd79 	bl	8000e38 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004346:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	492d      	ldr	r1, [pc, #180]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b2b      	ldr	r3, [pc, #172]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a19      	ldr	r1, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	430b      	orrs	r3, r1
 800436a:	4927      	ldr	r1, [pc, #156]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b27      	ldr	r3, [pc, #156]	@ (8004410 <HAL_RCC_OscConfig+0x6d8>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fe f809 	bl	800238c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fe f805 	bl	800238c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e037      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004390:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x646>
 800439c:	e02f      	b.n	80043fe <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <HAL_RCC_OscConfig+0x6d8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fff2 	bl	800238c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd ffee 	bl	800238c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e020      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x674>
 80043ca:	e018      	b.n	80043fe <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e013      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_OscConfig+0x6d0>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	08007e9c 	.word	0x08007e9c
 8004410:	42420060 	.word	0x42420060

08004414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e176      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d116      	bne.n	8004462 <HAL_RCC_ClockConfig+0x4e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d110      	bne.n	8004462 <HAL_RCC_ClockConfig+0x4e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <HAL_RCC_ClockConfig+0x4e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_RCC_ClockConfig+0x4e>
 8004458:	f240 3136 	movw	r1, #822	@ 0x336
 800445c:	4874      	ldr	r0, [pc, #464]	@ (8004630 <HAL_RCC_ClockConfig+0x21c>)
 800445e:	f7fc fceb 	bl	8000e38 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCC_ClockConfig+0x6a>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d007      	beq.n	800447e <HAL_RCC_ClockConfig+0x6a>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d004      	beq.n	800447e <HAL_RCC_ClockConfig+0x6a>
 8004474:	f240 3137 	movw	r1, #823	@ 0x337
 8004478:	486d      	ldr	r0, [pc, #436]	@ (8004630 <HAL_RCC_ClockConfig+0x21c>)
 800447a:	f7fc fcdd 	bl	8000e38 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800447e:	4b6d      	ldr	r3, [pc, #436]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d910      	bls.n	80044ae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448c:	4b69      	ldr	r3, [pc, #420]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	4967      	ldr	r1, [pc, #412]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449c:	4b65      	ldr	r3, [pc, #404]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e133      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d049      	beq.n	800454e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80044cc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044d0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044de:	4b56      	ldr	r3, [pc, #344]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a55      	ldr	r2, [pc, #340]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80044e4:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044e8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d024      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b80      	cmp	r3, #128	@ 0x80
 80044f8:	d020      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b90      	cmp	r3, #144	@ 0x90
 8004500:	d01c      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2ba0      	cmp	r3, #160	@ 0xa0
 8004508:	d018      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004510:	d014      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2bc0      	cmp	r3, #192	@ 0xc0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2bd0      	cmp	r3, #208	@ 0xd0
 8004520:	d00c      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2be0      	cmp	r3, #224	@ 0xe0
 8004528:	d008      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004530:	d004      	beq.n	800453c <HAL_RCC_ClockConfig+0x128>
 8004532:	f240 315d 	movw	r1, #861	@ 0x35d
 8004536:	483e      	ldr	r0, [pc, #248]	@ (8004630 <HAL_RCC_ClockConfig+0x21c>)
 8004538:	f7fc fc7e 	bl	8000e38 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b3e      	ldr	r3, [pc, #248]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	493b      	ldr	r1, [pc, #236]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d051      	beq.n	80045fe <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_RCC_ClockConfig+0x168>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d008      	beq.n	800457c <HAL_RCC_ClockConfig+0x168>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d004      	beq.n	800457c <HAL_RCC_ClockConfig+0x168>
 8004572:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8004576:	482e      	ldr	r0, [pc, #184]	@ (8004630 <HAL_RCC_ClockConfig+0x21c>)
 8004578:	f7fc fc5e 	bl	8000e38 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004584:	4b2c      	ldr	r3, [pc, #176]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d115      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0c0      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b26      	ldr	r3, [pc, #152]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b4      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0ac      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 0203 	bic.w	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	491b      	ldr	r1, [pc, #108]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ce:	f7fd fedd 	bl	800238c <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7fd fed9 	bl	800238c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e094      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <HAL_RCC_ClockConfig+0x224>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 020c 	and.w	r2, r3, #12
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d1eb      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d217      	bcs.n	800463c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460c:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 0207 	bic.w	r2, r3, #7
 8004614:	4907      	ldr	r1, [pc, #28]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_ClockConfig+0x220>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d008      	beq.n	800463c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e073      	b.n	8004716 <HAL_RCC_ClockConfig+0x302>
 800462e:	bf00      	nop
 8004630:	08007e9c 	.word	0x08007e9c
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d025      	beq.n	8004694 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <HAL_RCC_ClockConfig+0x26e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004658:	d013      	beq.n	8004682 <HAL_RCC_ClockConfig+0x26e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004662:	d00e      	beq.n	8004682 <HAL_RCC_ClockConfig+0x26e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x26e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004676:	d004      	beq.n	8004682 <HAL_RCC_ClockConfig+0x26e>
 8004678:	f240 31a2 	movw	r1, #930	@ 0x3a2
 800467c:	4828      	ldr	r0, [pc, #160]	@ (8004720 <HAL_RCC_ClockConfig+0x30c>)
 800467e:	f7fc fbdb 	bl	8000e38 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004682:	4b28      	ldr	r3, [pc, #160]	@ (8004724 <HAL_RCC_ClockConfig+0x310>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4925      	ldr	r1, [pc, #148]	@ (8004724 <HAL_RCC_ClockConfig+0x310>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d026      	beq.n	80046ee <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d018      	beq.n	80046da <HAL_RCC_ClockConfig+0x2c6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b0:	d013      	beq.n	80046da <HAL_RCC_ClockConfig+0x2c6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80046ba:	d00e      	beq.n	80046da <HAL_RCC_ClockConfig+0x2c6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046c4:	d009      	beq.n	80046da <HAL_RCC_ClockConfig+0x2c6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046ce:	d004      	beq.n	80046da <HAL_RCC_ClockConfig+0x2c6>
 80046d0:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80046d4:	4812      	ldr	r0, [pc, #72]	@ (8004720 <HAL_RCC_ClockConfig+0x30c>)
 80046d6:	f7fc fbaf 	bl	8000e38 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046da:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <HAL_RCC_ClockConfig+0x310>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	@ (8004724 <HAL_RCC_ClockConfig+0x310>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_ClockConfig+0x310>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	@ (8004728 <HAL_RCC_ClockConfig+0x314>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	@ (800472c <HAL_RCC_ClockConfig+0x318>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_ClockConfig+0x31c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fdfa 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	08007e9c 	.word	0x08007e9c
 8004724:	40021000 	.word	0x40021000
 8004728:	080086f0 	.word	0x080086f0
 800472c:	20000238 	.word	0x20000238
 8004730:	2000023c 	.word	0x2000023c

08004734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800474e:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b04      	cmp	r3, #4
 800475c:	d002      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x30>
 800475e:	2b08      	cmp	r3, #8
 8004760:	d003      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x36>
 8004762:	e027      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004764:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004766:	613b      	str	r3, [r7, #16]
      break;
 8004768:	e027      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004774:	5cd3      	ldrb	r3, [r2, r3]
 8004776:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004782:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	0c5b      	lsrs	r3, r3, #17
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	4a11      	ldr	r2, [pc, #68]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0d      	ldr	r2, [pc, #52]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004796:	fb03 f202 	mul.w	r2, r3, r2
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e004      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0c      	ldr	r2, [pc, #48]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	613b      	str	r3, [r7, #16]
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 80047b6:	613b      	str	r3, [r7, #16]
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	693b      	ldr	r3, [r7, #16]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	007a1200 	.word	0x007a1200
 80047d0:	08008708 	.word	0x08008708
 80047d4:	08008718 	.word	0x08008718
 80047d8:	003d0900 	.word	0x003d0900

080047dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b02      	ldr	r3, [pc, #8]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x10>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	20000238 	.word	0x20000238

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff2 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	@ (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	08008700 	.word	0x08008700

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffde 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	0adb      	lsrs	r3, r3, #11
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	@ (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08008700 	.word	0x08008700

08004840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <RCC_Delay+0x34>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <RCC_Delay+0x38>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0a5b      	lsrs	r3, r3, #9
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800485c:	bf00      	nop
  }
  while (Delay --);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e5a      	subs	r2, r3, #1
 8004862:	60fa      	str	r2, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f9      	bne.n	800485c <RCC_Delay+0x1c>
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	20000238 	.word	0x20000238
 8004878:	10624dd3 	.word	0x10624dd3

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80048b0:	216a      	movs	r1, #106	@ 0x6a
 80048b2:	4873      	ldr	r0, [pc, #460]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80048b4:	f7fc fac0 	bl	8000e38 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8095 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	d00d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d008      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048f0:	2172      	movs	r1, #114	@ 0x72
 80048f2:	4863      	ldr	r0, [pc, #396]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80048f4:	f7fc faa0 	bl	8000e38 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f8:	4b62      	ldr	r3, [pc, #392]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	4b5f      	ldr	r3, [pc, #380]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4a5e      	ldr	r2, [pc, #376]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490e:	61d3      	str	r3, [r2, #28]
 8004910:	4b5c      	ldr	r3, [pc, #368]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491c:	2301      	movs	r3, #1
 800491e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d118      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492c:	4b56      	ldr	r3, [pc, #344]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a55      	ldr	r2, [pc, #340]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004938:	f7fd fd28 	bl	800238c <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fd fd24 	bl	800238c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	@ 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e092      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004952:	4b4d      	ldr	r3, [pc, #308]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800495e:	4b49      	ldr	r3, [pc, #292]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004966:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d02e      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x150>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d027      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800497c:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004984:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004986:	4b41      	ldr	r3, [pc, #260]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800498c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004992:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d014      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a2:	f7fd fcf3 	bl	800238c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fd fcef 	bl	800238c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e05b      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c0:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ee      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	492a      	ldr	r1, [pc, #168]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a0c:	d00d      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a20:	d003      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004a22:	21b7      	movs	r1, #183	@ 0xb7
 8004a24:	4816      	ldr	r0, [pc, #88]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004a26:	f7fc fa07 	bl	8000e38 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a2a:	4b16      	ldr	r3, [pc, #88]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4913      	ldr	r1, [pc, #76]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a5a:	f240 1113 	movw	r1, #275	@ 0x113
 8004a5e:	4808      	ldr	r0, [pc, #32]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004a60:	f7fc f9ea 	bl	8000e38 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a64:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4904      	ldr	r1, [pc, #16]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08007ed4 	.word	0x08007ed4
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	42420440 	.word	0x42420440

08004a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8004aca:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8004ace:	484f      	ldr	r0, [pc, #316]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004ad0:	f7fc f9b2 	bl	8000e38 <assert_failed>

  switch (PeriphClk)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	f200 808a 	bhi.w	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d045      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d075      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004aee:	e082      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      temp_reg = RCC->CFGR;
 8004af0:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004af6:	4b46      	ldr	r3, [pc, #280]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d07b      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0c9b      	lsrs	r3, r3, #18
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	4a42      	ldr	r2, [pc, #264]	@ (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004b0c:	5cd3      	ldrb	r3, [r2, r3]
 8004b0e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d015      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	0c5b      	lsrs	r3, r3, #17
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	4a3c      	ldr	r2, [pc, #240]	@ (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8004b26:	5cd3      	ldrb	r3, [r2, r3]
 8004b28:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b34:	4a39      	ldr	r2, [pc, #228]	@ (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e004      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4a35      	ldr	r2, [pc, #212]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b50:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5c:	d102      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	61bb      	str	r3, [r7, #24]
      break;
 8004b62:	e04a      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = (pllclk * 2) / 3;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4a2e      	ldr	r2, [pc, #184]	@ (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
      break;
 8004b72:	e042      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      temp_reg = RCC->BDCR;
 8004b74:	4b26      	ldr	r3, [pc, #152]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b84:	d108      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        frequency = LSE_VALUE;
 8004b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e01f      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        frequency = LSI_VALUE;
 8004bb0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e00f      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc2:	d11c      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d016      	beq.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = HSE_VALUE / 128U;
 8004bd0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004bd4:	61bb      	str	r3, [r7, #24]
      break;
 8004bd6:	e012      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004bd8:	e011      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004bda:	f7ff fe1d 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0b9b      	lsrs	r3, r3, #14
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	61bb      	str	r3, [r7, #24]
      break;
 8004bf4:	e004      	b.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8004bfe:	bf00      	nop
    }
  }
  return (frequency);
 8004c00:	69bb      	ldr	r3, [r7, #24]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	08007ed4 	.word	0x08007ed4
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800871c 	.word	0x0800871c
 8004c18:	0800872c 	.word	0x0800872c
 8004c1c:	007a1200 	.word	0x007a1200
 8004c20:	003d0900 	.word	0x003d0900
 8004c24:	aaaaaaab 	.word	0xaaaaaaab

08004c28 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0aa      	b.n	8004d94 <HAL_RTC_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_RTC_Init+0x174>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_RTC_Init+0x2a>
 8004c48:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004c4c:	4854      	ldr	r0, [pc, #336]	@ (8004da0 <HAL_RTC_Init+0x178>)
 8004c4e:	f7fc f8f3 	bl	8000e38 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d012      	beq.n	8004c80 <HAL_RTC_Init+0x58>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b80      	cmp	r3, #128	@ 0x80
 8004c60:	d00e      	beq.n	8004c80 <HAL_RTC_Init+0x58>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c6a:	d009      	beq.n	8004c80 <HAL_RTC_Init+0x58>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c74:	d004      	beq.n	8004c80 <HAL_RTC_Init+0x58>
 8004c76:	f240 111f 	movw	r1, #287	@ 0x11f
 8004c7a:	4849      	ldr	r0, [pc, #292]	@ (8004da0 <HAL_RTC_Init+0x178>)
 8004c7c:	f7fc f8dc 	bl	8000e38 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c88:	d309      	bcc.n	8004c9e <HAL_RTC_Init+0x76>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d004      	beq.n	8004c9e <HAL_RTC_Init+0x76>
 8004c94:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004c98:	4841      	ldr	r0, [pc, #260]	@ (8004da0 <HAL_RTC_Init+0x178>)
 8004c9a:	f7fc f8cd 	bl	8000e38 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7c5b      	ldrb	r3, [r3, #17]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fbee 	bl	8001490 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fc98 	bl	80055f0 <HAL_RTC_WaitForSynchro>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e061      	b.n	8004d94 <HAL_RTC_Init+0x16c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fd51 	bl	8005778 <RTC_EnterInitMode>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e056      	b.n	8004d94 <HAL_RTC_Init+0x16c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0207 	bic.w	r2, r2, #7
 8004cf4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004cfe:	4b29      	ldr	r3, [pc, #164]	@ (8004da4 <HAL_RTC_Init+0x17c>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	4a28      	ldr	r2, [pc, #160]	@ (8004da4 <HAL_RTC_Init+0x17c>)
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004d0a:	4b26      	ldr	r3, [pc, #152]	@ (8004da4 <HAL_RTC_Init+0x17c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4923      	ldr	r1, [pc, #140]	@ (8004da4 <HAL_RTC_Init+0x17c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d003      	beq.n	8004d2e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e00e      	b.n	8004d4c <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f7ff feae 	bl	8004a90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d34:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e026      	b.n	8004d94 <HAL_RTC_Init+0x16c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	0c1a      	lsrs	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f002 020f 	and.w	r2, r2, #15
 8004d58:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	b292      	uxth	r2, r2
 8004d62:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd2f 	bl	80057c8 <RTC_ExitInitMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2204      	movs	r2, #4
 8004d74:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00c      	b.n	8004d94 <HAL_RTC_Init+0x16c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40002800 	.word	0x40002800
 8004da0:	08007f10 	.word	0x08007f10
 8004da4:	40006c00 	.word	0x40006c00

08004da8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RTC_SetTime+0x20>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cd      	b.n	8004f68 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_RTC_SetTime+0x3a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d004      	beq.n	8004de2 <HAL_RTC_SetTime+0x3a>
 8004dd8:	f240 21cb 	movw	r1, #715	@ 0x2cb
 8004ddc:	4864      	ldr	r0, [pc, #400]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004dde:	f7fc f82b 	bl	8000e38 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	7c1b      	ldrb	r3, [r3, #16]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_RTC_SetTime+0x46>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0bc      	b.n	8004f68 <HAL_RTC_SetTime+0x1c0>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2202      	movs	r2, #2
 8004df8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d12e      	bne.n	8004e5e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b17      	cmp	r3, #23
 8004e06:	d904      	bls.n	8004e12 <HAL_RTC_SetTime+0x6a>
 8004e08:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8004e0c:	4858      	ldr	r0, [pc, #352]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004e0e:	f7fc f813 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	2b3b      	cmp	r3, #59	@ 0x3b
 8004e18:	d904      	bls.n	8004e24 <HAL_RTC_SetTime+0x7c>
 8004e1a:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8004e1e:	4854      	ldr	r0, [pc, #336]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004e20:	f7fc f80a 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	2b3b      	cmp	r3, #59	@ 0x3b
 8004e2a:	d904      	bls.n	8004e36 <HAL_RTC_SetTime+0x8e>
 8004e2c:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8004e30:	484f      	ldr	r0, [pc, #316]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004e32:	f7fc f801 	bl	8000e38 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004e40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a5b      	subs	r3, r3, r1
 8004e50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004e52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004e58:	4413      	add	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e045      	b.n	8004eea <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fcf5 	bl	8005852 <RTC_Bcd2ToByte>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b17      	cmp	r3, #23
 8004e6c:	d904      	bls.n	8004e78 <HAL_RTC_SetTime+0xd0>
 8004e6e:	f240 21de 	movw	r1, #734	@ 0x2de
 8004e72:	483f      	ldr	r0, [pc, #252]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004e74:	f7fb ffe0 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fce8 	bl	8005852 <RTC_Bcd2ToByte>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b3b      	cmp	r3, #59	@ 0x3b
 8004e86:	d904      	bls.n	8004e92 <HAL_RTC_SetTime+0xea>
 8004e88:	f240 21df 	movw	r1, #735	@ 0x2df
 8004e8c:	4838      	ldr	r0, [pc, #224]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004e8e:	f7fb ffd3 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	789b      	ldrb	r3, [r3, #2]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fcdb 	bl	8005852 <RTC_Bcd2ToByte>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8004ea0:	d904      	bls.n	8004eac <HAL_RTC_SetTime+0x104>
 8004ea2:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004ea6:	4832      	ldr	r0, [pc, #200]	@ (8004f70 <HAL_RTC_SetTime+0x1c8>)
 8004ea8:	f7fb ffc6 	bl	8000e38 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fcce 	bl	8005852 <RTC_Bcd2ToByte>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004ebe:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fcc3 	bl	8005852 <RTC_Bcd2ToByte>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004ed8:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	789b      	ldrb	r3, [r3, #2]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fcb7 	bl	8005852 <RTC_Bcd2ToByte>
 8004ee4:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004ee6:	4423      	add	r3, r4
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fbdc 	bl	80056aa <RTC_WriteTimeCounter>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2204      	movs	r2, #4
 8004efc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e02f      	b.n	8004f68 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0205 	bic.w	r2, r2, #5
 8004f16:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fbed 	bl	80056f8 <RTC_ReadAlarmCounter>
 8004f1e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d018      	beq.n	8004f5a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d214      	bcs.n	8004f5a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004f36:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004f3a:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f3c:	6939      	ldr	r1, [r7, #16]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fbf3 	bl	800572a <RTC_WriteAlarmCounter>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e006      	b.n	8004f68 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	08007f10 	.word	0x08007f10

08004f74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_RTC_GetTime+0x28>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0c0      	b.n	8005122 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_RTC_GetTime+0x42>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d004      	beq.n	8004fb6 <HAL_RTC_GetTime+0x42>
 8004fac:	f240 312e 	movw	r1, #814	@ 0x32e
 8004fb0:	485e      	ldr	r0, [pc, #376]	@ (800512c <HAL_RTC_GetTime+0x1b8>)
 8004fb2:	f7fb ff41 	bl	8000e38 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0ac      	b.n	8005122 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fb3e 	bl	800564a <RTC_ReadTimeCounter>
 8004fce:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4a57      	ldr	r2, [pc, #348]	@ (8005130 <HAL_RTC_GetTime+0x1bc>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	0adb      	lsrs	r3, r3, #11
 8004fda:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4b54      	ldr	r3, [pc, #336]	@ (8005130 <HAL_RTC_GetTime+0x1bc>)
 8004fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe4:	0adb      	lsrs	r3, r3, #11
 8004fe6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	4a50      	ldr	r2, [pc, #320]	@ (8005134 <HAL_RTC_GetTime+0x1c0>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4a4b      	ldr	r2, [pc, #300]	@ (8005130 <HAL_RTC_GetTime+0x1bc>)
 8005002:	fba2 1203 	umull	r1, r2, r2, r3
 8005006:	0ad2      	lsrs	r2, r2, #11
 8005008:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800500c:	fb01 f202 	mul.w	r2, r1, r2
 8005010:	1a9a      	subs	r2, r3, r2
 8005012:	4b48      	ldr	r3, [pc, #288]	@ (8005134 <HAL_RTC_GetTime+0x1c0>)
 8005014:	fba3 1302 	umull	r1, r3, r3, r2
 8005018:	0959      	lsrs	r1, r3, #5
 800501a:	460b      	mov	r3, r1
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	1ad1      	subs	r1, r2, r3
 8005024:	b2ca      	uxtb	r2, r1
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b17      	cmp	r3, #23
 800502e:	d955      	bls.n	80050dc <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4a41      	ldr	r2, [pc, #260]	@ (8005138 <HAL_RTC_GetTime+0x1c4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800503c:	6939      	ldr	r1, [r7, #16]
 800503e:	4b3e      	ldr	r3, [pc, #248]	@ (8005138 <HAL_RTC_GetTime+0x1c4>)
 8005040:	fba3 2301 	umull	r2, r3, r3, r1
 8005044:	091a      	lsrs	r2, r3, #4
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1aca      	subs	r2, r1, r3
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fb4e 	bl	80056f8 <RTC_ReadAlarmCounter>
 800505c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d008      	beq.n	8005078 <HAL_RTC_GetTime+0x104>
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	429a      	cmp	r2, r3
 800506c:	d904      	bls.n	8005078 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e002      	b.n	800507e <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
 800507c:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4a2e      	ldr	r2, [pc, #184]	@ (800513c <HAL_RTC_GetTime+0x1c8>)
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fb0b 	bl	80056aa <RTC_WriteTimeCounter>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e041      	b.n	8005122 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d00c      	beq.n	80050c0 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4413      	add	r3, r2
 80050ac:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fb3a 	bl	800572a <RTC_WriteAlarmCounter>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e030      	b.n	8005122 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fb31 	bl	800572a <RTC_WriteAlarmCounter>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e027      	b.n	8005122 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80050d2:	6979      	ldr	r1, [r7, #20]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fbd9 	bl	800588c <RTC_DateUpdate>
 80050da:	e003      	b.n	80050e4 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb92 	bl	8005818 <RTC_ByteToBcd2>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fb89 	bl	8005818 <RTC_ByteToBcd2>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	789b      	ldrb	r3, [r3, #2]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb80 	bl	8005818 <RTC_ByteToBcd2>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	08007f10 	.word	0x08007f10
 8005130:	91a2b3c5 	.word	0x91a2b3c5
 8005134:	88888889 	.word	0x88888889
 8005138:	aaaaaaab 	.word	0xaaaaaaab
 800513c:	00015180 	.word	0x00015180

08005140 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_RTC_SetDate+0x24>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0fc      	b.n	8005362 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_RTC_SetDate+0x3e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d004      	beq.n	800517e <HAL_RTC_SetDate+0x3e>
 8005174:	f240 319d 	movw	r1, #925	@ 0x39d
 8005178:	487c      	ldr	r0, [pc, #496]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 800517a:	f7fb fe5d 	bl	8000e38 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	7c1b      	ldrb	r3, [r3, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_RTC_SetDate+0x4a>
 8005186:	2302      	movs	r3, #2
 8005188:	e0eb      	b.n	8005362 <HAL_RTC_SetDate+0x222>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2202      	movs	r2, #2
 8005194:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d12f      	bne.n	80051fc <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	78db      	ldrb	r3, [r3, #3]
 80051a0:	2b63      	cmp	r3, #99	@ 0x63
 80051a2:	d904      	bls.n	80051ae <HAL_RTC_SetDate+0x6e>
 80051a4:	f240 31a6 	movw	r1, #934	@ 0x3a6
 80051a8:	4870      	ldr	r0, [pc, #448]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 80051aa:	f7fb fe45 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_RTC_SetDate+0x7e>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d904      	bls.n	80051c8 <HAL_RTC_SetDate+0x88>
 80051be:	f240 31a7 	movw	r1, #935	@ 0x3a7
 80051c2:	486a      	ldr	r0, [pc, #424]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 80051c4:	f7fb fe38 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_RTC_SetDate+0x98>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	2b1f      	cmp	r3, #31
 80051d6:	d904      	bls.n	80051e2 <HAL_RTC_SetDate+0xa2>
 80051d8:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 80051dc:	4863      	ldr	r0, [pc, #396]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 80051de:	f7fb fe2b 	bl	8000e38 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	78da      	ldrb	r2, [r3, #3]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	785a      	ldrb	r2, [r3, #1]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	789a      	ldrb	r2, [r3, #2]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	739a      	strb	r2, [r3, #14]
 80051fa:	e051      	b.n	80052a0 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb26 	bl	8005852 <RTC_Bcd2ToByte>
 8005206:	4603      	mov	r3, r0
 8005208:	2b63      	cmp	r3, #99	@ 0x63
 800520a:	d904      	bls.n	8005216 <HAL_RTC_SetDate+0xd6>
 800520c:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8005210:	4856      	ldr	r0, [pc, #344]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 8005212:	f7fb fe11 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb19 	bl	8005852 <RTC_Bcd2ToByte>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_RTC_SetDate+0xf6>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb11 	bl	8005852 <RTC_Bcd2ToByte>
 8005230:	4603      	mov	r3, r0
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d904      	bls.n	8005240 <HAL_RTC_SetDate+0x100>
 8005236:	f240 31b2 	movw	r1, #946	@ 0x3b2
 800523a:	484c      	ldr	r0, [pc, #304]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 800523c:	f7fb fdfc 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	789b      	ldrb	r3, [r3, #2]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb04 	bl	8005852 <RTC_Bcd2ToByte>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <HAL_RTC_SetDate+0x120>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	789b      	ldrb	r3, [r3, #2]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fafc 	bl	8005852 <RTC_Bcd2ToByte>
 800525a:	4603      	mov	r3, r0
 800525c:	2b1f      	cmp	r3, #31
 800525e:	d904      	bls.n	800526a <HAL_RTC_SetDate+0x12a>
 8005260:	f240 31b3 	movw	r1, #947	@ 0x3b3
 8005264:	4841      	ldr	r0, [pc, #260]	@ (800536c <HAL_RTC_SetDate+0x22c>)
 8005266:	f7fb fde7 	bl	8000e38 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	78db      	ldrb	r3, [r3, #3]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 faef 	bl	8005852 <RTC_Bcd2ToByte>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fae6 	bl	8005852 <RTC_Bcd2ToByte>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	789b      	ldrb	r3, [r3, #2]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fadd 	bl	8005852 <RTC_Bcd2ToByte>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	7bdb      	ldrb	r3, [r3, #15]
 80052a4:	4618      	mov	r0, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	7b59      	ldrb	r1, [r3, #13]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	7b9b      	ldrb	r3, [r3, #14]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fbc8 	bl	8005a44 <RTC_WeekDayNum>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	7b1a      	ldrb	r2, [r3, #12]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f9c0 	bl	800564a <RTC_ReadTimeCounter>
 80052ca:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4a28      	ldr	r2, [pc, #160]	@ (8005370 <HAL_RTC_SetDate+0x230>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0adb      	lsrs	r3, r3, #11
 80052d6:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b18      	cmp	r3, #24
 80052dc:	d93a      	bls.n	8005354 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <HAL_RTC_SetDate+0x234>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <HAL_RTC_SetDate+0x238>)
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80052f4:	69f9      	ldr	r1, [r7, #28]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f9d7 	bl	80056aa <RTC_WriteTimeCounter>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2204      	movs	r2, #4
 8005306:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e027      	b.n	8005362 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9f0 	bl	80056f8 <RTC_ReadAlarmCounter>
 8005318:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d018      	beq.n	8005354 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	429a      	cmp	r2, r3
 8005328:	d214      	bcs.n	8005354 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005330:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005334:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005336:	69b9      	ldr	r1, [r7, #24]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f9f6 	bl	800572a <RTC_WriteAlarmCounter>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2204      	movs	r2, #4
 8005348:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e006      	b.n	8005362 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08007f10 	.word	0x08007f10
 8005370:	91a2b3c5 	.word	0x91a2b3c5
 8005374:	aaaaaaab 	.word	0xaaaaaaab
 8005378:	00015180 	.word	0x00015180

0800537c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b089      	sub	sp, #36	@ 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005388:	2300      	movs	r3, #0
 800538a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	2100      	movs	r1, #0
 8005392:	460a      	mov	r2, r1
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	460a      	mov	r2, r1
 8005398:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_RTC_SetAlarm_IT+0x2a>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0ef      	b.n	800558a <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_RTC_SetAlarm_IT+0x44>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d004      	beq.n	80053c0 <HAL_RTC_SetAlarm_IT+0x44>
 80053b6:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 80053ba:	4876      	ldr	r0, [pc, #472]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 80053bc:	f7fb fd3c 	bl	8000e38 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <HAL_RTC_SetAlarm_IT+0x56>
 80053c8:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 80053cc:	4871      	ldr	r0, [pc, #452]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 80053ce:	f7fb fd33 	bl	8000e38 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	7c1b      	ldrb	r3, [r3, #16]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_RTC_SetAlarm_IT+0x62>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0d5      	b.n	800558a <HAL_RTC_SetAlarm_IT+0x20e>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2202      	movs	r2, #2
 80053e8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	2200      	movs	r2, #0
 80053f0:	4619      	mov	r1, r3
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fdbe 	bl	8004f74 <HAL_RTC_GetTime>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_RTC_SetAlarm_IT+0x86>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e0c3      	b.n	800558a <HAL_RTC_SetAlarm_IT+0x20e>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005402:	7d3b      	ldrb	r3, [r7, #20]
 8005404:	461a      	mov	r2, r3
 8005406:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800540a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800540e:	7d7b      	ldrb	r3, [r7, #21]
 8005410:	4619      	mov	r1, r3
 8005412:	460b      	mov	r3, r1
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a5b      	subs	r3, r3, r1
 8005418:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800541a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800541c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800541e:	4413      	add	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d12e      	bne.n	8005486 <HAL_RTC_SetAlarm_IT+0x10a>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b17      	cmp	r3, #23
 800542e:	d904      	bls.n	800543a <HAL_RTC_SetAlarm_IT+0xbe>
 8005430:	f240 41c2 	movw	r1, #1218	@ 0x4c2
 8005434:	4857      	ldr	r0, [pc, #348]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 8005436:	f7fb fcff 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005440:	d904      	bls.n	800544c <HAL_RTC_SetAlarm_IT+0xd0>
 8005442:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8005446:	4853      	ldr	r0, [pc, #332]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 8005448:	f7fb fcf6 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	789b      	ldrb	r3, [r3, #2]
 8005450:	2b3b      	cmp	r3, #59	@ 0x3b
 8005452:	d904      	bls.n	800545e <HAL_RTC_SetAlarm_IT+0xe2>
 8005454:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8005458:	484e      	ldr	r0, [pc, #312]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 800545a:	f7fb fced 	bl	8000e38 <assert_failed>

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005468:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	4619      	mov	r1, r3
 8005472:	460b      	mov	r3, r1
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a5b      	subs	r3, r3, r1
 8005478:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800547a:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005480:	4413      	add	r3, r2
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	e045      	b.n	8005512 <HAL_RTC_SetAlarm_IT+0x196>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f9e1 	bl	8005852 <RTC_Bcd2ToByte>
 8005490:	4603      	mov	r3, r0
 8005492:	2b17      	cmp	r3, #23
 8005494:	d904      	bls.n	80054a0 <HAL_RTC_SetAlarm_IT+0x124>
 8005496:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800549a:	483e      	ldr	r0, [pc, #248]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 800549c:	f7fb fccc 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f9d4 	bl	8005852 <RTC_Bcd2ToByte>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80054ae:	d904      	bls.n	80054ba <HAL_RTC_SetAlarm_IT+0x13e>
 80054b0:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 80054b4:	4837      	ldr	r0, [pc, #220]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 80054b6:	f7fb fcbf 	bl	8000e38 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	789b      	ldrb	r3, [r3, #2]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f9c7 	bl	8005852 <RTC_Bcd2ToByte>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80054c8:	d904      	bls.n	80054d4 <HAL_RTC_SetAlarm_IT+0x158>
 80054ca:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 80054ce:	4831      	ldr	r0, [pc, #196]	@ (8005594 <HAL_RTC_SetAlarm_IT+0x218>)
 80054d0:	f7fb fcb2 	bl	8000e38 <assert_failed>

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f9ba 	bl	8005852 <RTC_Bcd2ToByte>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80054e6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f9af 	bl	8005852 <RTC_Bcd2ToByte>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005500:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	789b      	ldrb	r3, [r3, #2]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f9a3 	bl	8005852 <RTC_Bcd2ToByte>
 800550c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800550e:	4423      	add	r3, r4
 8005510:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	429a      	cmp	r2, r3
 8005518:	d205      	bcs.n	8005526 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005520:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005524:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f8fe 	bl	800572a <RTC_WriteAlarmCounter>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_RTC_SetAlarm_IT+0x1c8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2204      	movs	r2, #4
 8005538:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e022      	b.n	800558a <HAL_RTC_SetAlarm_IT+0x20e>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0202 	bic.w	r2, r2, #2
 8005552:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0202 	orr.w	r2, r2, #2
 8005562:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005564:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <HAL_RTC_SetAlarm_IT+0x21c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0b      	ldr	r2, [pc, #44]	@ (8005598 <HAL_RTC_SetAlarm_IT+0x21c>)
 800556a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005570:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <HAL_RTC_SetAlarm_IT+0x21c>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <HAL_RTC_SetAlarm_IT+0x21c>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005588:	2300      	movs	r3, #0
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3724      	adds	r7, #36	@ 0x24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	08007f10 	.word	0x08007f10
 8005598:	40010400 	.word	0x40010400

0800559c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fb f963 	bl	800088c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0202 	bic.w	r2, r2, #2
 80055d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80055d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055dc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	745a      	strb	r2, [r3, #17]
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40010400 	.word	0x40010400

080055f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e01d      	b.n	8005642 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0208 	bic.w	r2, r2, #8
 8005614:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005616:	f7fc feb9 	bl	800238c <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800561c:	e009      	b.n	8005632 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800561e:	f7fc feb5 	bl	800238c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800562c:	d901      	bls.n	8005632 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e007      	b.n	8005642 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	827b      	strh	r3, [r7, #18]
 8005656:	2300      	movs	r3, #0
 8005658:	823b      	strh	r3, [r7, #16]
 800565a:	2300      	movs	r3, #0
 800565c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800567a:	8a7a      	ldrh	r2, [r7, #18]
 800567c:	8a3b      	ldrh	r3, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d008      	beq.n	8005694 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005682:	8a3b      	ldrh	r3, [r7, #16]
 8005684:	041a      	lsls	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	b29b      	uxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e004      	b.n	800569e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005694:	8a7b      	ldrh	r3, [r7, #18]
 8005696:	041a      	lsls	r2, r3, #16
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800569e:	697b      	ldr	r3, [r7, #20]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f85d 	bl	8005778 <RTC_EnterInitMode>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
 80056c8:	e011      	b.n	80056ee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	0c12      	lsrs	r2, r2, #16
 80056d2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b292      	uxth	r2, r2
 80056dc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f872 	bl	80057c8 <RTC_ExitInitMode>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	81fb      	strh	r3, [r7, #14]
 8005704:	2300      	movs	r3, #0
 8005706:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	041a      	lsls	r2, r3, #16
 800571c:	89bb      	ldrh	r3, [r7, #12]
 800571e:	4313      	orrs	r3, r2
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f81d 	bl	8005778 <RTC_EnterInitMode>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e011      	b.n	800576e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	0c12      	lsrs	r2, r2, #16
 8005752:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	b292      	uxth	r2, r2
 800575c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f832 	bl	80057c8 <RTC_ExitInitMode>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005784:	f7fc fe02 	bl	800238c <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800578a:	e009      	b.n	80057a0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800578c:	f7fc fdfe 	bl	800238c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800579a:	d901      	bls.n	80057a0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e00f      	b.n	80057c0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ee      	beq.n	800578c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0210 	orr.w	r2, r2, #16
 80057bc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0210 	bic.w	r2, r2, #16
 80057e2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80057e4:	f7fc fdd2 	bl	800238c <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057ea:	e009      	b.n	8005800 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80057ec:	f7fc fdce 	bl	800238c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057fa:	d901      	bls.n	8005800 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e007      	b.n	8005810 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ee      	beq.n	80057ec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005826:	e005      	b.n	8005834 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	3b0a      	subs	r3, #10
 8005832:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b09      	cmp	r3, #9
 8005838:	d8f6      	bhi.n	8005828 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	b2da      	uxtb	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4313      	orrs	r3, r2
 8005846:	b2db      	uxtb	r3, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	4603      	mov	r3, r0
 800585a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4413      	add	r3, r2
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7bdb      	ldrb	r3, [r3, #15]
 80058aa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7b5b      	ldrb	r3, [r3, #13]
 80058b0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7b9b      	ldrb	r3, [r3, #14]
 80058b6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	e06f      	b.n	800599e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d011      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d00e      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d00b      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b07      	cmp	r3, #7
 80058d4:	d008      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d005      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0a      	cmp	r3, #10
 80058e0:	d002      	beq.n	80058e8 <RTC_DateUpdate+0x5c>
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d117      	bne.n	8005918 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b1e      	cmp	r3, #30
 80058ec:	d803      	bhi.n	80058f6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80058f4:	e050      	b.n	8005998 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d005      	beq.n	8005908 <RTC_DateUpdate+0x7c>
        {
          month++;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	3301      	adds	r3, #1
 8005900:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005902:	2301      	movs	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005906:	e047      	b.n	8005998 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005908:	2301      	movs	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800590c:	2301      	movs	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
          year++;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3301      	adds	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005916:	e03f      	b.n	8005998 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d008      	beq.n	8005930 <RTC_DateUpdate+0xa4>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b06      	cmp	r3, #6
 8005922:	d005      	beq.n	8005930 <RTC_DateUpdate+0xa4>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b09      	cmp	r3, #9
 8005928:	d002      	beq.n	8005930 <RTC_DateUpdate+0xa4>
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b0b      	cmp	r3, #11
 800592e:	d10c      	bne.n	800594a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b1d      	cmp	r3, #29
 8005934:	d803      	bhi.n	800593e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800593c:	e02c      	b.n	8005998 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005944:	2301      	movs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005948:	e026      	b.n	8005998 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d123      	bne.n	8005998 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b1b      	cmp	r3, #27
 8005954:	d803      	bhi.n	800595e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e01c      	b.n	8005998 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b1c      	cmp	r3, #28
 8005962:	d111      	bne.n	8005988 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	b29b      	uxth	r3, r3
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f839 	bl	80059e0 <RTC_IsLeapYear>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e00d      	b.n	8005998 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	3301      	adds	r3, #1
 8005980:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005982:	2301      	movs	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e007      	b.n	8005998 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b1d      	cmp	r3, #29
 800598c:	d104      	bne.n	8005998 <RTC_DateUpdate+0x10c>
      {
        month++;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3301      	adds	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005994:	2301      	movs	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	3301      	adds	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d38b      	bcc.n	80058be <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6978      	ldr	r0, [r7, #20]
 80059ca:	f000 f83b 	bl	8005a44 <RTC_WeekDayNum>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	731a      	strb	r2, [r3, #12]
}
 80059d6:	bf00      	nop
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e01d      	b.n	8005a36 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	4a10      	ldr	r2, [pc, #64]	@ (8005a40 <RTC_IsLeapYear+0x60>)
 80059fe:	fba2 1203 	umull	r1, r2, r2, r3
 8005a02:	0952      	lsrs	r2, r2, #5
 8005a04:	2164      	movs	r1, #100	@ 0x64
 8005a06:	fb01 f202 	mul.w	r2, r1, r2
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e00f      	b.n	8005a36 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <RTC_IsLeapYear+0x60>)
 8005a1a:	fba2 1203 	umull	r1, r2, r2, r3
 8005a1e:	09d2      	lsrs	r2, r2, #7
 8005a20:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005a24:	fb01 f202 	mul.w	r2, r1, r2
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005a34:	2300      	movs	r3, #0
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr
 8005a40:	51eb851f 	.word	0x51eb851f

08005a44 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
 8005a50:	4613      	mov	r3, r2
 8005a52:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005a62:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d82d      	bhi.n	8005ac6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	4a2c      	ldr	r2, [pc, #176]	@ (8005b28 <RTC_WeekDayNum+0xe4>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	085a      	lsrs	r2, r3, #1
 8005a7e:	78bb      	ldrb	r3, [r7, #2]
 8005a80:	441a      	add	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4926      	ldr	r1, [pc, #152]	@ (8005b2c <RTC_WeekDayNum+0xe8>)
 8005a94:	fba1 1303 	umull	r1, r3, r1, r3
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	1ad2      	subs	r2, r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4922      	ldr	r1, [pc, #136]	@ (8005b2c <RTC_WeekDayNum+0xe8>)
 8005aa2:	fba1 1303 	umull	r1, r3, r1, r3
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	4413      	add	r3, r2
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	4b20      	ldr	r3, [pc, #128]	@ (8005b30 <RTC_WeekDayNum+0xec>)
 8005aae:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab2:	1ad1      	subs	r1, r2, r3
 8005ab4:	0849      	lsrs	r1, r1, #1
 8005ab6:	440b      	add	r3, r1
 8005ab8:	0899      	lsrs	r1, r3, #2
 8005aba:	460b      	mov	r3, r1
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e029      	b.n	8005b1a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	4a15      	ldr	r2, [pc, #84]	@ (8005b28 <RTC_WeekDayNum+0xe4>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	085a      	lsrs	r2, r3, #1
 8005ada:	78bb      	ldrb	r3, [r7, #2]
 8005adc:	441a      	add	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4910      	ldr	r1, [pc, #64]	@ (8005b2c <RTC_WeekDayNum+0xe8>)
 8005aec:	fba1 1303 	umull	r1, r3, r1, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	490d      	ldr	r1, [pc, #52]	@ (8005b2c <RTC_WeekDayNum+0xe8>)
 8005af8:	fba1 1303 	umull	r1, r3, r1, r3
 8005afc:	09db      	lsrs	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <RTC_WeekDayNum+0xec>)
 8005b04:	fba3 1302 	umull	r1, r3, r3, r2
 8005b08:	1ad1      	subs	r1, r2, r3
 8005b0a:	0849      	lsrs	r1, r1, #1
 8005b0c:	440b      	add	r3, r1
 8005b0e:	0899      	lsrs	r1, r3, #2
 8005b10:	460b      	mov	r3, r1
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	b2db      	uxtb	r3, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	38e38e39 	.word	0x38e38e39
 8005b2c:	51eb851f 	.word	0x51eb851f
 8005b30:	24924925 	.word	0x24924925

08005b34 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d027      	beq.n	8005b9a <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f824 	bl	8005bb4 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0204 	mvn.w	r2, #4
 8005b74:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2204      	movs	r2, #4
 8005b7a:	745a      	strb	r2, [r3, #17]
 8005b7c:	e005      	b.n	8005b8a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f80f 	bl	8005ba2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e095      	b.n	8005d06 <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02c      	beq.n	8005c3c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a4a      	ldr	r2, [pc, #296]	@ (8005d10 <HAL_UART_Init+0x148>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_UART_Init+0x42>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a48      	ldr	r2, [pc, #288]	@ (8005d14 <HAL_UART_Init+0x14c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_UART_Init+0x42>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a47      	ldr	r2, [pc, #284]	@ (8005d18 <HAL_UART_Init+0x150>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_UART_Init+0x42>
 8005c00:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8005c04:	4845      	ldr	r0, [pc, #276]	@ (8005d1c <HAL_UART_Init+0x154>)
 8005c06:	f7fb f917 	bl	8000e38 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d028      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1a:	d023      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c24:	d01e      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c2e:	d019      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c30:	f240 116f 	movw	r1, #367	@ 0x16f
 8005c34:	4839      	ldr	r0, [pc, #228]	@ (8005d1c <HAL_UART_Init+0x154>)
 8005c36:	f7fb f8ff 	bl	8000e38 <assert_failed>
 8005c3a:	e013      	b.n	8005c64 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a33      	ldr	r2, [pc, #204]	@ (8005d10 <HAL_UART_Init+0x148>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00e      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a32      	ldr	r2, [pc, #200]	@ (8005d14 <HAL_UART_Init+0x14c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a30      	ldr	r2, [pc, #192]	@ (8005d18 <HAL_UART_Init+0x150>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_UART_Init+0x9c>
 8005c5a:	f240 1173 	movw	r1, #371	@ 0x173
 8005c5e:	482f      	ldr	r0, [pc, #188]	@ (8005d1c <HAL_UART_Init+0x154>)
 8005c60:	f7fb f8ea 	bl	8000e38 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <HAL_UART_Init+0xb8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c74:	d004      	beq.n	8005c80 <HAL_UART_Init+0xb8>
 8005c76:	f240 1175 	movw	r1, #373	@ 0x175
 8005c7a:	4828      	ldr	r0, [pc, #160]	@ (8005d1c <HAL_UART_Init+0x154>)
 8005c7c:	f7fb f8dc 	bl	8000e38 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7fc fa3d 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	@ 0x24
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f91c 	bl	8006ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	08007f48 	.word	0x08007f48

08005d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d16d      	bne.n	8005e1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_UART_Transmit+0x2c>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e066      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2221      	movs	r2, #33	@ 0x21
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d5e:	f7fc fb15 	bl	800238c <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d78:	d108      	bne.n	8005d8c <HAL_UART_Transmit+0x6c>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	e003      	b.n	8005d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d94:	e02a      	b.n	8005dec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2180      	movs	r1, #128	@ 0x80
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fddb 	bl	800695c <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e036      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3302      	adds	r3, #2
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e007      	b.n	8005dde <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1cf      	bne.n	8005d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2140      	movs	r1, #64	@ 0x40
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fdab 	bl	800695c <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e006      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08a      	sub	sp, #40	@ 0x28
 8005e2a:	af02      	add	r7, sp, #8
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d17c      	bne.n	8005f40 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_UART_Receive+0x2c>
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e075      	b.n	8005f42 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2222      	movs	r2, #34	@ 0x22
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e6a:	f7fc fa8f 	bl	800238c <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e84:	d108      	bne.n	8005e98 <HAL_UART_Receive+0x72>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	e003      	b.n	8005ea0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ea0:	e043      	b.n	8005f2a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2120      	movs	r1, #32
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fd55 	bl	800695c <UART_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e042      	b.n	8005f42 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10c      	bne.n	8005edc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e01f      	b.n	8005f1c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee4:	d007      	beq.n	8005ef6 <HAL_UART_Receive+0xd0>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <HAL_UART_Receive+0xde>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	e008      	b.n	8005f16 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1b6      	bne.n	8005ea2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d121      	bne.n	8005fa8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_UART_Transmit_IT+0x26>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e01a      	b.n	8005faa <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2221      	movs	r2, #33	@ 0x21
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fa2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	f040 80c0 	bne.w	8006152 <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0b8      	b.n	8006154 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2222      	movs	r2, #34	@ 0x22
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffc:	f7fc f9c6 	bl	800238c <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006016:	d108      	bne.n	800602a <HAL_UARTEx_ReceiveToIdle+0x76>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e003      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006038:	e077      	b.n	800612a <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b10      	cmp	r3, #16
 8006046:	d117      	bne.n	8006078 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2202      	movs	r2, #2
 800606a:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e06d      	b.n	8006154 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b20      	cmp	r3, #32
 8006084:	d13c      	bne.n	8006100 <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	b29a      	uxth	r2, r3
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3302      	adds	r3, #2
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e01f      	b.n	80060e6 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	d007      	beq.n	80060c0 <HAL_UARTEx_ReceiveToIdle+0x10c>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <HAL_UARTEx_ReceiveToIdle+0x11a>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	3301      	adds	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d010      	beq.n	800612a <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006108:	f7fc f940 	bl	800238c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <HAL_UARTEx_ReceiveToIdle+0x16a>
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e014      	b.n	8006154 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d182      	bne.n	800603a <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	b29a      	uxth	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08c      	sub	sp, #48	@ 0x30
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b20      	cmp	r3, #32
 8006174:	d14a      	bne.n	800620c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e043      	b.n	800620e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	461a      	mov	r2, r3
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fc4d 	bl	8006a38 <UART_Start_Receive_DMA>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80061a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d12c      	bne.n	8006206 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d125      	bne.n	8006200 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	617b      	str	r3, [r7, #20]
   return(result);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80061ec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6a39      	ldr	r1, [r7, #32]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80061fe:	e002      	b.n	8006206 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800620a:	e000      	b.n	800620e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3730      	adds	r7, #48	@ 0x30
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b0ba      	sub	sp, #232	@ 0xe8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fd7c 	bl	8006d74 <UART_Receive_IT>
      return;
 800627c:	e25b      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80de 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80d1 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	f043 0201 	orr.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f043 0202 	orr.w	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
 80062f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 81f2 	beq.w	800672c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fd07 	bl	8006d74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <HAL_UART_IRQHandler+0x17a>
 800638a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04f      	beq.n	8006432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fc11 	bl	8006bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d041      	beq.n	800642a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	4a7e      	ldr	r2, [pc, #504]	@ (80065f8 <HAL_UART_IRQHandler+0x3e0>)
 8006400:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	4618      	mov	r0, r3
 8006408:	f7fc fad4 	bl	80029b4 <HAL_DMA_Abort_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e00e      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f993 	bl	800674e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	e00a      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f98f 	bl	800674e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e006      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f98b 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800643e:	e175      	b.n	800672c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	bf00      	nop
    return;
 8006442:	e173      	b.n	800672c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 814f 	bne.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8148 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8141 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80b6 	beq.w	80065fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800649c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8145 	beq.w	8006730 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f080 813e 	bcs.w	8006730 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	f000 8088 	beq.w	80065d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006500:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800650c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1d9      	bne.n	80064c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3314      	adds	r3, #20
 8006534:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006538:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800653c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006540:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800654a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e1      	bne.n	8006514 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3314      	adds	r3, #20
 8006556:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006574:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006576:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800657a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e3      	bne.n	8006550 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065a8:	f023 0310 	bic.w	r3, r3, #16
 80065ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e3      	bne.n	8006596 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fc f9b2 	bl	800293c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fa f9a2 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f4:	e09c      	b.n	8006730 <HAL_UART_IRQHandler+0x518>
 80065f6:	bf00      	nop
 80065f8:	08006c7f 	.word	0x08006c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006604:	b29b      	uxth	r3, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808e 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8089 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006646:	647a      	str	r2, [r7, #68]	@ 0x44
 8006648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800664c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e3      	bne.n	8006622 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	623b      	str	r3, [r7, #32]
   return(result);
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800667e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fa f927 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ea:	e023      	b.n	8006734 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 face 	bl	8006ca6 <UART_Transmit_IT>
    return;
 800670a:	e014      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb0d 	bl	8006d44 <UART_EndTransmit_IT>
    return;
 800672a:	e004      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    return;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006734:	bf00      	nop
  }
}
 8006736:	37e8      	adds	r7, #232	@ 0xe8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b09c      	sub	sp, #112	@ 0x70
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d172      	bne.n	8006862 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800677c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800677e:	2200      	movs	r2, #0
 8006780:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800679a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80067a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e5      	bne.n	8006782 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80067d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	623b      	str	r3, [r7, #32]
   return(result);
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006800:	663b      	str	r3, [r7, #96]	@ 0x60
 8006802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800680a:	633a      	str	r2, [r7, #48]	@ 0x30
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800681e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006820:	2220      	movs	r2, #32
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	2b01      	cmp	r3, #1
 800682c:	d119      	bne.n	8006862 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	60fb      	str	r3, [r7, #12]
   return(result);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 0310 	bic.w	r3, r3, #16
 8006844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800684e:	61fa      	str	r2, [r7, #28]
 8006850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	69b9      	ldr	r1, [r7, #24]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	617b      	str	r3, [r7, #20]
   return(result);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006864:	2200      	movs	r2, #0
 8006866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	d106      	bne.n	800687e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006874:	4619      	mov	r1, r3
 8006876:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006878:	f7fa f85e 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800687c:	e002      	b.n	8006884 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800687e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006880:	f7fa f850 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 8006884:	bf00      	nop
 8006886:	3770      	adds	r7, #112	@ 0x70
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d108      	bne.n	80068ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4619      	mov	r1, r3
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7fa f840 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068b8:	e002      	b.n	80068c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff ff3e 	bl	800673c <HAL_UART_RxHalfCpltCallback>
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b21      	cmp	r3, #33	@ 0x21
 80068fa:	d108      	bne.n	800690e <UART_DMAError+0x46>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f000 f92f 	bl	8006b6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b22      	cmp	r3, #34	@ 0x22
 800692e:	d108      	bne.n	8006942 <UART_DMAError+0x7a>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800693c:	68b8      	ldr	r0, [r7, #8]
 800693e:	f000 f93c 	bl	8006bba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006946:	f043 0210 	orr.w	r2, r3, #16
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800694e:	68b8      	ldr	r0, [r7, #8]
 8006950:	f7ff fefd 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b090      	sub	sp, #64	@ 0x40
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	e050      	b.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d04c      	beq.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x30>
 800697c:	f7fb fd06 	bl	800238c <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006988:	429a      	cmp	r2, r3
 800698a:	d241      	bcs.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3314      	adds	r3, #20
 80069de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069e0:	623a      	str	r2, [r7, #32]
 80069e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e5      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e00f      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d09f      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3740      	adds	r7, #64	@ 0x40
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b098      	sub	sp, #96	@ 0x60
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2222      	movs	r2, #34	@ 0x22
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a64:	4a3e      	ldr	r2, [pc, #248]	@ (8006b60 <UART_Start_Receive_DMA+0x128>)
 8006a66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b64 <UART_Start_Receive_DMA+0x12c>)
 8006a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a74:	4a3c      	ldr	r2, [pc, #240]	@ (8006b68 <UART_Start_Receive_DMA+0x130>)
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	f7fb fee2 	bl	8002860 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d019      	beq.n	8006aee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ada:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006adc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	617b      	str	r3, [r7, #20]
   return(result);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6a39      	ldr	r1, [r7, #32]
 8006b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3760      	adds	r7, #96	@ 0x60
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	08006761 	.word	0x08006761
 8006b64:	0800688d 	.word	0x0800688d
 8006b68:	080068c9 	.word	0x080068c9

08006b6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b089      	sub	sp, #36	@ 0x24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	61ba      	str	r2, [r7, #24]
 8006b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006bb0:	bf00      	nop
 8006bb2:	3724      	adds	r7, #36	@ 0x24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b095      	sub	sp, #84	@ 0x54
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3314      	adds	r3, #20
 8006c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d119      	bne.n	8006c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f023 0310 	bic.w	r3, r3, #16
 8006c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c52:	61ba      	str	r2, [r7, #24]
 8006c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c74:	bf00      	nop
 8006c76:	3754      	adds	r7, #84	@ 0x54
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fd58 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b21      	cmp	r3, #33	@ 0x21
 8006cb8:	d13e      	bne.n	8006d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d114      	bne.n	8006cee <UART_Transmit_IT+0x48>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d110      	bne.n	8006cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	1c9a      	adds	r2, r3, #2
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]
 8006cec:	e008      	b.n	8006d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	1c59      	adds	r1, r3, #1
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6211      	str	r1, [r2, #32]
 8006cf8:	781a      	ldrb	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10f      	bne.n	8006d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e000      	b.n	8006d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
  }
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7f9 fdc3 	bl	80008f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	@ 0x30
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b22      	cmp	r3, #34	@ 0x22
 8006d86:	f040 80ae 	bne.w	8006ee6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d92:	d117      	bne.n	8006dc4 <UART_Receive_IT+0x50>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d113      	bne.n	8006dc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	1c9a      	adds	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dc2:	e026      	b.n	8006e12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd6:	d007      	beq.n	8006de8 <UART_Receive_IT+0x74>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <UART_Receive_IT+0x82>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	e008      	b.n	8006e08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d15d      	bne.n	8006ee2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0220 	bic.w	r2, r2, #32
 8006e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d135      	bne.n	8006ed8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	613b      	str	r3, [r7, #16]
   return(result);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e92:	623a      	str	r2, [r7, #32]
 8006e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	69f9      	ldr	r1, [r7, #28]
 8006e98:	6a3a      	ldr	r2, [r7, #32]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d10a      	bne.n	8006eca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7f9 fd31 	bl	8000938 <HAL_UARTEx_RxEventCallback>
 8006ed6:	e002      	b.n	8006ede <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7f9 fd23 	bl	8000924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e002      	b.n	8006ee8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e000      	b.n	8006ee8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3730      	adds	r7, #48	@ 0x30
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a5f      	ldr	r2, [pc, #380]	@ (800707c <UART_SetConfig+0x18c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d904      	bls.n	8006f0c <UART_SetConfig+0x1c>
 8006f02:	f640 6166 	movw	r1, #3686	@ 0xe66
 8006f06:	485e      	ldr	r0, [pc, #376]	@ (8007080 <UART_SetConfig+0x190>)
 8006f08:	f7f9 ff96 	bl	8000e38 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <UART_SetConfig+0x38>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f1c:	d004      	beq.n	8006f28 <UART_SetConfig+0x38>
 8006f1e:	f640 6167 	movw	r1, #3687	@ 0xe67
 8006f22:	4857      	ldr	r0, [pc, #348]	@ (8007080 <UART_SetConfig+0x190>)
 8006f24:	f7f9 ff88 	bl	8000e38 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <UART_SetConfig+0x5e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f38:	d009      	beq.n	8006f4e <UART_SetConfig+0x5e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f42:	d004      	beq.n	8006f4e <UART_SetConfig+0x5e>
 8006f44:	f640 6168 	movw	r1, #3688	@ 0xe68
 8006f48:	484d      	ldr	r0, [pc, #308]	@ (8007080 <UART_SetConfig+0x190>)
 8006f4a:	f7f9 ff75 	bl	8000e38 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <UART_SetConfig+0x74>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <UART_SetConfig+0x7e>
 8006f64:	f640 6169 	movw	r1, #3689	@ 0xe69
 8006f68:	4845      	ldr	r0, [pc, #276]	@ (8007080 <UART_SetConfig+0x190>)
 8006f6a:	f7f9 ff65 	bl	8000e38 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006fa0:	f023 030c 	bic.w	r3, r3, #12
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	430b      	orrs	r3, r1
 8006fac:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8007084 <UART_SetConfig+0x194>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d103      	bne.n	8006fd6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fce:	f7fd fc23 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fd6:	f7fd fc0b 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006fda:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009a      	lsls	r2, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	4a25      	ldr	r2, [pc, #148]	@ (8007088 <UART_SetConfig+0x198>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	0119      	lsls	r1, r3, #4
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009a      	lsls	r2, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007012:	4b1d      	ldr	r3, [pc, #116]	@ (8007088 <UART_SetConfig+0x198>)
 8007014:	fba3 0302 	umull	r0, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2064      	movs	r0, #100	@ 0x64
 800701c:	fb00 f303 	mul.w	r3, r0, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	3332      	adds	r3, #50	@ 0x32
 8007026:	4a18      	ldr	r2, [pc, #96]	@ (8007088 <UART_SetConfig+0x198>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007032:	4419      	add	r1, r3
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009a      	lsls	r2, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	fbb2 f2f3 	udiv	r2, r2, r3
 800704a:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <UART_SetConfig+0x198>)
 800704c:	fba3 0302 	umull	r0, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2064      	movs	r0, #100	@ 0x64
 8007054:	fb00 f303 	mul.w	r3, r0, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	3332      	adds	r3, #50	@ 0x32
 800705e:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <UART_SetConfig+0x198>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	440a      	add	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	0044aa20 	.word	0x0044aa20
 8007080:	08007f48 	.word	0x08007f48
 8007084:	40013800 	.word	0x40013800
 8007088:	51eb851f 	.word	0x51eb851f

0800708c <siprintf>:
 800708c:	b40e      	push	{r1, r2, r3}
 800708e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007092:	b500      	push	{lr}
 8007094:	b09c      	sub	sp, #112	@ 0x70
 8007096:	ab1d      	add	r3, sp, #116	@ 0x74
 8007098:	9002      	str	r0, [sp, #8]
 800709a:	9006      	str	r0, [sp, #24]
 800709c:	9107      	str	r1, [sp, #28]
 800709e:	9104      	str	r1, [sp, #16]
 80070a0:	4808      	ldr	r0, [pc, #32]	@ (80070c4 <siprintf+0x38>)
 80070a2:	4909      	ldr	r1, [pc, #36]	@ (80070c8 <siprintf+0x3c>)
 80070a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a8:	9105      	str	r1, [sp, #20]
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	a902      	add	r1, sp, #8
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f000 f9b8 	bl	8007424 <_svfiprintf_r>
 80070b4:	2200      	movs	r2, #0
 80070b6:	9b02      	ldr	r3, [sp, #8]
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	b01c      	add	sp, #112	@ 0x70
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	20000244 	.word	0x20000244
 80070c8:	ffff0208 	.word	0xffff0208

080070cc <memset>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	4402      	add	r2, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <strcat>:
 80070dc:	4602      	mov	r2, r0
 80070de:	b510      	push	{r4, lr}
 80070e0:	7814      	ldrb	r4, [r2, #0]
 80070e2:	4613      	mov	r3, r2
 80070e4:	3201      	adds	r2, #1
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	d1fa      	bne.n	80070e0 <strcat+0x4>
 80070ea:	3b01      	subs	r3, #1
 80070ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	d1f9      	bne.n	80070ec <strcat+0x10>
 80070f8:	bd10      	pop	{r4, pc}

080070fa <strstr>:
 80070fa:	780a      	ldrb	r2, [r1, #0]
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	b96a      	cbnz	r2, 800711c <strstr+0x22>
 8007100:	bd70      	pop	{r4, r5, r6, pc}
 8007102:	429a      	cmp	r2, r3
 8007104:	d109      	bne.n	800711a <strstr+0x20>
 8007106:	460c      	mov	r4, r1
 8007108:	4605      	mov	r5, r0
 800710a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f6      	beq.n	8007100 <strstr+0x6>
 8007112:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007116:	429e      	cmp	r6, r3
 8007118:	d0f7      	beq.n	800710a <strstr+0x10>
 800711a:	3001      	adds	r0, #1
 800711c:	7803      	ldrb	r3, [r0, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ef      	bne.n	8007102 <strstr+0x8>
 8007122:	4618      	mov	r0, r3
 8007124:	e7ec      	b.n	8007100 <strstr+0x6>
	...

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	@ (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000244 	.word	0x20000244

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	2600      	movs	r6, #0
 8007138:	4d0c      	ldr	r5, [pc, #48]	@ (800716c <__libc_init_array+0x38>)
 800713a:	4c0d      	ldr	r4, [pc, #52]	@ (8007170 <__libc_init_array+0x3c>)
 800713c:	1b64      	subs	r4, r4, r5
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	f000 fc78 	bl	8007a38 <_init>
 8007148:	2600      	movs	r6, #0
 800714a:	4d0a      	ldr	r5, [pc, #40]	@ (8007174 <__libc_init_array+0x40>)
 800714c:	4c0a      	ldr	r4, [pc, #40]	@ (8007178 <__libc_init_array+0x44>)
 800714e:	1b64      	subs	r4, r4, r5
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	0800876c 	.word	0x0800876c
 8007170:	0800876c 	.word	0x0800876c
 8007174:	0800876c 	.word	0x0800876c
 8007178:	08008770 	.word	0x08008770

0800717c <__retarget_lock_acquire_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_release_recursive>:
 800717e:	4770      	bx	lr

08007180 <_free_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4605      	mov	r5, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	d040      	beq.n	800720a <_free_r+0x8a>
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f0c      	subs	r4, r1, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	18e4      	addlt	r4, r4, r3
 8007194:	f000 f8de 	bl	8007354 <__malloc_lock>
 8007198:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <_free_r+0x8c>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	b933      	cbnz	r3, 80071ac <_free_r+0x2c>
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6014      	str	r4, [r2, #0]
 80071a2:	4628      	mov	r0, r5
 80071a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a8:	f000 b8da 	b.w	8007360 <__malloc_unlock>
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d908      	bls.n	80071c2 <_free_r+0x42>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	1821      	adds	r1, r4, r0
 80071b4:	428b      	cmp	r3, r1
 80071b6:	bf01      	itttt	eq
 80071b8:	6819      	ldreq	r1, [r3, #0]
 80071ba:	685b      	ldreq	r3, [r3, #4]
 80071bc:	1809      	addeq	r1, r1, r0
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	e7ed      	b.n	800719e <_free_r+0x1e>
 80071c2:	461a      	mov	r2, r3
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b10b      	cbz	r3, 80071cc <_free_r+0x4c>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d9fa      	bls.n	80071c2 <_free_r+0x42>
 80071cc:	6811      	ldr	r1, [r2, #0]
 80071ce:	1850      	adds	r0, r2, r1
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d10b      	bne.n	80071ec <_free_r+0x6c>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	4401      	add	r1, r0
 80071d8:	1850      	adds	r0, r2, r1
 80071da:	4283      	cmp	r3, r0
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	d1e0      	bne.n	80071a2 <_free_r+0x22>
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4408      	add	r0, r1
 80071e6:	6010      	str	r0, [r2, #0]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	e7da      	b.n	80071a2 <_free_r+0x22>
 80071ec:	d902      	bls.n	80071f4 <_free_r+0x74>
 80071ee:	230c      	movs	r3, #12
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	e7d6      	b.n	80071a2 <_free_r+0x22>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	1821      	adds	r1, r4, r0
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf01      	itttt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	1809      	addeq	r1, r1, r0
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6054      	str	r4, [r2, #4]
 8007208:	e7cb      	b.n	80071a2 <_free_r+0x22>
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20000af4 	.word	0x20000af4

08007210 <sbrk_aligned>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4e0f      	ldr	r6, [pc, #60]	@ (8007250 <sbrk_aligned+0x40>)
 8007214:	460c      	mov	r4, r1
 8007216:	6831      	ldr	r1, [r6, #0]
 8007218:	4605      	mov	r5, r0
 800721a:	b911      	cbnz	r1, 8007222 <sbrk_aligned+0x12>
 800721c:	f000 fbaa 	bl	8007974 <_sbrk_r>
 8007220:	6030      	str	r0, [r6, #0]
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 fba5 	bl	8007974 <_sbrk_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d103      	bne.n	8007236 <sbrk_aligned+0x26>
 800722e:	f04f 34ff 	mov.w	r4, #4294967295
 8007232:	4620      	mov	r0, r4
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	1cc4      	adds	r4, r0, #3
 8007238:	f024 0403 	bic.w	r4, r4, #3
 800723c:	42a0      	cmp	r0, r4
 800723e:	d0f8      	beq.n	8007232 <sbrk_aligned+0x22>
 8007240:	1a21      	subs	r1, r4, r0
 8007242:	4628      	mov	r0, r5
 8007244:	f000 fb96 	bl	8007974 <_sbrk_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d1f2      	bne.n	8007232 <sbrk_aligned+0x22>
 800724c:	e7ef      	b.n	800722e <sbrk_aligned+0x1e>
 800724e:	bf00      	nop
 8007250:	20000af0 	.word	0x20000af0

08007254 <_malloc_r>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	1ccd      	adds	r5, r1, #3
 800725a:	f025 0503 	bic.w	r5, r5, #3
 800725e:	3508      	adds	r5, #8
 8007260:	2d0c      	cmp	r5, #12
 8007262:	bf38      	it	cc
 8007264:	250c      	movcc	r5, #12
 8007266:	2d00      	cmp	r5, #0
 8007268:	4606      	mov	r6, r0
 800726a:	db01      	blt.n	8007270 <_malloc_r+0x1c>
 800726c:	42a9      	cmp	r1, r5
 800726e:	d904      	bls.n	800727a <_malloc_r+0x26>
 8007270:	230c      	movs	r3, #12
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	2000      	movs	r0, #0
 8007276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007350 <_malloc_r+0xfc>
 800727e:	f000 f869 	bl	8007354 <__malloc_lock>
 8007282:	f8d8 3000 	ldr.w	r3, [r8]
 8007286:	461c      	mov	r4, r3
 8007288:	bb44      	cbnz	r4, 80072dc <_malloc_r+0x88>
 800728a:	4629      	mov	r1, r5
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff ffbf 	bl	8007210 <sbrk_aligned>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	4604      	mov	r4, r0
 8007296:	d158      	bne.n	800734a <_malloc_r+0xf6>
 8007298:	f8d8 4000 	ldr.w	r4, [r8]
 800729c:	4627      	mov	r7, r4
 800729e:	2f00      	cmp	r7, #0
 80072a0:	d143      	bne.n	800732a <_malloc_r+0xd6>
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d04b      	beq.n	800733e <_malloc_r+0xea>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4639      	mov	r1, r7
 80072aa:	4630      	mov	r0, r6
 80072ac:	eb04 0903 	add.w	r9, r4, r3
 80072b0:	f000 fb60 	bl	8007974 <_sbrk_r>
 80072b4:	4581      	cmp	r9, r0
 80072b6:	d142      	bne.n	800733e <_malloc_r+0xea>
 80072b8:	6821      	ldr	r1, [r4, #0]
 80072ba:	4630      	mov	r0, r6
 80072bc:	1a6d      	subs	r5, r5, r1
 80072be:	4629      	mov	r1, r5
 80072c0:	f7ff ffa6 	bl	8007210 <sbrk_aligned>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d03a      	beq.n	800733e <_malloc_r+0xea>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	442b      	add	r3, r5
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	f8d8 3000 	ldr.w	r3, [r8]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	bb62      	cbnz	r2, 8007330 <_malloc_r+0xdc>
 80072d6:	f8c8 7000 	str.w	r7, [r8]
 80072da:	e00f      	b.n	80072fc <_malloc_r+0xa8>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	1b52      	subs	r2, r2, r5
 80072e0:	d420      	bmi.n	8007324 <_malloc_r+0xd0>
 80072e2:	2a0b      	cmp	r2, #11
 80072e4:	d917      	bls.n	8007316 <_malloc_r+0xc2>
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	6025      	str	r5, [r4, #0]
 80072ec:	bf18      	it	ne
 80072ee:	6059      	strne	r1, [r3, #4]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	bf08      	it	eq
 80072f4:	f8c8 1000 	streq.w	r1, [r8]
 80072f8:	5162      	str	r2, [r4, r5]
 80072fa:	604b      	str	r3, [r1, #4]
 80072fc:	4630      	mov	r0, r6
 80072fe:	f000 f82f 	bl	8007360 <__malloc_unlock>
 8007302:	f104 000b 	add.w	r0, r4, #11
 8007306:	1d23      	adds	r3, r4, #4
 8007308:	f020 0007 	bic.w	r0, r0, #7
 800730c:	1ac2      	subs	r2, r0, r3
 800730e:	bf1c      	itt	ne
 8007310:	1a1b      	subne	r3, r3, r0
 8007312:	50a3      	strne	r3, [r4, r2]
 8007314:	e7af      	b.n	8007276 <_malloc_r+0x22>
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	42a3      	cmp	r3, r4
 800731a:	bf0c      	ite	eq
 800731c:	f8c8 2000 	streq.w	r2, [r8]
 8007320:	605a      	strne	r2, [r3, #4]
 8007322:	e7eb      	b.n	80072fc <_malloc_r+0xa8>
 8007324:	4623      	mov	r3, r4
 8007326:	6864      	ldr	r4, [r4, #4]
 8007328:	e7ae      	b.n	8007288 <_malloc_r+0x34>
 800732a:	463c      	mov	r4, r7
 800732c:	687f      	ldr	r7, [r7, #4]
 800732e:	e7b6      	b.n	800729e <_malloc_r+0x4a>
 8007330:	461a      	mov	r2, r3
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	42a3      	cmp	r3, r4
 8007336:	d1fb      	bne.n	8007330 <_malloc_r+0xdc>
 8007338:	2300      	movs	r3, #0
 800733a:	6053      	str	r3, [r2, #4]
 800733c:	e7de      	b.n	80072fc <_malloc_r+0xa8>
 800733e:	230c      	movs	r3, #12
 8007340:	4630      	mov	r0, r6
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	f000 f80c 	bl	8007360 <__malloc_unlock>
 8007348:	e794      	b.n	8007274 <_malloc_r+0x20>
 800734a:	6005      	str	r5, [r0, #0]
 800734c:	e7d6      	b.n	80072fc <_malloc_r+0xa8>
 800734e:	bf00      	nop
 8007350:	20000af4 	.word	0x20000af4

08007354 <__malloc_lock>:
 8007354:	4801      	ldr	r0, [pc, #4]	@ (800735c <__malloc_lock+0x8>)
 8007356:	f7ff bf11 	b.w	800717c <__retarget_lock_acquire_recursive>
 800735a:	bf00      	nop
 800735c:	20000aec 	.word	0x20000aec

08007360 <__malloc_unlock>:
 8007360:	4801      	ldr	r0, [pc, #4]	@ (8007368 <__malloc_unlock+0x8>)
 8007362:	f7ff bf0c 	b.w	800717e <__retarget_lock_release_recursive>
 8007366:	bf00      	nop
 8007368:	20000aec 	.word	0x20000aec

0800736c <__ssputs_r>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	461f      	mov	r7, r3
 8007372:	688e      	ldr	r6, [r1, #8]
 8007374:	4682      	mov	sl, r0
 8007376:	42be      	cmp	r6, r7
 8007378:	460c      	mov	r4, r1
 800737a:	4690      	mov	r8, r2
 800737c:	680b      	ldr	r3, [r1, #0]
 800737e:	d82d      	bhi.n	80073dc <__ssputs_r+0x70>
 8007380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007388:	d026      	beq.n	80073d8 <__ssputs_r+0x6c>
 800738a:	6965      	ldr	r5, [r4, #20]
 800738c:	6909      	ldr	r1, [r1, #16]
 800738e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007392:	eba3 0901 	sub.w	r9, r3, r1
 8007396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800739a:	1c7b      	adds	r3, r7, #1
 800739c:	444b      	add	r3, r9
 800739e:	106d      	asrs	r5, r5, #1
 80073a0:	429d      	cmp	r5, r3
 80073a2:	bf38      	it	cc
 80073a4:	461d      	movcc	r5, r3
 80073a6:	0553      	lsls	r3, r2, #21
 80073a8:	d527      	bpl.n	80073fa <__ssputs_r+0x8e>
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7ff ff52 	bl	8007254 <_malloc_r>
 80073b0:	4606      	mov	r6, r0
 80073b2:	b360      	cbz	r0, 800740e <__ssputs_r+0xa2>
 80073b4:	464a      	mov	r2, r9
 80073b6:	6921      	ldr	r1, [r4, #16]
 80073b8:	f000 fafa 	bl	80079b0 <memcpy>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	6126      	str	r6, [r4, #16]
 80073ca:	444e      	add	r6, r9
 80073cc:	6026      	str	r6, [r4, #0]
 80073ce:	463e      	mov	r6, r7
 80073d0:	6165      	str	r5, [r4, #20]
 80073d2:	eba5 0509 	sub.w	r5, r5, r9
 80073d6:	60a5      	str	r5, [r4, #8]
 80073d8:	42be      	cmp	r6, r7
 80073da:	d900      	bls.n	80073de <__ssputs_r+0x72>
 80073dc:	463e      	mov	r6, r7
 80073de:	4632      	mov	r2, r6
 80073e0:	4641      	mov	r1, r8
 80073e2:	6820      	ldr	r0, [r4, #0]
 80073e4:	f000 faac 	bl	8007940 <memmove>
 80073e8:	2000      	movs	r0, #0
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	1b9b      	subs	r3, r3, r6
 80073ee:	60a3      	str	r3, [r4, #8]
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	4433      	add	r3, r6
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	462a      	mov	r2, r5
 80073fc:	f000 fae6 	bl	80079cc <_realloc_r>
 8007400:	4606      	mov	r6, r0
 8007402:	2800      	cmp	r0, #0
 8007404:	d1e0      	bne.n	80073c8 <__ssputs_r+0x5c>
 8007406:	4650      	mov	r0, sl
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	f7ff feb9 	bl	8007180 <_free_r>
 800740e:	230c      	movs	r3, #12
 8007410:	f8ca 3000 	str.w	r3, [sl]
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	e7e9      	b.n	80073f6 <__ssputs_r+0x8a>
	...

08007424 <_svfiprintf_r>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	4698      	mov	r8, r3
 800742a:	898b      	ldrh	r3, [r1, #12]
 800742c:	4607      	mov	r7, r0
 800742e:	061b      	lsls	r3, r3, #24
 8007430:	460d      	mov	r5, r1
 8007432:	4614      	mov	r4, r2
 8007434:	b09d      	sub	sp, #116	@ 0x74
 8007436:	d510      	bpl.n	800745a <_svfiprintf_r+0x36>
 8007438:	690b      	ldr	r3, [r1, #16]
 800743a:	b973      	cbnz	r3, 800745a <_svfiprintf_r+0x36>
 800743c:	2140      	movs	r1, #64	@ 0x40
 800743e:	f7ff ff09 	bl	8007254 <_malloc_r>
 8007442:	6028      	str	r0, [r5, #0]
 8007444:	6128      	str	r0, [r5, #16]
 8007446:	b930      	cbnz	r0, 8007456 <_svfiprintf_r+0x32>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	b01d      	add	sp, #116	@ 0x74
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	2340      	movs	r3, #64	@ 0x40
 8007458:	616b      	str	r3, [r5, #20]
 800745a:	2300      	movs	r3, #0
 800745c:	9309      	str	r3, [sp, #36]	@ 0x24
 800745e:	2320      	movs	r3, #32
 8007460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007464:	2330      	movs	r3, #48	@ 0x30
 8007466:	f04f 0901 	mov.w	r9, #1
 800746a:	f8cd 800c 	str.w	r8, [sp, #12]
 800746e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007608 <_svfiprintf_r+0x1e4>
 8007472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007476:	4623      	mov	r3, r4
 8007478:	469a      	mov	sl, r3
 800747a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747e:	b10a      	cbz	r2, 8007484 <_svfiprintf_r+0x60>
 8007480:	2a25      	cmp	r2, #37	@ 0x25
 8007482:	d1f9      	bne.n	8007478 <_svfiprintf_r+0x54>
 8007484:	ebba 0b04 	subs.w	fp, sl, r4
 8007488:	d00b      	beq.n	80074a2 <_svfiprintf_r+0x7e>
 800748a:	465b      	mov	r3, fp
 800748c:	4622      	mov	r2, r4
 800748e:	4629      	mov	r1, r5
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ff6b 	bl	800736c <__ssputs_r>
 8007496:	3001      	adds	r0, #1
 8007498:	f000 80a7 	beq.w	80075ea <_svfiprintf_r+0x1c6>
 800749c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749e:	445a      	add	r2, fp
 80074a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a2:	f89a 3000 	ldrb.w	r3, [sl]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 809f 	beq.w	80075ea <_svfiprintf_r+0x1c6>
 80074ac:	2300      	movs	r3, #0
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b6:	f10a 0a01 	add.w	sl, sl, #1
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	9307      	str	r3, [sp, #28]
 80074be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c4:	4654      	mov	r4, sl
 80074c6:	2205      	movs	r2, #5
 80074c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074cc:	484e      	ldr	r0, [pc, #312]	@ (8007608 <_svfiprintf_r+0x1e4>)
 80074ce:	f000 fa61 	bl	8007994 <memchr>
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	b9d8      	cbnz	r0, 800750e <_svfiprintf_r+0xea>
 80074d6:	06d0      	lsls	r0, r2, #27
 80074d8:	bf44      	itt	mi
 80074da:	2320      	movmi	r3, #32
 80074dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e0:	0711      	lsls	r1, r2, #28
 80074e2:	bf44      	itt	mi
 80074e4:	232b      	movmi	r3, #43	@ 0x2b
 80074e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ea:	f89a 3000 	ldrb.w	r3, [sl]
 80074ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f0:	d015      	beq.n	800751e <_svfiprintf_r+0xfa>
 80074f2:	4654      	mov	r4, sl
 80074f4:	2000      	movs	r0, #0
 80074f6:	f04f 0c0a 	mov.w	ip, #10
 80074fa:	9a07      	ldr	r2, [sp, #28]
 80074fc:	4621      	mov	r1, r4
 80074fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007502:	3b30      	subs	r3, #48	@ 0x30
 8007504:	2b09      	cmp	r3, #9
 8007506:	d94b      	bls.n	80075a0 <_svfiprintf_r+0x17c>
 8007508:	b1b0      	cbz	r0, 8007538 <_svfiprintf_r+0x114>
 800750a:	9207      	str	r2, [sp, #28]
 800750c:	e014      	b.n	8007538 <_svfiprintf_r+0x114>
 800750e:	eba0 0308 	sub.w	r3, r0, r8
 8007512:	fa09 f303 	lsl.w	r3, r9, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	46a2      	mov	sl, r4
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	e7d2      	b.n	80074c4 <_svfiprintf_r+0xa0>
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	1d19      	adds	r1, r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	9103      	str	r1, [sp, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	bfbb      	ittet	lt
 800752a:	425b      	neglt	r3, r3
 800752c:	f042 0202 	orrlt.w	r2, r2, #2
 8007530:	9307      	strge	r3, [sp, #28]
 8007532:	9307      	strlt	r3, [sp, #28]
 8007534:	bfb8      	it	lt
 8007536:	9204      	strlt	r2, [sp, #16]
 8007538:	7823      	ldrb	r3, [r4, #0]
 800753a:	2b2e      	cmp	r3, #46	@ 0x2e
 800753c:	d10a      	bne.n	8007554 <_svfiprintf_r+0x130>
 800753e:	7863      	ldrb	r3, [r4, #1]
 8007540:	2b2a      	cmp	r3, #42	@ 0x2a
 8007542:	d132      	bne.n	80075aa <_svfiprintf_r+0x186>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3402      	adds	r4, #2
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9203      	str	r2, [sp, #12]
 800754e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007552:	9305      	str	r3, [sp, #20]
 8007554:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800760c <_svfiprintf_r+0x1e8>
 8007558:	2203      	movs	r2, #3
 800755a:	4650      	mov	r0, sl
 800755c:	7821      	ldrb	r1, [r4, #0]
 800755e:	f000 fa19 	bl	8007994 <memchr>
 8007562:	b138      	cbz	r0, 8007574 <_svfiprintf_r+0x150>
 8007564:	2240      	movs	r2, #64	@ 0x40
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	4082      	lsls	r2, r0
 800756e:	4313      	orrs	r3, r2
 8007570:	3401      	adds	r4, #1
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007578:	2206      	movs	r2, #6
 800757a:	4825      	ldr	r0, [pc, #148]	@ (8007610 <_svfiprintf_r+0x1ec>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007580:	f000 fa08 	bl	8007994 <memchr>
 8007584:	2800      	cmp	r0, #0
 8007586:	d036      	beq.n	80075f6 <_svfiprintf_r+0x1d2>
 8007588:	4b22      	ldr	r3, [pc, #136]	@ (8007614 <_svfiprintf_r+0x1f0>)
 800758a:	bb1b      	cbnz	r3, 80075d4 <_svfiprintf_r+0x1b0>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	3307      	adds	r3, #7
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	3308      	adds	r3, #8
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759a:	4433      	add	r3, r6
 800759c:	9309      	str	r3, [sp, #36]	@ 0x24
 800759e:	e76a      	b.n	8007476 <_svfiprintf_r+0x52>
 80075a0:	460c      	mov	r4, r1
 80075a2:	2001      	movs	r0, #1
 80075a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a8:	e7a8      	b.n	80074fc <_svfiprintf_r+0xd8>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f04f 0c0a 	mov.w	ip, #10
 80075b0:	4619      	mov	r1, r3
 80075b2:	3401      	adds	r4, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075bc:	3a30      	subs	r2, #48	@ 0x30
 80075be:	2a09      	cmp	r2, #9
 80075c0:	d903      	bls.n	80075ca <_svfiprintf_r+0x1a6>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0c6      	beq.n	8007554 <_svfiprintf_r+0x130>
 80075c6:	9105      	str	r1, [sp, #20]
 80075c8:	e7c4      	b.n	8007554 <_svfiprintf_r+0x130>
 80075ca:	4604      	mov	r4, r0
 80075cc:	2301      	movs	r3, #1
 80075ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d2:	e7f0      	b.n	80075b6 <_svfiprintf_r+0x192>
 80075d4:	ab03      	add	r3, sp, #12
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	462a      	mov	r2, r5
 80075da:	4638      	mov	r0, r7
 80075dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <_svfiprintf_r+0x1f4>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	f3af 8000 	nop.w
 80075e4:	1c42      	adds	r2, r0, #1
 80075e6:	4606      	mov	r6, r0
 80075e8:	d1d6      	bne.n	8007598 <_svfiprintf_r+0x174>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	065b      	lsls	r3, r3, #25
 80075ee:	f53f af2d 	bmi.w	800744c <_svfiprintf_r+0x28>
 80075f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f4:	e72c      	b.n	8007450 <_svfiprintf_r+0x2c>
 80075f6:	ab03      	add	r3, sp, #12
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	462a      	mov	r2, r5
 80075fc:	4638      	mov	r0, r7
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <_svfiprintf_r+0x1f4>)
 8007600:	a904      	add	r1, sp, #16
 8007602:	f000 f87d 	bl	8007700 <_printf_i>
 8007606:	e7ed      	b.n	80075e4 <_svfiprintf_r+0x1c0>
 8007608:	0800872e 	.word	0x0800872e
 800760c:	08008734 	.word	0x08008734
 8007610:	08008738 	.word	0x08008738
 8007614:	00000000 	.word	0x00000000
 8007618:	0800736d 	.word	0x0800736d

0800761c <_printf_common>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	4616      	mov	r6, r2
 8007622:	4698      	mov	r8, r3
 8007624:	688a      	ldr	r2, [r1, #8]
 8007626:	690b      	ldr	r3, [r1, #16]
 8007628:	4607      	mov	r7, r0
 800762a:	4293      	cmp	r3, r2
 800762c:	bfb8      	it	lt
 800762e:	4613      	movlt	r3, r2
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007636:	460c      	mov	r4, r1
 8007638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800763c:	b10a      	cbz	r2, 8007642 <_printf_common+0x26>
 800763e:	3301      	adds	r3, #1
 8007640:	6033      	str	r3, [r6, #0]
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	0699      	lsls	r1, r3, #26
 8007646:	bf42      	ittt	mi
 8007648:	6833      	ldrmi	r3, [r6, #0]
 800764a:	3302      	addmi	r3, #2
 800764c:	6033      	strmi	r3, [r6, #0]
 800764e:	6825      	ldr	r5, [r4, #0]
 8007650:	f015 0506 	ands.w	r5, r5, #6
 8007654:	d106      	bne.n	8007664 <_printf_common+0x48>
 8007656:	f104 0a19 	add.w	sl, r4, #25
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	6832      	ldr	r2, [r6, #0]
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	42ab      	cmp	r3, r5
 8007662:	dc2b      	bgt.n	80076bc <_printf_common+0xa0>
 8007664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007668:	6822      	ldr	r2, [r4, #0]
 800766a:	3b00      	subs	r3, #0
 800766c:	bf18      	it	ne
 800766e:	2301      	movne	r3, #1
 8007670:	0692      	lsls	r2, r2, #26
 8007672:	d430      	bmi.n	80076d6 <_printf_common+0xba>
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800767c:	47c8      	blx	r9
 800767e:	3001      	adds	r0, #1
 8007680:	d023      	beq.n	80076ca <_printf_common+0xae>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	f003 0306 	and.w	r3, r3, #6
 800768a:	2b04      	cmp	r3, #4
 800768c:	bf14      	ite	ne
 800768e:	2500      	movne	r5, #0
 8007690:	6833      	ldreq	r3, [r6, #0]
 8007692:	f04f 0600 	mov.w	r6, #0
 8007696:	bf08      	it	eq
 8007698:	68e5      	ldreq	r5, [r4, #12]
 800769a:	f104 041a 	add.w	r4, r4, #26
 800769e:	bf08      	it	eq
 80076a0:	1aed      	subeq	r5, r5, r3
 80076a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076a6:	bf08      	it	eq
 80076a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ac:	4293      	cmp	r3, r2
 80076ae:	bfc4      	itt	gt
 80076b0:	1a9b      	subgt	r3, r3, r2
 80076b2:	18ed      	addgt	r5, r5, r3
 80076b4:	42b5      	cmp	r5, r6
 80076b6:	d11a      	bne.n	80076ee <_printf_common+0xd2>
 80076b8:	2000      	movs	r0, #0
 80076ba:	e008      	b.n	80076ce <_printf_common+0xb2>
 80076bc:	2301      	movs	r3, #1
 80076be:	4652      	mov	r2, sl
 80076c0:	4641      	mov	r1, r8
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c8      	blx	r9
 80076c6:	3001      	adds	r0, #1
 80076c8:	d103      	bne.n	80076d2 <_printf_common+0xb6>
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d2:	3501      	adds	r5, #1
 80076d4:	e7c1      	b.n	800765a <_printf_common+0x3e>
 80076d6:	2030      	movs	r0, #48	@ 0x30
 80076d8:	18e1      	adds	r1, r4, r3
 80076da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076e4:	4422      	add	r2, r4
 80076e6:	3302      	adds	r3, #2
 80076e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076ec:	e7c2      	b.n	8007674 <_printf_common+0x58>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4622      	mov	r2, r4
 80076f2:	4641      	mov	r1, r8
 80076f4:	4638      	mov	r0, r7
 80076f6:	47c8      	blx	r9
 80076f8:	3001      	adds	r0, #1
 80076fa:	d0e6      	beq.n	80076ca <_printf_common+0xae>
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7d9      	b.n	80076b4 <_printf_common+0x98>

08007700 <_printf_i>:
 8007700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	7e0f      	ldrb	r7, [r1, #24]
 8007706:	4691      	mov	r9, r2
 8007708:	2f78      	cmp	r7, #120	@ 0x78
 800770a:	4680      	mov	r8, r0
 800770c:	460c      	mov	r4, r1
 800770e:	469a      	mov	sl, r3
 8007710:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007716:	d807      	bhi.n	8007728 <_printf_i+0x28>
 8007718:	2f62      	cmp	r7, #98	@ 0x62
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x32>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f000 80d3 	beq.w	80078c8 <_printf_i+0x1c8>
 8007722:	2f58      	cmp	r7, #88	@ 0x58
 8007724:	f000 80ba 	beq.w	800789c <_printf_i+0x19c>
 8007728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800772c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007730:	e03a      	b.n	80077a8 <_printf_i+0xa8>
 8007732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007736:	2b15      	cmp	r3, #21
 8007738:	d8f6      	bhi.n	8007728 <_printf_i+0x28>
 800773a:	a101      	add	r1, pc, #4	@ (adr r1, 8007740 <_printf_i+0x40>)
 800773c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007740:	08007799 	.word	0x08007799
 8007744:	080077ad 	.word	0x080077ad
 8007748:	08007729 	.word	0x08007729
 800774c:	08007729 	.word	0x08007729
 8007750:	08007729 	.word	0x08007729
 8007754:	08007729 	.word	0x08007729
 8007758:	080077ad 	.word	0x080077ad
 800775c:	08007729 	.word	0x08007729
 8007760:	08007729 	.word	0x08007729
 8007764:	08007729 	.word	0x08007729
 8007768:	08007729 	.word	0x08007729
 800776c:	080078af 	.word	0x080078af
 8007770:	080077d7 	.word	0x080077d7
 8007774:	08007869 	.word	0x08007869
 8007778:	08007729 	.word	0x08007729
 800777c:	08007729 	.word	0x08007729
 8007780:	080078d1 	.word	0x080078d1
 8007784:	08007729 	.word	0x08007729
 8007788:	080077d7 	.word	0x080077d7
 800778c:	08007729 	.word	0x08007729
 8007790:	08007729 	.word	0x08007729
 8007794:	08007871 	.word	0x08007871
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6032      	str	r2, [r6, #0]
 80077a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e09e      	b.n	80078ea <_printf_i+0x1ea>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	1d19      	adds	r1, r3, #4
 80077b2:	6031      	str	r1, [r6, #0]
 80077b4:	0606      	lsls	r6, r0, #24
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0xbc>
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	e003      	b.n	80077c4 <_printf_i+0xc4>
 80077bc:	0645      	lsls	r5, r0, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0xb8>
 80077c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	da03      	bge.n	80077d0 <_printf_i+0xd0>
 80077c8:	232d      	movs	r3, #45	@ 0x2d
 80077ca:	426d      	negs	r5, r5
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d0:	230a      	movs	r3, #10
 80077d2:	4859      	ldr	r0, [pc, #356]	@ (8007938 <_printf_i+0x238>)
 80077d4:	e011      	b.n	80077fa <_printf_i+0xfa>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	0608      	lsls	r0, r1, #24
 80077dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80077e0:	d402      	bmi.n	80077e8 <_printf_i+0xe8>
 80077e2:	0649      	lsls	r1, r1, #25
 80077e4:	bf48      	it	mi
 80077e6:	b2ad      	uxthmi	r5, r5
 80077e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ea:	6033      	str	r3, [r6, #0]
 80077ec:	bf14      	ite	ne
 80077ee:	230a      	movne	r3, #10
 80077f0:	2308      	moveq	r3, #8
 80077f2:	4851      	ldr	r0, [pc, #324]	@ (8007938 <_printf_i+0x238>)
 80077f4:	2100      	movs	r1, #0
 80077f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077fa:	6866      	ldr	r6, [r4, #4]
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	bfa8      	it	ge
 8007800:	6821      	ldrge	r1, [r4, #0]
 8007802:	60a6      	str	r6, [r4, #8]
 8007804:	bfa4      	itt	ge
 8007806:	f021 0104 	bicge.w	r1, r1, #4
 800780a:	6021      	strge	r1, [r4, #0]
 800780c:	b90d      	cbnz	r5, 8007812 <_printf_i+0x112>
 800780e:	2e00      	cmp	r6, #0
 8007810:	d04b      	beq.n	80078aa <_printf_i+0x1aa>
 8007812:	4616      	mov	r6, r2
 8007814:	fbb5 f1f3 	udiv	r1, r5, r3
 8007818:	fb03 5711 	mls	r7, r3, r1, r5
 800781c:	5dc7      	ldrb	r7, [r0, r7]
 800781e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007822:	462f      	mov	r7, r5
 8007824:	42bb      	cmp	r3, r7
 8007826:	460d      	mov	r5, r1
 8007828:	d9f4      	bls.n	8007814 <_printf_i+0x114>
 800782a:	2b08      	cmp	r3, #8
 800782c:	d10b      	bne.n	8007846 <_printf_i+0x146>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	07df      	lsls	r7, r3, #31
 8007832:	d508      	bpl.n	8007846 <_printf_i+0x146>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6861      	ldr	r1, [r4, #4]
 8007838:	4299      	cmp	r1, r3
 800783a:	bfde      	ittt	le
 800783c:	2330      	movle	r3, #48	@ 0x30
 800783e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007842:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007846:	1b92      	subs	r2, r2, r6
 8007848:	6122      	str	r2, [r4, #16]
 800784a:	464b      	mov	r3, r9
 800784c:	4621      	mov	r1, r4
 800784e:	4640      	mov	r0, r8
 8007850:	f8cd a000 	str.w	sl, [sp]
 8007854:	aa03      	add	r2, sp, #12
 8007856:	f7ff fee1 	bl	800761c <_printf_common>
 800785a:	3001      	adds	r0, #1
 800785c:	d14a      	bne.n	80078f4 <_printf_i+0x1f4>
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	b004      	add	sp, #16
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	f043 0320 	orr.w	r3, r3, #32
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	2778      	movs	r7, #120	@ 0x78
 8007872:	4832      	ldr	r0, [pc, #200]	@ (800793c <_printf_i+0x23c>)
 8007874:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	061f      	lsls	r7, r3, #24
 800787e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007882:	d402      	bmi.n	800788a <_printf_i+0x18a>
 8007884:	065f      	lsls	r7, r3, #25
 8007886:	bf48      	it	mi
 8007888:	b2ad      	uxthmi	r5, r5
 800788a:	6031      	str	r1, [r6, #0]
 800788c:	07d9      	lsls	r1, r3, #31
 800788e:	bf44      	itt	mi
 8007890:	f043 0320 	orrmi.w	r3, r3, #32
 8007894:	6023      	strmi	r3, [r4, #0]
 8007896:	b11d      	cbz	r5, 80078a0 <_printf_i+0x1a0>
 8007898:	2310      	movs	r3, #16
 800789a:	e7ab      	b.n	80077f4 <_printf_i+0xf4>
 800789c:	4826      	ldr	r0, [pc, #152]	@ (8007938 <_printf_i+0x238>)
 800789e:	e7e9      	b.n	8007874 <_printf_i+0x174>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	f023 0320 	bic.w	r3, r3, #32
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	e7f6      	b.n	8007898 <_printf_i+0x198>
 80078aa:	4616      	mov	r6, r2
 80078ac:	e7bd      	b.n	800782a <_printf_i+0x12a>
 80078ae:	6833      	ldr	r3, [r6, #0]
 80078b0:	6825      	ldr	r5, [r4, #0]
 80078b2:	1d18      	adds	r0, r3, #4
 80078b4:	6961      	ldr	r1, [r4, #20]
 80078b6:	6030      	str	r0, [r6, #0]
 80078b8:	062e      	lsls	r6, r5, #24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	d501      	bpl.n	80078c2 <_printf_i+0x1c2>
 80078be:	6019      	str	r1, [r3, #0]
 80078c0:	e002      	b.n	80078c8 <_printf_i+0x1c8>
 80078c2:	0668      	lsls	r0, r5, #25
 80078c4:	d5fb      	bpl.n	80078be <_printf_i+0x1be>
 80078c6:	8019      	strh	r1, [r3, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	4616      	mov	r6, r2
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	e7bc      	b.n	800784a <_printf_i+0x14a>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	2100      	movs	r1, #0
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	6032      	str	r2, [r6, #0]
 80078d8:	681e      	ldr	r6, [r3, #0]
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f859 	bl	8007994 <memchr>
 80078e2:	b108      	cbz	r0, 80078e8 <_printf_i+0x1e8>
 80078e4:	1b80      	subs	r0, r0, r6
 80078e6:	6060      	str	r0, [r4, #4]
 80078e8:	6863      	ldr	r3, [r4, #4]
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	2300      	movs	r3, #0
 80078ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078f2:	e7aa      	b.n	800784a <_printf_i+0x14a>
 80078f4:	4632      	mov	r2, r6
 80078f6:	4649      	mov	r1, r9
 80078f8:	4640      	mov	r0, r8
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	47d0      	blx	sl
 80078fe:	3001      	adds	r0, #1
 8007900:	d0ad      	beq.n	800785e <_printf_i+0x15e>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	079b      	lsls	r3, r3, #30
 8007906:	d413      	bmi.n	8007930 <_printf_i+0x230>
 8007908:	68e0      	ldr	r0, [r4, #12]
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	4298      	cmp	r0, r3
 800790e:	bfb8      	it	lt
 8007910:	4618      	movlt	r0, r3
 8007912:	e7a6      	b.n	8007862 <_printf_i+0x162>
 8007914:	2301      	movs	r3, #1
 8007916:	4632      	mov	r2, r6
 8007918:	4649      	mov	r1, r9
 800791a:	4640      	mov	r0, r8
 800791c:	47d0      	blx	sl
 800791e:	3001      	adds	r0, #1
 8007920:	d09d      	beq.n	800785e <_printf_i+0x15e>
 8007922:	3501      	adds	r5, #1
 8007924:	68e3      	ldr	r3, [r4, #12]
 8007926:	9903      	ldr	r1, [sp, #12]
 8007928:	1a5b      	subs	r3, r3, r1
 800792a:	42ab      	cmp	r3, r5
 800792c:	dcf2      	bgt.n	8007914 <_printf_i+0x214>
 800792e:	e7eb      	b.n	8007908 <_printf_i+0x208>
 8007930:	2500      	movs	r5, #0
 8007932:	f104 0619 	add.w	r6, r4, #25
 8007936:	e7f5      	b.n	8007924 <_printf_i+0x224>
 8007938:	0800873f 	.word	0x0800873f
 800793c:	08008750 	.word	0x08008750

08007940 <memmove>:
 8007940:	4288      	cmp	r0, r1
 8007942:	b510      	push	{r4, lr}
 8007944:	eb01 0402 	add.w	r4, r1, r2
 8007948:	d902      	bls.n	8007950 <memmove+0x10>
 800794a:	4284      	cmp	r4, r0
 800794c:	4623      	mov	r3, r4
 800794e:	d807      	bhi.n	8007960 <memmove+0x20>
 8007950:	1e43      	subs	r3, r0, #1
 8007952:	42a1      	cmp	r1, r4
 8007954:	d008      	beq.n	8007968 <memmove+0x28>
 8007956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795e:	e7f8      	b.n	8007952 <memmove+0x12>
 8007960:	4601      	mov	r1, r0
 8007962:	4402      	add	r2, r0
 8007964:	428a      	cmp	r2, r1
 8007966:	d100      	bne.n	800796a <memmove+0x2a>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007972:	e7f7      	b.n	8007964 <memmove+0x24>

08007974 <_sbrk_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	2300      	movs	r3, #0
 8007978:	4d05      	ldr	r5, [pc, #20]	@ (8007990 <_sbrk_r+0x1c>)
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7fa fb38 	bl	8001ff4 <_sbrk>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_sbrk_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_sbrk_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20000ae8 	.word	0x20000ae8

08007994 <memchr>:
 8007994:	4603      	mov	r3, r0
 8007996:	b510      	push	{r4, lr}
 8007998:	b2c9      	uxtb	r1, r1
 800799a:	4402      	add	r2, r0
 800799c:	4293      	cmp	r3, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	d101      	bne.n	80079a6 <memchr+0x12>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e003      	b.n	80079ae <memchr+0x1a>
 80079a6:	7804      	ldrb	r4, [r0, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	428c      	cmp	r4, r1
 80079ac:	d1f6      	bne.n	800799c <memchr+0x8>
 80079ae:	bd10      	pop	{r4, pc}

080079b0 <memcpy>:
 80079b0:	440a      	add	r2, r1
 80079b2:	4291      	cmp	r1, r2
 80079b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b8:	d100      	bne.n	80079bc <memcpy+0xc>
 80079ba:	4770      	bx	lr
 80079bc:	b510      	push	{r4, lr}
 80079be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c2:	4291      	cmp	r1, r2
 80079c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c8:	d1f9      	bne.n	80079be <memcpy+0xe>
 80079ca:	bd10      	pop	{r4, pc}

080079cc <_realloc_r>:
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	4680      	mov	r8, r0
 80079d2:	4615      	mov	r5, r2
 80079d4:	460c      	mov	r4, r1
 80079d6:	b921      	cbnz	r1, 80079e2 <_realloc_r+0x16>
 80079d8:	4611      	mov	r1, r2
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f7ff bc39 	b.w	8007254 <_malloc_r>
 80079e2:	b92a      	cbnz	r2, 80079f0 <_realloc_r+0x24>
 80079e4:	f7ff fbcc 	bl	8007180 <_free_r>
 80079e8:	2400      	movs	r4, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f0:	f000 f81a 	bl	8007a28 <_malloc_usable_size_r>
 80079f4:	4285      	cmp	r5, r0
 80079f6:	4606      	mov	r6, r0
 80079f8:	d802      	bhi.n	8007a00 <_realloc_r+0x34>
 80079fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079fe:	d8f4      	bhi.n	80079ea <_realloc_r+0x1e>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4640      	mov	r0, r8
 8007a04:	f7ff fc26 	bl	8007254 <_malloc_r>
 8007a08:	4607      	mov	r7, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0ec      	beq.n	80079e8 <_realloc_r+0x1c>
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	462a      	mov	r2, r5
 8007a12:	4621      	mov	r1, r4
 8007a14:	bf28      	it	cs
 8007a16:	4632      	movcs	r2, r6
 8007a18:	f7ff ffca 	bl	80079b0 <memcpy>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f7ff fbae 	bl	8007180 <_free_r>
 8007a24:	463c      	mov	r4, r7
 8007a26:	e7e0      	b.n	80079ea <_realloc_r+0x1e>

08007a28 <_malloc_usable_size_r>:
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfbc      	itt	lt
 8007a32:	580b      	ldrlt	r3, [r1, r0]
 8007a34:	18c0      	addlt	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
